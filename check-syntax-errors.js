#!/usr/bin/env node

/**
 * üîç Verificador de Errores de Sintaxis
 * 
 * Verifica que no haya errores de sintaxis en los archivos principales
 */

const fs = require('fs');
const path = require('path');

console.log('üîç VERIFICANDO ERRORES DE SINTAXIS');
console.log('='.repeat(40));

const filesToCheck = [
    'services/AdminService.js',
    'services/StorageService.js',
    'components/AdminPanel.js',
    'store/slices/authSlice.js'
];

let allFilesValid = true;

filesToCheck.forEach(file => {
    console.log(`\nüìÅ Verificando ${file}...`);
    
    const filePath = path.join(__dirname, file);
    
    if (!fs.existsSync(filePath)) {
        console.log(`   ‚ùå Archivo no encontrado: ${file}`);
        allFilesValid = false;
        return;
    }
    
    try {
        const content = fs.readFileSync(filePath, 'utf8');
        
        // Verificaciones b√°sicas de sintaxis
        const checks = [
            {
                name: 'Llaves balanceadas',
                test: () => {
                    const openBraces = (content.match(/\{/g) || []).length;
                    const closeBraces = (content.match(/\}/g) || []).length;
                    return openBraces === closeBraces;
                }
            },
            {
                name: 'Par√©ntesis balanceados',
                test: () => {
                    const openParens = (content.match(/\(/g) || []).length;
                    const closeParens = (content.match(/\)/g) || []).length;
                    return openParens === closeParens;
                }
            },
            {
                name: 'No hay funciones sin llaves',
                test: () => {
                    // Buscar funciones que no tengan llave de apertura en la misma l√≠nea o siguiente
                    const functionLines = content.split('\n');
                    for (let i = 0; i < functionLines.length; i++) {
                        const line = functionLines[i].trim();
                        if (line.includes('async ') && line.includes('(') && line.includes(')') && !line.includes('=>')) {
                            // Es una funci√≥n async
                            if (!line.includes('{')) {
                                // No tiene llave en la misma l√≠nea, verificar siguiente l√≠nea
                                const nextLine = functionLines[i + 1];
                                if (!nextLine || !nextLine.trim().startsWith('{') && !nextLine.includes('try {')) {
                                    console.log(`   ‚ö†Ô∏è Posible funci√≥n sin llave: l√≠nea ${i + 1}: ${line}`);
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }
            },
            {
                name: 'Export statement v√°lido',
                test: () => {
                    return content.includes('export default') && !content.includes('export default;');
                }
            }
        ];
        
        let fileValid = true;
        checks.forEach(check => {
            try {
                if (check.test()) {
                    console.log(`   ‚úÖ ${check.name}`);
                } else {
                    console.log(`   ‚ùå ${check.name}`);
                    fileValid = false;
                }
            } catch (error) {
                console.log(`   ‚ö†Ô∏è ${check.name}: Error en verificaci√≥n`);
            }
        });
        
        if (fileValid) {
            console.log(`   ‚úÖ ${file} - Sintaxis v√°lida`);
        } else {
            console.log(`   ‚ùå ${file} - Errores de sintaxis detectados`);
            allFilesValid = false;
        }
        
    } catch (error) {
        console.log(`   ‚ùå Error leyendo ${file}: ${error.message}`);
        allFilesValid = false;
    }
});

console.log('\nüìä RESULTADO FINAL:');
if (allFilesValid) {
    console.log('‚úÖ TODOS LOS ARCHIVOS TIENEN SINTAXIS V√ÅLIDA');
    console.log('\nüéØ El sistema deber√≠a compilar correctamente ahora.');
    console.log('üöÄ Puedes intentar ejecutar la app nuevamente.');
} else {
    console.log('‚ùå SE DETECTARON ERRORES DE SINTAXIS');
    console.log('\nüîß Revisa los archivos marcados con errores.');
}

console.log('\n' + '='.repeat(40));