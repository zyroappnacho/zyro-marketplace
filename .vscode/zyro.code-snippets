{
  "Zyro Screen Component": {
    "prefix": "zyro-screen",
    "body": [
      "import React from 'react';",
      "import { StatusBar } from 'expo-status-bar';",
      "import styled from 'styled-components/native';",
      "import { colors, spacing } from '../styles/theme';",
      "",
      "interface ${1:ScreenName}Props {",
      "  navigation: any;",
      "}",
      "",
      "const Container = styled.View`",
      "  flex: 1;",
      "  background-color: \\${colors.black};",
      "  padding: \\${spacing.md}px;",
      "`;",
      "",
      "export const ${1:ScreenName}: React.FC<${1:ScreenName}Props> = ({",
      "  navigation,",
      "}) => {",
      "  return (",
      "    <Container>",
      "      <StatusBar style=\"light\" backgroundColor={colors.black} />",
      "      $0",
      "    </Container>",
      "  );",
      "};"
    ],
    "description": "Create a new Zyro screen component with premium styling"
  },
  "Zyro Component": {
    "prefix": "zyro-component",
    "body": [
      "import React from 'react';",
      "import styled from 'styled-components/native';",
      "import { colors, spacing } from '../styles/theme';",
      "",
      "interface ${1:ComponentName}Props {",
      "  $2",
      "}",
      "",
      "const Container = styled.View`",
      "  $3",
      "`;",
      "",
      "export const ${1:ComponentName}: React.FC<${1:ComponentName}Props> = ({",
      "  $4",
      "}) => {",
      "  return (",
      "    <Container>",
      "      $0",
      "    </Container>",
      "  );",
      "};"
    ],
    "description": "Create a new Zyro component with styled-components"
  },
  "Zyro Premium Button": {
    "prefix": "zyro-button",
    "body": [
      "<PremiumButton",
      "  title=\"${1:Button Text}\"",
      "  variant=\"${2|primary,secondary,outline|}\"",
      "  size=\"${3|small,medium,large|}\"",
      "  onPress={${4:handlePress}}",
      "  ${5:fullWidth}",
      "/>"
    ],
    "description": "Insert a Zyro premium button"
  },
  "Zyro Premium Card": {
    "prefix": "zyro-card",
    "body": [
      "<PremiumCard",
      "  title=\"${1:Card Title}\"",
      "  ${2:subtitle=\"${3:Card Subtitle}\"}",
      "  ${4:onPress={${5:handlePress}}}",
      ">",
      "  $0",
      "</PremiumCard>"
    ],
    "description": "Insert a Zyro premium card"
  },
  "Zyro Redux Slice": {
    "prefix": "zyro-slice",
    "body": [
      "import { createSlice, PayloadAction } from '@reduxjs/toolkit';",
      "",
      "interface ${1:SliceName}State {",
      "  $2",
      "}",
      "",
      "const initialState: ${1:SliceName}State = {",
      "  $3",
      "};",
      "",
      "const ${4:sliceName}Slice = createSlice({",
      "  name: '${4:sliceName}',",
      "  initialState,",
      "  reducers: {",
      "    ${5:actionName}: (state, action: PayloadAction<${6:PayloadType}>) => {",
      "      $0",
      "    },",
      "  },",
      "});",
      "",
      "export const { ${5:actionName} } = ${4:sliceName}Slice.actions;",
      "export default ${4:sliceName}Slice.reducer;"
    ],
    "description": "Create a new Redux Toolkit slice"
  },
  "Zyro Service": {
    "prefix": "zyro-service",
    "body": [
      "import { config } from '../config/environment';",
      "",
      "class ${1:ServiceName}Service {",
      "  private baseUrl = config.apiUrl;",
      "",
      "  async ${2:methodName}(${3:params}): Promise<${4:ReturnType}> {",
      "    try {",
      "      const response = await fetch(`\\${this.baseUrl}/${5:endpoint}`, {",
      "        method: '${6|GET,POST,PUT,DELETE|}',",
      "        headers: {",
      "          'Content-Type': 'application/json',",
      "        },",
      "        ${7:body: JSON.stringify(${8:data}),}",
      "      });",
      "",
      "      if (!response.ok) {",
      "        throw new Error(`HTTP error! status: \\${response.status}`);",
      "      }",
      "",
      "      return await response.json();",
      "    } catch (error) {",
      "      console.error('${1:ServiceName}Service.${2:methodName} error:', error);",
      "      throw error;",
      "    }",
      "  }",
      "}",
      "",
      "export const ${9:serviceName}Service = new ${1:ServiceName}Service();"
    ],
    "description": "Create a new service class"
  },
  "Zyro Test": {
    "prefix": "zyro-test",
    "body": [
      "import React from 'react';",
      "import { render, fireEvent } from '@testing-library/react-native';",
      "import { ${1:ComponentName} } from '../${1:ComponentName}';",
      "",
      "describe('${1:ComponentName}', () => {",
      "  it('${2:should render correctly}', () => {",
      "    const { getByText } = render(<${1:ComponentName} ${3:props} />);",
      "    $0",
      "  });",
      "",
      "  it('${4:should handle user interaction}', () => {",
      "    const mockFn = jest.fn();",
      "    const { getByText } = render(<${1:ComponentName} ${5:onPress={mockFn}} />);",
      "    ",
      "    fireEvent.press(getByText('${6:Button Text}'));",
      "    expect(mockFn).toHaveBeenCalled();",
      "  });",
      "});"
    ],
    "description": "Create a test file for a component"
  },
  "Zyro Hook": {
    "prefix": "zyro-hook",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "export const use${1:HookName} = (${2:params}) => {",
      "  const [${3:state}, set${3/(.*)/${1:/capitalize}/}] = useState(${4:initialValue});",
      "",
      "  useEffect(() => {",
      "    $0",
      "  }, [${5:dependencies}]);",
      "",
      "  return {",
      "    ${3:state},",
      "    set${3/(.*)/${1:/capitalize}/},",
      "  };",
      "};"
    ],
    "description": "Create a custom React hook"
  }
}