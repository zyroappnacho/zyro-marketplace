import React, { useState, useCallback, useRef, useEffect } from 'react';
import {
  View,
  Text,
  Image,
  TouchableOpacity,
  ScrollView,
  StyleSheet,
  Dimensions,
  StatusBar,
  Alert,
  Platform,
  SafeAreaView,
  TextInput,
  Modal,
  Animated,
  Easing,
} from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import { Ionicons } from '@expo/vector-icons';
import AsyncStorage from '@react-native-async-storage/async-storage';
import InteractiveMap from './InteractiveMap';
import CalendarPicker from './CalendarPicker';
import { CampaignManagementModal, CampaignEditorModal } from './CampaignManagement';
import { CompanyManagementModal } from './CompanyManagement';
import { useCollaborationPersistence } from '../hooks/useCollaborationPersistence';
import logoZyro from '../assets/logozyrotransparente.png';

const { width, height } = Dimensions.get('window');


  // ‚úÖ FUNCI√ìN MEJORADA PARA FORMATEAR SEGUIDORES CON VALIDACI√ìN ESTRICTA
  const formatFollowersCount = (followers) => {
    try {
      if (!followers) {
        console.warn('‚ö†Ô∏è Followers es null/undefined:', followers);
        return '0';
      }
      
      // Convertir a string si es n√∫mero
      const followersStr = typeof followers === 'number' ? followers.toString() : followers;
      
      // Limpiar cualquier car√°cter no num√©rico excepto puntos y comas
      const cleanFollowers = followersStr.replace(/[^\d.,]/g, '');
      
      if (!cleanFollowers || cleanFollowers === '') {
        console.warn('‚ö†Ô∏è Followers vac√≠o despu√©s de limpiar:', followersStr);
        return '0';
      }
      
      // Convertir a n√∫mero y formatear
      const followersNumber = parseInt(cleanFollowers.replace(/[.,]/g, ''));
      
      if (isNaN(followersNumber)) {
        console.warn('‚ö†Ô∏è Followers no es un n√∫mero v√°lido:', followersStr);
        return '0';
      }
      
      const formatted = followersNumber.toLocaleString();
      console.log('‚úÖ Seguidores formateados:', { original: followers, formatted });
      return formatted;
    } catch (error) {
      console.error('‚ùå Error formateando seguidores:', error, 'Valor original:', followers);
      return '0';
    }
  };

  // ‚úÖ FUNCI√ìN ESPEC√çFICA PARA OBTENER SEGUIDORES REALES DEL INFLUENCER
  const getInfluencerRealFollowers = (influencerEmail) => {
    try {
      // Buscar en datos personales actualizados
      const personalDataKey = `personalData_${influencerEmail}`;
      AsyncStorage.getItem(personalDataKey).then(savedData => {
        if (savedData) {
          const parsedData = JSON.parse(savedData);
          return parsedData.instagramFollowers || parsedData.followers || '0';
        }
      }).catch(error => {
        console.error('Error obteniendo seguidores reales:', error);
      });

      // Datos por defecto actualizados
      const realFollowersData = {
        'nayades@gmail.com': '800000', // ‚úÖ CORREGIDO: 800K+ seguidores reales
        'ana@gmail.com': '25000',
        'influencer@zyro.com': '50000'
      };

      return realFollowersData[influencerEmail] || '0';
    } catch (error) {
      console.error('‚ùå Error obteniendo seguidores reales:', error);
      return '0';
    }
  };

// Componente de Error Boundary simple
const ErrorBoundary = ({ children }) => {
  const [hasError, setHasError] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    const errorHandler = (error, errorInfo) => {
      console.error('Error capturado por ErrorBoundary:', error, errorInfo);
      setHasError(true);
      setError(error);
    };

    // Reset error state cuando children cambia
    setHasError(false);
    setError(null);
  }, [children]);

  if (hasError) {
  // Return corregido:     return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#000' }}>
        <Text style={{ color: '#fff', fontSize: 18, marginBottom: 20 }}>
          Algo sali√≥ mal
        </Text>
        <Text style={{ color: '#ccc', fontSize: 14, textAlign: 'center', marginBottom: 20 }}>
          {error?.message || 'Error desconocido'}
        </Text>
        <TouchableOpacity
          style={{ backgroundColor: '#C9A961', padding: 15, borderRadius: 8 }}
          onPress={() => {
            setHasError(false);
            setError(null);
          }}
        >
          <Text style={{ color: '#000', fontWeight: 'bold' }}>Reintentar</Text>
        </TouchableOpacity>
      </View>
    );
  }

  // Return corregido:   return children;
};

export default function ZyroApp() {
  const [currentScreen, setCurrentScreen] = useState('welcome');
  const [userType, setUserType] = useState(null);
  const [currentUser, setCurrentUser] = useState(null);
  const [activeTab, setActiveTab] = useState(0);
  const [selectedCity, setSelectedCity] = useState('Madrid');
  const [selectedCategory, setSelectedCategory] = useState('Todos');
  const [showCalendar, setShowCalendar] = useState(false);
  const [showNotifications, setShowNotifications] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [showCityDropdown, setShowCityDropdown] = useState(false);

  // üîÑ SISTEMA DE PERSISTENCIA DE COLABORACIONES - VERSI√ìN SIMPLIFICADA
  const [influencerCollaborations, setInfluencerCollaborations] = useState([]);
  const [pendingAdminRequests, setPendingAdminRequests] = useState([]);
  const [pendingInfluencers, setPendingInfluencers] = useState([]);

  // Funciones para persistir solicitudes de influencers
  const savePendingInfluencersToStorage = useCallback(async (influencers) => {
    try {
      await AsyncStorage.setItem('pendingInfluencers', JSON.stringify(influencers));
      console.log('‚úÖ Solicitudes de influencers guardadas:', {
        total: influencers.length,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('‚ùå Error guardando solicitudes de influencers:', error);
    }
  }, []);

  // Funciones para persistir influencers aprobados con datos completos
  const saveApprovedInfluencersToStorage = useCallback(async (approvedData) => {
    try {
      await AsyncStorage.setItem('approvedInfluencers', JSON.stringify(approvedData));
      console.log('‚úÖ Influencers aprobados guardados:', {
        total: approvedData.length,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('‚ùå Error guardando influencers aprobados:', error);
    }
  }, []);

  const loadApprovedInfluencersFromStorage = useCallback(async () => {
    try {
      const savedApproved = await AsyncStorage.getItem('approvedInfluencers');
      if (savedApproved) {
        const parsedApproved = JSON.parse(savedApproved);
        const validApproved = Array.isArray(parsedApproved) ? parsedApproved : [];
        setApprovedInfluencersData(validApproved);
        setApprovedInfluencers(validApproved.map(inf => inf.email));
        console.log('‚úÖ Influencers aprobados cargados desde storage:', {
          total: validApproved.length,
          influencers: validApproved.map(inf => ({ name: inf.name, email: inf.email, followers: inf.followers }))
        });
      } else {
        // ‚úÖ USAR FUNCI√ìN DE LIMPIEZA PARA CARGAR SOLO INFLUENCERS REALES
        console.log('üìù No hay datos guardados, cargando influencers reales con acceso...');
        await cleanApprovedInfluencers();
      }
    } catch (error) {
      console.error('‚ùå Error cargando influencers aprobados:', error);
      setApprovedInfluencersData([]);
      setApprovedInfluencers([]);
    }
  }, [saveApprovedInfluencersToStorage]);

  const loadPendingInfluencersFromStorage = useCallback(async () => {
    try {
      const savedInfluencers = await AsyncStorage.getItem('pendingInfluencers');
      if (savedInfluencers) {
        const parsedInfluencers = JSON.parse(savedInfluencers);
        // Validar que parsedInfluencers sea un array
        const validInfluencers = Array.isArray(parsedInfluencers) ? parsedInfluencers : [];
        setPendingInfluencers(validInfluencers);
        console.log('‚úÖ Solicitudes de influencers cargadas desde storage:', {
          total: validInfluencers.length,
          solicitudes: validInfluencers.map(inf => ({ name: inf.name, email: inf.email }))
        });
      } else {
        console.log('üìù No hay solicitudes de influencers guardadas');
        setPendingInfluencers([]);
      }
    } catch (error) {
      console.error('‚ùå Error cargando solicitudes de influencers:', error);
      setPendingInfluencers([]); // Asegurar que siempre sea un array
    }
  }, []);

  // Funci√≥n para limpiar datos corruptos
  const clearCorruptedData = useCallback(async () => {
    try {
      const keysToClean = [
        'pendingInfluencers',
        'influencerCollaborations',
        'adminCollaborations'
      ];

      for (const key of keysToClean) {
        try {
          const data = await AsyncStorage.getItem(key);
          if (data) {
            JSON.parse(data); // Intentar parsear para verificar
          }
        } catch (parseError) {
          console.log(`üßπ Limpiando datos corruptos: ${key}`);
          await AsyncStorage.removeItem(key);
        }
      }

      console.log('‚úÖ Verificaci√≥n de datos completada');
    } catch (error) {
      console.error('‚ùå Error limpiando datos corruptos:', error);
    }
  }, []);

  // Cargar solicitudes de influencers al iniciar la app
  useEffect(() => {
    const initializePendingInfluencers = async () => {
      try {
        await loadPendingInfluencersFromStorage();
      } catch (error) {
        console.error('‚ùå Error cr√≠tico cargando influencers, limpiando datos:', error);
        await clearCorruptedData();
        setPendingInfluencers([]);
      }
    };

    initializePendingInfluencers();
  }, [loadPendingInfluencersFromStorage, clearCorruptedData]);

  // Cargar influencers aprobados al iniciar la app
  useEffect(() => {
    const initializeApprovedInfluencers = async () => {
      try {
        await loadApprovedInfluencersFromStorage();
      } catch (error) {
        console.error('‚ùå Error cr√≠tico cargando influencers aprobados:', error);
        setApprovedInfluencersData([]);
        setApprovedInfluencers([]);
      }
    };

    initializeApprovedInfluencers();
  }, [loadApprovedInfluencersFromStorage]);

  // Cargar colaboraciones al iniciar la app y cuando cambie el usuario
  useEffect(() => {
    loadInfluencerCollaborationsFromStorage();
  }, []); // Solo se ejecuta una vez al montar el componente

  // Cargar colaboraciones cuando el usuario cambie
  useEffect(() => {
    if (currentUser?.email) {
      loadInfluencerCollaborationsFromStorage();
    }
  }, [currentUser?.email, loadInfluencerCollaborationsFromStorage]);
  const [approvedCollaborations, setApprovedCollaborations] = useState([]);
  const [rejectedRequests, setRejectedRequests] = useState([]);
  const [collaborationHistory, setCollaborationHistory] = useState([]);

  // Funci√≥n para limpiar todas las colaboraciones (solo para reset)
  const clearAllCollaborations = useCallback(async () => {
    try {
      setInfluencerCollaborations([]);
      setPendingAdminRequests([]);
      setApprovedCollaborations([]);
      setRejectedRequests([]);
      await AsyncStorage.removeItem('influencerCollaborations');
      console.log('‚úÖ Todas las colaboraciones han sido limpiadas');
    } catch (error) {
      console.error('‚ùå Error limpiando colaboraciones:', error);
    }
  }, []);

  // Funciones simplificadas para manejar colaboraciones
  const addCollaborationRequest = useCallback(async (request) => {
    const newRequest = {
      ...request,
      // Usar el ID que viene en la request, no generar uno nuevo
      timestamp: new Date().toISOString(),
      status: request.status || 'pending'
    };

    console.log('üÜï NUEVA solicitud creada:', {
      id: newRequest.id,
      status: newRequest.status,
      influencerEmail: newRequest.influencerEmail,
      business: newRequest.businessName || newRequest.business
    });

    setPendingAdminRequests(prev => [...prev, newRequest]);
    // IMPORTANTE: Agregar tambi√©n a influencerCollaborations para que aparezca inmediatamente en el historial del influencer
    setInfluencerCollaborations(prev => {
      const updated = [...prev, newRequest];
      console.log('üìù Total colaboraciones despu√©s de agregar:', updated.length);
      // Guardar en AsyncStorage
      saveInfluencerCollaborationsToStorage(updated);
      return updated;
    });
    return newRequest;
  }, []);

  const approveCollaborationRequest = useCallback(async (requestId, approvalData = {}) => {
    try {
      console.log('üü¢ APROBANDO colaboraci√≥n:', requestId);
      const request = pendingAdminRequests.find(req => req.id === requestId);
      if (!request) {
        console.log('‚ùå No se encontr√≥ la solicitud con ID:', requestId);
  // Return corregido:         return false;
      }

      const approvedCollaboration = {
        ...request,
        status: 'approved',
        approvedAt: new Date().toISOString(),
        approvedBy: 'admin',
        ...approvalData
      };

      console.log('‚úÖ Colaboraci√≥n aprobada:', approvedCollaboration);

      // Actualizar estados de manera segura
      setPendingAdminRequests(prev => {
        try {
  // Return corregido:           return prev.filter(req => req.id !== requestId);
        } catch (error) {
          console.error('Error filtrando pendingAdminRequests:', error);
  // Return corregido:           return prev;
        }
      });

      setApprovedCollaborations(prev => {
        try {
  // Return corregido:           return [...prev, approvedCollaboration];
        } catch (error) {
          console.error('Error agregando a approvedCollaborations:', error);
  // Return corregido:           return prev;
        }
      });

      // Actualizar el estado en influencerCollaborations (reemplazar la solicitud pendiente con la aprobada)
      setInfluencerCollaborations(prev => {
        try {
          const updated = prev.map(collab =>
            collab.id === requestId ? approvedCollaboration : collab
          );
          console.log('üìù Colaboraciones actualizadas despu√©s de aprobaci√≥n:', updated.length);
          // Guardar en AsyncStorage de manera as√≠ncrona
          setTimeout(() => {
            saveInfluencerCollaborationsToStorage(updated).catch(error => {
              console.error('Error guardando en AsyncStorage:', error);
            });
          }, 0);
  // Return corregido:           return updated;
        } catch (error) {
          console.error('Error actualizando influencerCollaborations:', error);
  // Return corregido:           return prev;
        }
      });

  // Return corregido:       return true;
    } catch (error) {
      console.error('‚ùå Error cr√≠tico en approveCollaborationRequest:', error);
  // Return corregido:       return false;
    }
  }, [pendingAdminRequests]);

  const rejectCollaborationRequest = useCallback(async (requestId, rejectionReason = '') => {
    try {
      console.log('üî¥ RECHAZANDO colaboraci√≥n:', requestId);
      const request = pendingAdminRequests.find(req => req.id === requestId);
      if (!request) {
        console.log('‚ùå No se encontr√≥ la solicitud con ID:', requestId);
        return false;
      }

      const rejectedRequest = {
        ...request,
        status: 'rejected',
        rejectedAt: new Date().toISOString(),
        rejectedBy: 'admin',
        rejectionReason
      };

      console.log('‚ùå Colaboraci√≥n rechazada:', rejectedRequest);

      // Actualizar estados de manera segura
      setPendingAdminRequests(prev => {
        try {
          return prev.filter(req => req.id !== requestId);
        } catch (error) {
          console.error('Error filtrando pendingAdminRequests:', error);
          return prev;
        }
      });

      setRejectedRequests(prev => {
        try {
          return [...prev, rejectedRequest];
        } catch (error) {
          console.error('Error agregando a rejectedRequests:', error);
          return prev;
        }
      });

      // Actualizar el estado en influencerCollaborations (reemplazar la solicitud pendiente con la rechazada)
      setInfluencerCollaborations(prev => {
        try {
          const updated = prev.map(collab =>
            collab.id === requestId ? rejectedRequest : collab
          );
          console.log('üìù Colaboraciones actualizadas despu√©s de rechazo:', updated.length);
          // Guardar en AsyncStorage de manera as√≠ncrona
          setTimeout(() => {
            saveInfluencerCollaborationsToStorage(updated).catch(error => {
              console.error('Error guardando en AsyncStorage:', error);
            });
          }, 0);
          return updated;
        } catch (error) {
          console.error('Error actualizando influencerCollaborations:', error);
          return prev;
        }
      });

      return true;
    } catch (error) {
      console.error('‚ùå Error cr√≠tico en rejectCollaborationRequest:', error);
      return false;
    }
  }, [pendingAdminRequests]);

  const approveInfluencer = useCallback(async (influencerId) => {
    const influencer = pendingInfluencers.find(inf => inf.id === influencerId);
    if (!influencer) return false;

    try {
      // ‚úÖ CREAR DATOS COMPLETOS DEL INFLUENCER APROBADO
      const approvedInfluencerData = {
        id: influencer.email, // Usar email como ID √∫nico
        email: influencer.email,
        name: influencer.name,
        followers: influencer.followers, // ‚úÖ PRESERVAR N√öMERO EXACTO
        city: influencer.city,
        instagram: influencer.instagram,
        tiktok: influencer.tiktok,
        phone: influencer.phone,
        approvedDate: new Date().toISOString().split('T')[0],
        registrationDate: influencer.registrationDate,
        registrationTime: influencer.registrationTime,
        // ‚úÖ CONSERVAR CAPTURAS DE PANTALLA
        instagramScreenshots: influencer.instagramScreenshots || [],
        tiktokScreenshots: influencer.tiktokScreenshots || [],
        // ‚úÖ CONSERVAR CONTRASE√ëA PARA LOGIN
        password: influencer.password
      };

      // Agregar a la lista de influencers aprobados
      const currentApproved = [...approvedInfluencersData, approvedInfluencerData];
      setApprovedInfluencersData(currentApproved);
      
      // ‚úÖ GUARDAR EN STORAGE PERMANENTEMENTE
      await saveApprovedInfluencersToStorage(currentApproved);

      // Eliminar de pendientes
      const updatedInfluencers = pendingInfluencers.filter(inf => inf.id !== influencerId);
      setPendingInfluencers(updatedInfluencers);
      await savePendingInfluencersToStorage(updatedInfluencers);

      console.log('‚úÖ Influencer aprobado y guardado permanentemente:', {
        name: approvedInfluencerData.name,
        email: approvedInfluencerData.email,
        followers: approvedInfluencerData.followers,
        capturas: {
          instagram: approvedInfluencerData.instagramScreenshots.length,
          tiktok: approvedInfluencerData.tiktokScreenshots.length
        }
      });

      return true;
    } catch (error) {
      console.error('‚ùå Error aprobando influencer:', error);
      return false;
    }
  }, [pendingInfluencers, approvedInfluencersData, savePendingInfluencersToStorage, saveApprovedInfluencersToStorage]);

  const rejectInfluencer = useCallback(async (influencerId, rejectionReason = '') => {
    try {
      console.log('üîÑ Ejecutando rejectInfluencer para ID:', influencerId);
      
      const influencer = pendingInfluencers.find(inf => inf.id === influencerId);
      if (!influencer) {
        console.error('‚ùå Influencer no encontrado en rejectInfluencer:', influencerId);
        return false;
      }

      console.log('‚úÖ Influencer encontrado, procediendo con eliminaci√≥n:', influencer.name);

      // Filtrar el influencer de la lista
      const updatedInfluencers = pendingInfluencers.filter(inf => inf.id !== influencerId);
      
      console.log('üìä Lista actualizada:', {
        antes: pendingInfluencers.length,
        despu√©s: updatedInfluencers.length,
        eliminado: influencer.name
      });

      // Actualizar estado de forma segura
      setPendingInfluencers(updatedInfluencers);

      // Guardar cambios permanentemente con manejo de errores
      try {
        await savePendingInfluencersToStorage(updatedInfluencers);
        console.log('‚úÖ Datos guardados en storage correctamente');
      } catch (storageError) {
        console.error('‚ö†Ô∏è Error guardando en storage:', storageError);
        // No fallar por error de storage, continuar
      }

      console.log('‚úÖ rejectInfluencer completado exitosamente');
      return true;

    } catch (error) {
      console.error('‚ùå Error cr√≠tico en rejectInfluencer:', error);
      
      // Intentar recuperaci√≥n
      try {
        console.log('üîÑ Intentando recuperaci√≥n...');
        const currentInfluencers = [...pendingInfluencers];
        setPendingInfluencers(currentInfluencers);
      } catch (recoveryError) {
        console.error('‚ùå Error en recuperaci√≥n:', recoveryError);
      }
      
      return false;
    }
  }, [pendingInfluencers, savePendingInfluencersToStorage]);

  // ‚úÖ FUNCI√ìN PARA LIMPIAR Y RESETEAR INFLUENCERS APROBADOS
  const cleanApprovedInfluencers = useCallback(async () => {
    try {
      console.log('üßπ Limpiando lista de influencers aprobados...');
      
      // Obtener usuarios con contrase√±as (que tienen acceso real)
      const existingPasswords = await AsyncStorage.getItem('userPasswords');
      const passwords = existingPasswords ? JSON.parse(existingPasswords) : {};
      
      // Lista de influencers reales que deben aparecer
      const realInfluencers = [
        'nayades@gmail.com',
        'ana@gmail.com', 
        'influencer@zyro.com'
      ];
      
      // Filtrar solo influencers reales que tienen contrase√±a
      const validInfluencerEmails = realInfluencers.filter(email => passwords[email]);
      
      console.log('‚úÖ Influencers reales con acceso:', validInfluencerEmails);
      
      // Crear lista limpia solo con influencers reales
      const cleanApprovedList = [
        {
          id: 'nayades@gmail.com',
          email: 'nayades@gmail.com',
          name: 'Nayades Influencer',
          followers: '35000',
          city: 'Valencia',
          instagram: '@nayades_lifestyle',
          tiktok: '@nayades_oficial',
          phone: '+34 687 123 456',
          approvedDate: '2025-01-15',
          registrationDate: '2025-01-10',
          registrationTime: '10:30',
          instagramScreenshots: [
            { uri: 'https://via.placeholder.com/300x400/E4405F/FFFFFF?text=Nayades+IG+Profile' },
            { uri: 'https://via.placeholder.com/300x400/E4405F/FFFFFF?text=Nayades+35K+Stats' }
          ],
          tiktokScreenshots: [
            { uri: 'https://via.placeholder.com/300x400/000000/FFFFFF?text=Nayades+TikTok' }
          ]
        },
        {
          id: 'ana@gmail.com',
          email: 'ana@gmail.com',
          name: 'Ana Garc√≠a L√≥pez',
          followers: '25000',
          city: 'Madrid',
          instagram: '@ana_garcia_lifestyle',
          tiktok: '@ana_garcia_tiktok',
          phone: '+34 612 345 678',
          approvedDate: '2025-01-20',
          registrationDate: '2025-01-15',
          registrationTime: '14:20',
          instagramScreenshots: [
            { uri: 'https://via.placeholder.com/300x400/E4405F/FFFFFF?text=Ana+IG+Profile' },
            { uri: 'https://via.placeholder.com/300x400/E4405F/FFFFFF?text=Ana+25K+Stats' }
          ],
          tiktokScreenshots: [
            { uri: 'https://via.placeholder.com/300x400/000000/FFFFFF?text=Ana+TikTok' }
          ]
        },
        {
          id: 'influencer@zyro.com',
          email: 'influencer@zyro.com',
          name: 'Influencer Zyro',
          followers: '50000',
          city: 'Barcelona',
          instagram: '@influencer_zyro',
          tiktok: '@influencer_zyro',
          phone: '+34 600 000 000',
          approvedDate: '2025-02-01',
          registrationDate: '2025-01-25',
          registrationTime: '16:00',
          instagramScreenshots: [
            { uri: 'https://via.placeholder.com/300x400/E4405F/FFFFFF?text=Zyro+IG+Profile' },
            { uri: 'https://via.placeholder.com/300x400/E4405F/FFFFFF?text=Zyro+50K+Stats' }
          ],
          tiktokScreenshots: [
            { uri: 'https://via.placeholder.com/300x400/000000/FFFFFF?text=Zyro+TikTok' }
          ]
        }
      ].filter(inf => validInfluencerEmails.includes(inf.email)); // Solo incluir los que tienen contrase√±a
      
      // Actualizar estados
      setApprovedInfluencersData(cleanApprovedList);
      setApprovedInfluencers(cleanApprovedList.map(inf => inf.email));
      
      // Guardar lista limpia
      await saveApprovedInfluencersToStorage(cleanApprovedList);
      
      console.log('‚úÖ Lista de influencers aprobados limpiada:', {
        total: cleanApprovedList.length,
        influencers: cleanApprovedList.map(inf => ({ name: inf.name, email: inf.email }))
      });
      
      return cleanApprovedList;
      
    } catch (error) {
      console.error('‚ùå Error limpiando influencers aprobados:', error);
      return [];
    }
  }, [saveApprovedInfluencersToStorage]);

  // ‚úÖ FUNCI√ìN PARA ELIMINAR INFLUENCERS APROBADOS Y QUITARLES EL ACCESO
  const removeApprovedInfluencer = useCallback(async (influencerEmail) => {
    try {
      console.log('üóëÔ∏è Eliminando influencer aprobado:', influencerEmail);
      
      const influencer = approvedInfluencersData.find(inf => inf.email === influencerEmail);
      if (!influencer) {
        console.error('‚ùå Influencer aprobado no encontrado:', influencerEmail);
        return false;
      }

      console.log('‚úÖ Influencer encontrado, procediendo con eliminaci√≥n completa:', influencer.name);

      // 1. Eliminar de la lista de influencers aprobados
      const updatedApprovedInfluencers = approvedInfluencersData.filter(inf => inf.email !== influencerEmail);
      
      console.log('üìä Lista de aprobados actualizada:', {
        antes: approvedInfluencersData.length,
        despu√©s: updatedApprovedInfluencers.length,
        eliminado: influencer.name
      });

      // 2. Actualizar estados
      setApprovedInfluencersData(updatedApprovedInfluencers);
      setApprovedInfluencers(updatedApprovedInfluencers.map(inf => inf.email));

      // 3. Guardar cambios en storage
      await saveApprovedInfluencersToStorage(updatedApprovedInfluencers);

      // 4. Eliminar contrase√±a del sistema (quitar acceso de login)
      try {
        const currentPasswords = { ...userPasswords };
        delete currentPasswords[influencerEmail];
        setUserPasswords(currentPasswords);
        await savePasswordsToStorage(currentPasswords);
        console.log('üîê Contrase√±a eliminada del sistema:', influencerEmail);
      } catch (passwordError) {
        console.error('‚ö†Ô∏è Error eliminando contrase√±a:', passwordError);
        // No fallar por error de contrase√±a, continuar
      }

      // 5. Eliminar datos personales si existen
      try {
        await AsyncStorage.removeItem(`personalData_${influencerEmail}`);
        await AsyncStorage.removeItem(`profilePhoto_${influencerEmail}`);
        console.log('üóëÔ∏è Datos personales eliminados:', influencerEmail);
      } catch (dataError) {
        console.error('‚ö†Ô∏è Error eliminando datos personales:', dataError);
        // No fallar por error de datos, continuar
      }

      console.log('‚úÖ Influencer eliminado completamente del sistema');
      return true;

    } catch (error) {
      console.error('‚ùå Error cr√≠tico eliminando influencer aprobado:', error);
      
      // Intentar recuperaci√≥n
      try {
        console.log('üîÑ Intentando recuperaci√≥n...');
        const currentApproved = [...approvedInfluencersData];
        setApprovedInfluencersData(currentApproved);
      } catch (recoveryError) {
        console.error('‚ùå Error en recuperaci√≥n:', recoveryError);
      }
      
      return false;
    }
  }, [approvedInfluencersData, saveApprovedInfluencersToStorage, userPasswords, savePasswordsToStorage]);

  // ‚úÖ FUNCI√ìN PARA CREAR DATOS DE PRUEBA DE INFLUENCERS
  const createTestInfluencerData = useCallback(async () => {
    try {
      // Solo crear datos si no hay influencers pendientes
      if (pendingInfluencers.length > 0) {
        console.log('‚úÖ Ya hay datos de influencers pendientes');
        return;
      }

      const testPendingInfluencers = [
        {
          id: Date.now(),
          email: 'maria.lifestyle@gmail.com',
          name: 'Mar√≠a Gonz√°lez Lifestyle',
          phone: '+34 600 123 456',
          birthDate: '1995-03-15',
          city: 'Madrid',
          instagram: '@maria_lifestyle_madrid',
          tiktok: '@maria_lifestyle',
          followers: '25000',
          password: 'maria123',
          registrationDate: '2025-09-15',
          registrationTime: '14:30',
          status: 'pending',
          instagramScreenshots: [
            { uri: 'https://via.placeholder.com/300x400/E4405F/FFFFFF?text=Instagram+Profile+Maria' },
            { uri: 'https://via.placeholder.com/300x400/E4405F/FFFFFF?text=Instagram+Stats+25K' },
            { uri: 'https://via.placeholder.com/300x400/E4405F/FFFFFF?text=Instagram+Posts' }
          ],
          tiktokScreenshots: [
            { uri: 'https://via.placeholder.com/300x400/000000/FFFFFF?text=TikTok+Profile+Maria' },
            { uri: 'https://via.placeholder.com/300x400/000000/FFFFFF?text=TikTok+Videos' }
          ]
        },
        {
          id: Date.now() + 1,
          email: 'carlos.fitness.pro@gmail.com',
          name: 'Carlos Fitness Pro',
          phone: '+34 600 987 654',
          birthDate: '1992-07-22',
          city: 'Barcelona',
          instagram: '@carlos_fitness_bcn',
          tiktok: '@carlos_gym_pro',
          followers: '45000',
          password: 'carlos123',
          registrationDate: '2025-09-15',
          registrationTime: '16:45',
          status: 'pending',
          instagramScreenshots: [
            { uri: 'https://via.placeholder.com/300x400/96CEB4/FFFFFF?text=Fitness+Profile+Carlos' },
            { uri: 'https://via.placeholder.com/300x400/FFEAA7/000000?text=Gym+Stats+45K' },
            { uri: 'https://via.placeholder.com/300x400/DDA0DD/FFFFFF?text=Workout+Posts' },
            { uri: 'https://via.placeholder.com/300x400/74B9FF/FFFFFF?text=Training+Videos' }
          ],
          tiktokScreenshots: [
            { uri: 'https://via.placeholder.com/300x400/000000/FFFFFF?text=TikTok+Fitness+Carlos' },
            { uri: 'https://via.placeholder.com/300x400/000000/FFFFFF?text=Gym+TikToks' },
            { uri: 'https://via.placeholder.com/300x400/000000/FFFFFF?text=Workout+Tips' }
          ]
        },
        {
          id: Date.now() + 2,
          email: 'ana.travel.world@gmail.com',
          name: 'Ana Viajera Mundial',
          phone: '+34 600 555 777',
          birthDate: '1998-11-08',
          city: 'Valencia',
          instagram: '@ana_travels_world',
          tiktok: '@ana_adventures',
          followers: '18500',
          password: 'ana123',
          registrationDate: '2025-09-15',
          registrationTime: '18:20',
          status: 'pending',
          instagramScreenshots: [
            { uri: 'https://via.placeholder.com/300x400/FF6B6B/FFFFFF?text=Travel+Profile+Ana' },
            { uri: 'https://via.placeholder.com/300x400/4ECDC4/FFFFFF?text=Travel+Stats+18K' }
          ],
          tiktokScreenshots: [
            { uri: 'https://via.placeholder.com/300x400/000000/FFFFFF?text=Travel+TikToks+Ana' }
          ]
        },
        {
          id: Date.now() + 3,
          email: 'lucia.beauty.expert@gmail.com',
          name: 'Luc√≠a Beauty Expert',
          phone: '+34 600 444 888',
          birthDate: '1996-05-12',
          city: 'Sevilla',
          instagram: '@lucia_beauty_expert',
          tiktok: '@lucia_makeup',
          followers: '32000',
          password: 'lucia123',
          registrationDate: '2025-09-15',
          registrationTime: '20:15',
          status: 'pending',
          instagramScreenshots: [
            { uri: 'https://via.placeholder.com/300x400/FFB6C1/000000?text=Beauty+Profile+Lucia' },
            { uri: 'https://via.placeholder.com/300x400/DDA0DD/FFFFFF?text=Makeup+Stats+32K' },
            { uri: 'https://via.placeholder.com/300x400/F0E68C/000000?text=Beauty+Posts' }
          ],
          tiktokScreenshots: [
            { uri: 'https://via.placeholder.com/300x400/000000/FFFFFF?text=Makeup+TikToks' },
            { uri: 'https://via.placeholder.com/300x400/000000/FFFFFF?text=Beauty+Tips' }
          ]
        },
        {
          id: Date.now() + 4,
          email: 'diego.food.lover@gmail.com',
          name: 'Diego Food Lover',
          phone: '+34 600 333 999',
          birthDate: '1994-09-30',
          city: 'Bilbao',
          instagram: '@diego_food_lover',
          tiktok: '@diego_eats',
          followers: '12000',
          password: 'diego123',
          registrationDate: '2025-09-15',
          registrationTime: '21:45',
          status: 'pending',
          instagramScreenshots: [], // Sin capturas para probar caso sin im√°genes
          tiktokScreenshots: [] // Sin capturas para probar caso sin im√°genes
        }
      ];

      // Guardar influencers pendientes
      setPendingInfluencers(testPendingInfluencers);
      await savePendingInfluencersToStorage(testPendingInfluencers);

      // Agregar contrase√±as al sistema
      await updateUserPassword('maria.lifestyle@gmail.com', 'maria123');
      await updateUserPassword('carlos.fitness.pro@gmail.com', 'carlos123');
      await updateUserPassword('ana.travel.world@gmail.com', 'ana123');
      await updateUserPassword('lucia.beauty.expert@gmail.com', 'lucia123');
      await updateUserPassword('diego.food.lover@gmail.com', 'diego123');

      console.log('‚úÖ Datos de prueba de influencers creados:', {
        pendientes: testPendingInfluencers.length,
        influencers: testPendingInfluencers.map(inf => ({ 
          name: inf.name, 
          followers: inf.followers,
          followersFormatted: formatFollowersCount(inf.followers),
          followersType: typeof inf.followers,
          capturas: {
            instagram: inf.instagramScreenshots.length,
            tiktok: inf.tiktokScreenshots.length
          }
        }))
      });

    } catch (error) {
      console.error('‚ùå Error creando datos de prueba:', error);
    }
  }, [pendingInfluencers.length, savePendingInfluencersToStorage, updateUserPassword]);

  const getCollaborationStats = useCallback(() => ({
    totalCollaborations: influencerCollaborations.length,
    pendingRequests: pendingAdminRequests.length,
    pendingInfluencers: pendingInfluencers.length,
    approvedCollaborations: approvedCollaborations.length,
    rejectedRequests: rejectedRequests.length,
    historyItems: collaborationHistory.length
  }), [influencerCollaborations.length, pendingAdminRequests.length, pendingInfluencers.length, approvedCollaborations.length, rejectedRequests.length, collaborationHistory.length]);

  const syncCollaborations = useCallback(async () => {
    console.log('üîÑ Sincronizaci√≥n simplificada completada');
    return { successful: 1, failed: 0, total: 1 };
  }, []);



  const [showCategoryDropdown, setShowCategoryDropdown] = useState(false);
  const [showCollaborationDetail, setShowCollaborationDetail] = useState(false);
  const [selectedCollaboration, setSelectedCollaboration] = useState(null);
  const [showRegistrationForm, setShowRegistrationForm] = useState(false);
  const [registrationStep, setRegistrationStep] = useState(1);
  const [registrationData, setRegistrationData] = useState({});
  const [showProfilePhoto, setShowProfilePhoto] = useState(false);
  const [profilePhotoUri, setProfilePhotoUri] = useState(null);
  const [companyProfilePhotoUri, setCompanyProfilePhotoUri] = useState(null);
  const [showCompanyProfilePhoto, setShowCompanyProfilePhoto] = useState(false);
  const [showPersonalData, setShowPersonalData] = useState(false);
  const [personalData, setPersonalData] = useState({
    fullName: 'Ana Garc√≠a L√≥pez',
    email: 'ana.garcia@email.com',
    phone: '+34 612 345 678',
    city: 'Madrid',
    instagram: '@ana_garcia_lifestyle',
    tiktok: '@ana_garcia_tiktok',
    instagramFollowers: '25000'
  });

  // Funciones para persistir datos personales
  const savePersonalDataToStorage = useCallback(async (data) => {
    try {
      // Usar el email de los datos como clave (puede ser diferente al currentUser.email si se est√° cambiando)
      const key = `personalData_${data.email}`;
      await AsyncStorage.setItem(key, JSON.stringify(data));

      // Si el email cambi√≥, eliminar los datos del email anterior
      if (currentUser?.email && currentUser.email !== data.email) {
        const oldKey = `personalData_${currentUser.email}`;
        await AsyncStorage.removeItem(oldKey);
        console.log('üóëÔ∏è Datos del email anterior eliminados:', oldKey);
      }

      console.log('‚úÖ Datos personales guardados:', {
        key,
        user: data.email,
        data: {
          fullName: data.fullName,
          email: data.email,
          phone: data.phone,
          city: data.city
        }
      });
    } catch (error) {
      console.error('‚ùå Error guardando datos personales:', error);
    }
  }, [currentUser?.email]);

  // Funciones para persistir foto de perfil
  const saveProfilePhotoToStorage = useCallback(async (photoUri) => {
    try {
      const key = `profilePhoto_${currentUser?.email}`;
      await AsyncStorage.setItem(key, photoUri);
      console.log('‚úÖ Foto de perfil guardada:', {
        key,
        user: currentUser?.email,
        hasPhoto: !!photoUri
      });
    } catch (error) {
      console.error('‚ùå Error guardando foto de perfil:', error);
    }
  }, [currentUser?.email]);

  // Funci√≥n para migrar foto de perfil cuando cambia el email
  const migrateProfilePhoto = useCallback(async (oldEmail, newEmail) => {
    try {
      const oldKey = `profilePhoto_${oldEmail}`;
      const newKey = `profilePhoto_${newEmail}`;

      const photoUri = await AsyncStorage.getItem(oldKey);
      if (photoUri) {
        await AsyncStorage.setItem(newKey, photoUri);
        await AsyncStorage.removeItem(oldKey);
        console.log('‚úÖ Foto de perfil migrada:', { oldEmail, newEmail });
      }
    } catch (error) {
      console.error('‚ùå Error migrando foto de perfil:', error);
    }
  }, []);

  // Funciones para persistir foto de perfil de empresa
  const saveCompanyProfilePhotoToStorage = useCallback(async (photoUri) => {
    try {
      const key = `companyProfilePhoto_${currentUser?.email}`;
      await AsyncStorage.setItem(key, photoUri);
      console.log('‚úÖ Foto de perfil de empresa guardada:', {
        key,
        company: currentUser?.email,
        hasPhoto: !!photoUri
      });
    } catch (error) {
      console.error('‚ùå Error guardando foto de perfil de empresa:', error);
    }
  }, [currentUser?.email]);

  const loadCompanyProfilePhotoFromStorage = useCallback(async () => {
    try {
      if (!currentUser?.email) return;

      const key = `companyProfilePhoto_${currentUser.email}`;
      const savedPhoto = await AsyncStorage.getItem(key);

      if (savedPhoto) {
        setCompanyProfilePhotoUri(savedPhoto);
        console.log('‚úÖ Foto de perfil de empresa cargada desde storage:', key);
      } else {
        setCompanyProfilePhotoUri(null);
        console.log('‚úÖ No hay foto de perfil de empresa guardada para:', currentUser.email);
      }
    } catch (error) {
      console.error('‚ùå Error cargando foto de perfil de empresa:', error);
      setCompanyProfilePhotoUri(null);
    }
  }, [currentUser?.email]);

  const loadProfilePhotoFromStorage = useCallback(async () => {
    try {
      if (!currentUser?.email) return;

      const key = `profilePhoto_${currentUser.email}`;
      const savedPhoto = await AsyncStorage.getItem(key);

      if (savedPhoto) {
        setProfilePhotoUri(savedPhoto);
        console.log('‚úÖ Foto de perfil cargada desde storage:', key);
      } else {
        setProfilePhotoUri(null);
        console.log('‚úÖ No hay foto de perfil guardada para:', currentUser.email);
      }
    } catch (error) {
      console.error('‚ùå Error cargando foto de perfil:', error);
      setProfilePhotoUri(null);
    }
  }, [currentUser?.email]);

  const loadPersonalDataFromStorage = useCallback(async () => {
    try {
      if (!currentUser?.email) return;

      const key = `personalData_${currentUser.email}`;
      const savedData = await AsyncStorage.getItem(key);

      if (savedData) {
        const parsedData = JSON.parse(savedData);
        setPersonalData(parsedData);
        console.log('‚úÖ Datos personales cargados desde storage:', key);
      } else {
        // Si no hay datos guardados, usar datos por defecto
        const defaultData = getDefaultPersonalData(currentUser.email);
        setPersonalData(defaultData);
        console.log('‚úÖ Datos personales por defecto cargados para:', currentUser.email);
      }
    } catch (error) {
      console.error('‚ùå Error cargando datos personales:', error);
      // En caso de error, usar datos por defecto
      const defaultData = getDefaultPersonalData(currentUser.email);
      setPersonalData(defaultData);
    }
  }, [currentUser?.email, getDefaultPersonalData]);

  // Obtener datos por defecto seg√∫n el usuario
  const getDefaultPersonalData = useCallback((userEmail) => {
    const defaultData = {
      'nayades@gmail.com': {
        fullName: 'Nayades Influencer',
        email: 'nayades@gmail.com',
        phone: '+34 687 123 456',
        city: 'Valencia',
        instagram: '@nayades_lifestyle',
        tiktok: '@nayades_oficial',
        instagramFollowers: '35000'
      },
      'ana@gmail.com': {
        fullName: 'Ana Garc√≠a L√≥pez',
        email: 'ana@gmail.com',
        phone: '+34 612 345 678',
        city: 'Madrid',
        instagram: '@ana_garcia_lifestyle',
        tiktok: '@ana_garcia_tiktok',
        instagramFollowers: '25000'
      },
      'influencer@zyro.com': {
        fullName: 'Influencer Zyro',
        email: 'influencer@zyro.com',
        phone: '+34 600 000 000',
        city: 'Barcelona',
        instagram: '@influencer_zyro',
        tiktok: '@influencer_zyro',
        instagramFollowers: '50000'
      }
    };

    return defaultData[userEmail] || {
      fullName: 'Usuario Influencer',
      email: userEmail,
      phone: '+34 600 000 000',
      city: 'Madrid',
      instagram: '@usuario',
      tiktok: '@usuario',
      instagramFollowers: '1000'
    };
  }, []);

  // Cargar datos personales y foto de perfil cuando el usuario inicia sesi√≥n
  React.useEffect(() => {
    if (currentUser?.email && currentScreen === 'main') {
      if (currentUser.type === 'company') {
        loadCompanyProfilePhotoFromStorage();
      } else {
        loadPersonalDataFromStorage();
        loadProfilePhotoFromStorage();
      }
    }
  }, [currentUser?.email, currentScreen, currentUser?.type, loadPersonalDataFromStorage, loadProfilePhotoFromStorage, loadCompanyProfilePhotoFromStorage]);

  // Funci√≥n para cambiar email de login
  const updateUserEmail = useCallback(async (oldEmail, newEmail) => {
    if (oldEmail === newEmail) return; // No hay cambio

    // Obtener la contrase√±a del email anterior
    const password = userPasswords[oldEmail];

    if (password) {
      // Crear nuevo registro con el nuevo email usando funci√≥n centralizada
      await updateUserPassword(newEmail, password);

      // Eliminar el email anterior
      const updatedPasswords = { ...userPasswords };
      delete updatedPasswords[oldEmail];
      setUserPasswords(updatedPasswords);
      await savePasswordsToStorage(updatedPasswords);

      // Migrar foto de perfil al nuevo email
      await migrateProfilePhoto(oldEmail, newEmail);

      // Actualizar el usuario actual con el nuevo email
      setCurrentUser(prev => ({
        ...prev,
        email: newEmail
      }));

      console.log('‚úÖ Email de login actualizado:', {
        oldEmail,
        newEmail,
        password: '***'
      });
    }
  }, [userPasswords, migrateProfilePhoto]);

  // Funci√≥n centralizada de logout
  const handleLogout = useCallback(async () => {
    try {
      // Limpiar AsyncStorage
      await AsyncStorage.removeItem('currentUser');
      console.log('‚úÖ Sesi√≥n cerrada y datos limpiados');
    } catch (error) {
      console.error('‚ùå Error al limpiar datos de sesi√≥n:', error);
    }

    setCurrentUser(null);
    setUserType(null);
    setCurrentScreen('welcome');
    setActiveTab(0);
    setProfilePhotoUri(null); // Limpiar foto de perfil al cerrar sesi√≥n
    // Los datos personales y foto se mantienen en AsyncStorage para el pr√≥ximo login
    console.log('üö™ Usuario desconectado');
    console.log('üíæ Datos persistentes mantenidos: colaboraciones, datos personales, foto de perfil');
  }, []);

  // Funciones optimizadas para evitar re-renderizados
  const updateFullName = useCallback((text) => {
    setPersonalData(prev => {
      if (!prev || prev.fullName === text) return prev || {};
      return { ...prev, fullName: text };
    });
  }, []);

  const updateEmail = useCallback((text) => {
    setPersonalData(prev => {
      if (!prev || prev.email === text) return prev || {};
      return { ...prev, email: text };
    });
  }, []);

  const updatePhone = useCallback((text) => {
    setPersonalData(prev => {
      if (!prev || prev.phone === text) return prev || {};
      return { ...prev, phone: text };
    });
  }, []);

  const updateCity = useCallback((text) => {
    setPersonalData(prev => {
      if (!prev || prev.city === text) return prev || {};
      return { ...prev, city: text };
    });
  }, []);

  const updateInstagram = useCallback((text) => {
    setPersonalData(prev => {
      if (!prev || prev.instagram === text) return prev || {};
      return { ...prev, instagram: text };
    });
  }, []);

  const updateTiktok = useCallback((text) => {
    setPersonalData(prev => {
      if (!prev || prev.tiktok === text) return prev || {};
      return { ...prev, tiktok: text };
    });
  }, []);

  const updateInstagramFollowers = useCallback((text) => {
    setPersonalData(prev => {
      if (!prev || prev.instagramFollowers === text) return prev || {};
      return { ...prev, instagramFollowers: text };
    });
  }, []);

  const [showPrivacyPolicy, setShowPrivacyPolicy] = useState(false);
  const [showTermsOfUse, setShowTermsOfUse] = useState(false);
  const [showHelpSupport, setShowHelpSupport] = useState(false);
  const [showPasswordSecurity, setShowPasswordSecurity] = useState(false);
  const [showCompanyPasswordSecurity, setShowCompanyPasswordSecurity] = useState(false);


  const [selectedTime, setSelectedTime] = useState(null);
  const [selectedDate, setSelectedDate] = useState(null);
  const [termsAccepted, setTermsAccepted] = useState(false);
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState(null);
  const [paymentData, setPaymentData] = useState({});
  const [isProcessingPayment, setIsProcessingPayment] = useState(false);
  const [showPaymentScreen, setShowPaymentScreen] = useState(false);
  const [showPasswordSetup, setShowPasswordSetup] = useState(false);
  const [companyPassword, setCompanyPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showCompanyRequests, setShowCompanyRequests] = useState(false);
  const [showCompanyPersonalData, setShowCompanyPersonalData] = useState(false);
  const [requestsFilter, setRequestsFilter] = useState('all'); // 'all', 'pending', 'approved', 'rejected'
  const [realCompanyRequests, setRealCompanyRequests] = useState([]); // Solicitudes reales de influencers
  const [showSubscriptionManagement, setShowSubscriptionManagement] = useState(false);
  const [showPaymentMethodChange, setShowPaymentMethodChange] = useState(false);
  const [newPaymentMethod, setNewPaymentMethod] = useState(null);
  const [paymentMethodData, setPaymentMethodData] = useState({
    cardNumber: '',
    expiryDate: '',
    cvv: '',
    cardholderName: '',
    applePayEmail: '',
    googlePayEmail: '',
    paypalEmail: '',
    bankAccount: '',
    bankName: ''
  });
  // ‚úÖ pendingAdminRequests ahora viene del hook de persistencia
  const [notifications, setNotifications] = useState([]); // Sistema de notificaciones

  // Estado para gestionar colaboraciones (editable por el administrador)
  const [collaborations, setCollaborations] = useState([
    {
      id: 1,
      title: 'Degustaci√≥n Premium',
      business: 'Restaurante Elegance',
      category: 'Restaurantes',
      city: 'Madrid',
      followers: 10000,
      companions: 2,
      description: 'Experiencia gastron√≥mica √∫nica en el coraz√≥n de Madrid con nuestra nueva carta de temporada',
      location: { latitude: 40.4168, longitude: -3.7038 },
      address: 'Gran V√≠a 28, Madrid',
      phone: '+34 91 123 4567',
      instagramHandle: '@restaurante_elegance',
      images: [
        'https://via.placeholder.com/400x300/C9A961/000000?text=Restaurante+1',
        'https://via.placeholder.com/400x300/C9A961/000000?text=Restaurante+2',
        'https://via.placeholder.com/400x300/C9A961/000000?text=Restaurante+3'
      ],
      includes: ['Cena completa para 2 personas', 'Bebidas incluidas', 'Postre especial'],
      requirements: ['2 historias de Instagram', '1 post en feed', 'Mencionar @restauranteelegance'],
      adminInfo: 'Colaboraci√≥n gestionada por el equipo de ZYRO. Contacto: admin@zyro.com',
      timeSlots: ['12:00', '13:00', '14:00', '15:00', '19:00', '20:00', '21:00', '22:00'],
      availableDates: ['2024-12-20', '2024-12-21', '2024-12-22', '2024-12-23', '2024-12-27', '2024-12-28', '2024-12-29', '2024-12-30']
    },
    {
      id: 2,
      title: 'Cena Rom√°ntica',
      business: 'Restaurante Elegance',
      category: 'Restaurantes',
      city: 'Madrid',
      followers: 5000,
      companions: 2,
      description: 'Cena rom√°ntica perfecta para parejas en ambiente √≠ntimo y elegante',
      location: { latitude: 40.4168, longitude: -3.7038 },
      address: 'Gran V√≠a 28, Madrid',
      phone: '+34 91 123 4567',
      instagramHandle: '@restaurante_elegance',
      images: [
        'https://via.placeholder.com/400x300/C9A961/000000?text=Cena+Romantica+1',
        'https://via.placeholder.com/400x300/C9A961/000000?text=Cena+Romantica+2'
      ],
      includes: ['Cena para 2 personas', 'Copa de bienvenida', 'Postre especial'],
      requirements: ['1 historia de Instagram', '1 post en feed', 'Mencionar @restauranteelegance'],
      adminInfo: 'Colaboraci√≥n gestionada por el equipo de ZYRO. Contacto: admin@zyro.com',
      timeSlots: ['19:00', '20:00', '21:00', '22:00'],
      availableDates: ['2024-12-25', '2024-12-26', '2024-12-31', '2025-01-01']
    },
    {
      id: 3,
      title: 'Boutique de Moda Barcelona',
      business: 'Elegance BCN',
      category: 'Moda',
      city: 'Barcelona',
      followers: 15000,
      companions: 1,
      description: 'Descubre las √∫ltimas tendencias en moda en nuestra boutique exclusiva',
      location: { latitude: 41.3851, longitude: 2.1734 },
      address: 'Passeig de Gr√†cia 85, Barcelona',
      phone: '+34 93 456 7890',
      instagramHandle: '@elegance_bcn',
      images: [
        'https://via.placeholder.com/400x300/C9A961/000000?text=Boutique+1',
        'https://via.placeholder.com/400x300/C9A961/000000?text=Boutique+2',
        'https://via.placeholder.com/400x300/C9A961/000000?text=Boutique+3'
      ],
      includes: ['Sesi√≥n de styling personal', 'Outfit completo', 'Descuento 20%'],
      requirements: ['2 historias de Instagram', '1 post en feed', '1 reel', 'Mencionar @elegancebcn'],
      adminInfo: 'Colaboraci√≥n gestionada por el equipo de ZYRO. Contacto: admin@zyro.com',
      timeSlots: ['10:00', '11:00', '12:00', '16:00', '17:00', '18:00'],
      availableDates: ['2024-12-16', '2024-12-17', '2024-12-18', '2024-12-19']
    },
    {
      id: 4,
      title: 'Spa Wellness Valencia',
      business: 'Zen Spa Valencia',
      category: 'Salud y Belleza',
      city: 'Valencia',
      followers: 8000,
      companions: 1,
      description: 'Experiencia de relajaci√≥n y bienestar en nuestro spa de lujo',
      location: { latitude: 39.4699, longitude: -0.3763 },
      address: 'Calle Col√≥n 45, Valencia',
      phone: '+34 96 789 0123',
      instagramHandle: '@zen_spa_valencia',
      images: [
        'https://via.placeholder.com/400x300/C9A961/000000?text=Spa+1',
        'https://via.placeholder.com/400x300/C9A961/000000?text=Spa+2'
      ],
      includes: ['Masaje relajante 60min', 'Acceso a circuito termal', 'Infusi√≥n detox'],
      requirements: ['2 historias de Instagram', '1 post en feed', 'Mencionar @zenspavlc'],
      adminInfo: 'Colaboraci√≥n gestionada por el equipo de ZYRO. Contacto: admin@zyro.com',
      timeSlots: ['10:00', '11:30', '13:00', '15:30', '17:00', '18:30'],
      availableDates: ['2024-12-15', '2024-12-16', '2024-12-17', '2024-12-18']
    }
  ]);

  // ‚úÖ influencerCollaborations ahora viene del hook de persistencia
  // ‚úÖ pendingInfluencers ahora viene del hook de persistencia
  const [approvedInfluencers, setApprovedInfluencers] = useState([]); // Influencers aprobados por el administrador
  const [approvedInfluencersData, setApprovedInfluencersData] = useState([]); // Datos completos de influencers aprobados

  const [showCollaborationRequestsManagement, setShowCollaborationRequestsManagement] = useState(false); // Modal de gesti√≥n de solicitudes de colaboraci√≥n
  const [showScreenshotsModal, setShowScreenshotsModal] = useState(false); // Modal para ver capturas de pantalla
  const [selectedInfluencerScreenshots, setSelectedInfluencerScreenshots] = useState(null); // Capturas del influencer seleccionado
  const [showCampaignManagement, setShowCampaignManagement] = useState(false); // Modal de gesti√≥n de campa√±as de colaboraci√≥n
  const [showCampaignEditor, setShowCampaignEditor] = useState(false); // Modal para crear/editar campa√±a espec√≠fica
  const [selectedCampaign, setSelectedCampaign] = useState(null); // Campa√±a seleccionada para editar
  const [showCompanyManagement, setShowCompanyManagement] = useState(false); // Modal de gesti√≥n de empresas
  const [isCreatingCampaign, setIsCreatingCampaign] = useState(false); // Indica si se est√° creando una nueva campa√±a
  
  // ‚úÖ NUEVAS VARIABLES PARA GESTI√ìN DE SOLICITUDES DE REGISTRO DE INFLUENCERS
  const [showInfluencerRegistrationRequests, setShowInfluencerRegistrationRequests] = useState(false); // Modal de solicitudes de registro
  const [showApprovedInfluencers, setShowApprovedInfluencers] = useState(false); // Modal de influencers aprobados
  const [selectedInfluencerForApproval, setSelectedInfluencerForApproval] = useState(null); // Influencer seleccionado para aprobar/rechazar

  // Datos de ejemplo de empresas registradas
  const [registeredCompanies, setRegisteredCompanies] = useState([
    {
      id: 1,
      name: 'Restaurante Elegance',
      email: 'empresa@zyro.com',
      plan: 'Plan 6 meses',
      price: '399‚Ç¨',
      paymentMethod: 'Tarjeta terminada en 4242',
      status: 'active',
      registrationDate: '2024-01-15',
      collaborations: 12
    },
    {
      id: 2,
      name: 'Fashion Boutique',
      email: 'restaurante@elegance.com',
      plan: 'Plan 12 meses',
      price: '699‚Ç¨',
      paymentMethod: 'PayPal',
      status: 'active',
      registrationDate: '2024-02-20',
      collaborations: 8
    }
  ]);
  const [userPasswords, setUserPasswords] = useState({
    'nayades@gmail.com': 'influencer123',
    'ana@gmail.com': 'influencer123',
    'influencer@zyro.com': 'influencer123',
    'empresa@zyro.com': 'empresa123',
    'restaurante@elegance.com': 'empresa123',
    'admin_zyrovip': 'xarrec-2paqra-guftoN'
  }); // Sistema de contrase√±as de usuarios

  // Funciones para persistir el sistema de contrase√±as
  const savePasswordsToStorage = useCallback(async (passwords) => {
    try {
      await AsyncStorage.setItem('userPasswords', JSON.stringify(passwords));
      console.log('‚úÖ Sistema de contrase√±as guardado:', {
        totalUsers: Object.keys(passwords).length,
        users: Object.keys(passwords)
      });
    } catch (error) {
      console.error('‚ùå Error guardando contrase√±as:', error);
    }
  }, []);

  // Funci√≥n centralizada para actualizar contrase√±as con persistencia garantizada
  const updateUserPassword = useCallback(async (email, newPassword) => {
    try {
      const updatedPasswords = {
        ...userPasswords,
        [email]: newPassword
      };

      // Actualizar estado
      setUserPasswords(updatedPasswords);

      // Guardar inmediatamente en AsyncStorage
      await savePasswordsToStorage(updatedPasswords);

      console.log('‚úÖ Contrase√±a actualizada y persistida para:', email);
      return true;
    } catch (error) {
      console.error('‚ùå Error actualizando contrase√±a:', error);
      return false;
    }
  }, [userPasswords, savePasswordsToStorage]);

  const loadPasswordsFromStorage = useCallback(async () => {
    try {
      const defaultPasswords = {
        'nayades@gmail.com': 'influencer123',
        'ana@gmail.com': 'influencer123',
        'influencer@zyro.com': 'influencer123',
        'empresa@zyro.com': 'empresa123',
        'restaurante@elegance.com': 'empresa123',
        'admin_zyrovip': 'xarrec-2paqra-guftoN'
      };

      const savedPasswords = await AsyncStorage.getItem('userPasswords');
      if (savedPasswords) {
        const parsedPasswords = JSON.parse(savedPasswords);
        // Combinar contrase√±as guardadas con las por defecto (las guardadas tienen prioridad)
        const combinedPasswords = { ...defaultPasswords, ...parsedPasswords };
        setUserPasswords(combinedPasswords);
        console.log('‚úÖ Sistema de contrase√±as cargado y combinado:', {
          totalUsers: Object.keys(combinedPasswords).length,
          defaultUsers: Object.keys(defaultPasswords).length,
          customUsers: Object.keys(parsedPasswords).length,
          users: Object.keys(combinedPasswords)
        });
      } else {
        // Si no hay contrase√±as guardadas, usar las por defecto y guardarlas
        setUserPasswords(defaultPasswords);
        await AsyncStorage.setItem('userPasswords', JSON.stringify(defaultPasswords));
        console.log('‚úÖ Contrase√±as por defecto cargadas y guardadas:', {
          totalUsers: Object.keys(defaultPasswords).length,
          users: Object.keys(defaultPasswords)
        });
      }
    } catch (error) {
      console.error('‚ùå Error cargando contrase√±as:', error);
      // En caso de error, usar contrase√±as por defecto
      const defaultPasswords = {
        'nayades@gmail.com': 'influencer123',
        'ana@gmail.com': 'influencer123',
        'influencer@zyro.com': 'influencer123',
        'empresa@zyro.com': 'empresa123',
        'restaurante@elegance.com': 'empresa123',
        'admin_zyrovip': 'xarrec-2paqra-guftoN'
      };
      setUserPasswords(defaultPasswords);
      console.log('üîÑ Contrase√±as por defecto cargadas tras error');
    }
  }, []);

  // Funci√≥n para resetear contrase√±as (debug)
  const resetPasswordsToDefault = useCallback(async () => {
    try {
      await AsyncStorage.removeItem('userPasswords');
      const defaultPasswords = {
        'nayades@gmail.com': 'influencer123',
        'ana@gmail.com': 'influencer123',
        'influencer@zyro.com': 'influencer123',
        'empresa@zyro.com': 'empresa123',
        'restaurante@elegance.com': 'empresa123',
        'admin_zyrovip': 'xarrec-2paqra-guftoN'
      };
      setUserPasswords(defaultPasswords);
      console.log('üîÑ Contrase√±as reseteadas a valores por defecto');
    } catch (error) {
      console.error('‚ùå Error reseteando contrase√±as:', error);
    }
  }, []);

  // Funci√≥n para verificar integridad del sistema de contrase√±as
  const verifyPasswordIntegrity = useCallback(async () => {
    try {
      const savedPasswords = await AsyncStorage.getItem('userPasswords');
      if (savedPasswords) {
        const parsedPasswords = JSON.parse(savedPasswords);
        console.log('üîç Verificaci√≥n de integridad de contrase√±as:', {
          totalUsers: Object.keys(parsedPasswords).length,
          users: Object.keys(parsedPasswords),
          timestamp: new Date().toISOString()
        });
        return true;
      }
      return false;
    } catch (error) {
      console.error('‚ùå Error verificando integridad de contrase√±as:', error);
      return false;
    }
  }, []);

  // Funci√≥n para cargar empresas desde AsyncStorage
  const loadCompaniesFromStorage = useCallback(async () => {
    try {
      const savedCompanies = await AsyncStorage.getItem('companies');
      if (savedCompanies) {
        const parsedCompanies = JSON.parse(savedCompanies);
        setRegisteredCompanies(parsedCompanies);
        console.log('‚úÖ Empresas cargadas desde AsyncStorage');
      }
    } catch (error) {
      console.error('‚ùå Error al cargar empresas:', error);
    }
  }, []);

  // Funci√≥n para cargar usuario actual desde AsyncStorage
  const loadCurrentUserFromStorage = useCallback(async () => {
    try {
      const savedUser = await AsyncStorage.getItem('currentUser');
      if (savedUser) {
        const parsedUser = JSON.parse(savedUser);
        setCurrentUser(parsedUser);
        setUserType(parsedUser.type);
        if (parsedUser.type !== 'admin') {
          setCurrentScreen('main');
        }
        console.log('‚úÖ Usuario actual cargado desde AsyncStorage:', parsedUser.email);
      }
    } catch (error) {
      console.error('‚ùå Error cargando usuario actual:', error);
    }
  }, []);

  // Funci√≥n para cargar datos de suscripci√≥n desde AsyncStorage
  const loadSubscriptionDataFromStorage = useCallback(async () => {
    try {
      const savedSubscriptionData = await AsyncStorage.getItem('subscriptionData');
      if (savedSubscriptionData && currentUser?.email) {
        const parsedData = JSON.parse(savedSubscriptionData);
        setSubscriptionData(parsedData);
        console.log('‚úÖ Datos de suscripci√≥n cargados desde AsyncStorage para:', currentUser.email);
      }
    } catch (error) {
      console.error('‚ùå Error cargando datos de suscripci√≥n:', error);
    }
  }, [currentUser?.email]);

  // Funci√≥n para guardar subscriptionData de forma optimizada
  const saveSubscriptionDataToStorage = useCallback(async (data) => {
    try {
      await AsyncStorage.setItem('subscriptionData', JSON.stringify(data));
      console.log('‚úÖ Datos de suscripci√≥n guardados correctamente');
    } catch (error) {
      console.error('‚ùå Error guardando datos de suscripci√≥n:', error);
    }
  }, []);

  // Cargar contrase√±as, empresas, usuario actual y colaboraciones al iniciar la app
  React.useEffect(() => {
    const initializeApp = async () => {
      try {
        // Primero limpiar datos corruptos
        await clearCorruptedData();

        // Luego cargar datos
        await loadPasswordsFromStorage();
        await verifyPasswordIntegrity();
        loadCompaniesFromStorage();
        loadCurrentUserFromStorage();
        loadInfluencerCollaborationsFromStorage();
        await loadApprovedInfluencersFromStorage(); // ‚úÖ Cargar influencers aprobados
        await loadCollaborationsFromStorage();

        // Verificar integridad de campa√±as despu√©s de cargarlas
        setTimeout(async () => {
          await verifyCollaborationsIntegrity();
        }, 1000);

        console.log('‚úÖ Aplicaci√≥n inicializada correctamente');
      } catch (error) {
        console.error('‚ùå Error cr√≠tico inicializando app:', error);
        // En caso de error cr√≠tico, resetear estados a valores seguros
        setPendingInfluencers([]);
        setInfluencerCollaborations([]);
        setPendingAdminRequests([]);
        setApprovedCollaborations([]);
        setRejectedRequests([]);
      }
    };

    initializeApp();
  }, [clearCorruptedData, loadPasswordsFromStorage, verifyPasswordIntegrity, loadCompaniesFromStorage, loadCurrentUserFromStorage, loadInfluencerCollaborationsFromStorage, loadApprovedInfluencersFromStorage, loadCollaborationsFromStorage, verifyCollaborationsIntegrity]);

  // Cargar datos de suscripci√≥n cuando el usuario est√© disponible
  React.useEffect(() => {
    if (currentUser?.email && currentUser.role === 'empresa') {
      loadSubscriptionDataFromStorage();
    }
  }, [currentUser?.email, currentUser?.role, loadSubscriptionDataFromStorage]);

  // Actualizar subscriptionData cuando cambie el usuario o las empresas (consolidado)
  React.useEffect(() => {
    // Solo actualizar si tenemos datos v√°lidos y el usuario es empresa
    if (currentUser && currentUser.role === 'empresa' && registeredCompanies && registeredCompanies.length > 0) {
      try {
        const newSubscriptionData = getSubscriptionData();
        if (newSubscriptionData) {
          setSubscriptionData(newSubscriptionData);
          console.log('‚úÖ SubscriptionData actualizado:', newSubscriptionData.currentPlan);
        }
      } catch (error) {
        console.error('‚ùå Error actualizando subscriptionData:', error);
        // Usar datos por defecto en caso de error
        setSubscriptionData({
          currentPlan: 'Plan 6 meses',
          price: '399',
          billingCycle: 'monthly',
          nextBilling: '15/02/2025',
          paymentMethod: 'Tarjeta terminada en 4242',
          status: 'active'
        });
      }
    }
  }, [currentUser?.email, currentUser?.role, registeredCompanies]);

  // Guardar empresas cuando cambien
  React.useEffect(() => {
    const saveCompaniesToStorage = async () => {
      try {
        await AsyncStorage.setItem('companies', JSON.stringify(registeredCompanies));
        console.log('‚úÖ Empresas guardadas en AsyncStorage');
      } catch (error) {
        console.error('‚ùå Error al guardar empresas:', error);
      }
    };

    if (registeredCompanies.length > 0) {
      saveCompaniesToStorage();
    }
  }, [registeredCompanies]);

  // Funciones para persistir colaboraciones de influencers
  const saveInfluencerCollaborationsToStorage = useCallback(async (collaborations) => {
    try {
      await AsyncStorage.setItem('influencerCollaborations', JSON.stringify(collaborations));
      console.log('‚úÖ Colaboraciones de influencers guardadas en AsyncStorage');
    } catch (error) {
      console.error('‚ùå Error guardando colaboraciones de influencers:', error);
    }
  }, []);

  const loadInfluencerCollaborationsFromStorage = useCallback(async () => {
    try {
      const savedCollaborations = await AsyncStorage.getItem('influencerCollaborations');
      if (savedCollaborations) {
        const parsedCollaborations = JSON.parse(savedCollaborations);
        // Asegurar que siempre sea un array v√°lido
        const validCollaborations = Array.isArray(parsedCollaborations) ? parsedCollaborations : [];
        setInfluencerCollaborations(validCollaborations);

        // Separar las colaboraciones por estado para cargar en los estados correspondientes
        const pending = validCollaborations.filter(collab => collab.status === 'pending');
        const approved = validCollaborations.filter(collab => collab.status === 'approved');
        const rejected = validCollaborations.filter(collab => collab.status === 'rejected');

        setPendingAdminRequests(pending);
        setApprovedCollaborations(approved);
        setRejectedRequests(rejected);

        console.log('‚úÖ Colaboraciones cargadas desde AsyncStorage:', {
          total: validCollaborations.length,
          pending: pending.length,
          approved: approved.length,
          rejected: rejected.length
        });
      } else {
        // Si no hay datos guardados, inicializar con arrays vac√≠os
        setInfluencerCollaborations([]);
        setPendingAdminRequests([]);
        setApprovedCollaborations([]);
        setRejectedRequests([]);
        console.log('‚úÖ Colaboraciones inicializadas como arrays vac√≠os');
      }
    } catch (error) {
      console.error('‚ùå Error cargando colaboraciones de influencers:', error);
      // En caso de error, asegurar que sean arrays vac√≠os
      setInfluencerCollaborations([]);
      setPendingAdminRequests([]);
      setApprovedCollaborations([]);
      setRejectedRequests([]);
    }
  }, []);

  // Funci√≥n para limpiar colaboraciones de un usuario espec√≠fico (opcional)
  const clearUserCollaborations = useCallback(async (userEmail) => {
    try {
      const safeCollaborations = Array.isArray(influencerCollaborations) ? influencerCollaborations : [];
      const updatedCollaborations = safeCollaborations.filter(
        collab => collab.influencerEmail !== userEmail
      );
      setInfluencerCollaborations(updatedCollaborations);
      await AsyncStorage.setItem('influencerCollaborations', JSON.stringify(updatedCollaborations));
      console.log('‚úÖ Colaboraciones del usuario', userEmail, 'eliminadas');
    } catch (error) {
      console.error('‚ùå Error eliminando colaboraciones del usuario:', error);
    }
  }, [influencerCollaborations]);

  // Funciones para persistir campa√±as de colaboraci√≥n (administrador) - MEJORADAS
  const saveCollaborationsToStorage = useCallback(async (campaigns) => {
    try {
      // Crear una copia profunda para evitar referencias circulares
      const campaignsToSave = campaigns.map(campaign => ({
        ...campaign,
        // Asegurar que todas las propiedades cr√≠ticas est√©n presentes
        id: campaign.id || Date.now(),
        title: campaign.title || '',
        business: campaign.business || '',
        category: campaign.category || 'Restaurantes',
        city: campaign.city || 'Madrid',
        followers: campaign.followers || 1000,
        companions: campaign.companions || 1,
        description: campaign.description || '',
        location: campaign.location || { latitude: 40.4168, longitude: -3.7038 },
        address: campaign.address || '',
        phone: campaign.phone || '',
        instagramHandle: campaign.instagramHandle || '',
        images: campaign.images || [],
        includes: campaign.includes || [],
        requirements: campaign.requirements || [],
        adminInfo: campaign.adminInfo || 'Colaboraci√≥n gestionada por el equipo de ZYRO. Contacto: admin@zyro.com',
        timeSlots: campaign.timeSlots || [],
        availableDates: campaign.availableDates || [],
        // Metadatos de persistencia
        lastModified: new Date().toISOString(),
        version: '2.0' // Versi√≥n del formato de datos
      }));

      await AsyncStorage.setItem('adminCollaborations', JSON.stringify(campaignsToSave));

      // Guardar tambi√©n un backup con timestamp
      const backupKey = `adminCollaborations_backup_${Date.now()}`;
      await AsyncStorage.setItem(backupKey, JSON.stringify(campaignsToSave));

      // Limpiar backups antiguos (mantener solo los √∫ltimos 5)
      const allKeys = await AsyncStorage.getAllKeys();
      const backupKeys = allKeys.filter(key => key.startsWith('adminCollaborations_backup_'))
        .sort().reverse();

      if (backupKeys.length > 5) {
        const keysToRemove = backupKeys.slice(5);
        await AsyncStorage.multiRemove(keysToRemove);
      }

      console.log('‚úÖ Campa√±as de colaboraci√≥n guardadas permanentemente:', {
        totalCampaigns: campaignsToSave.length,
        timestamp: new Date().toISOString(),
        campaigns: campaignsToSave.map(c => ({
          id: c.id,
          title: c.title,
          business: c.business,
          imagesCount: c.images.length,
          includesCount: c.includes.length,
          requirementsCount: c.requirements.length,
          timeSlotsCount: c.timeSlots.length,
          availableDatesCount: c.availableDates.length
        }))
      });
    } catch (error) {
      console.error('‚ùå Error guardando campa√±as de colaboraci√≥n:', error);
      Alert.alert(
        'Error de Guardado',
        'No se pudieron guardar las campa√±as. Los cambios podr√≠an perderse al reiniciar la aplicaci√≥n.',
        [{ text: 'OK' }]
      );
    }
  }, []);

  const loadCollaborationsFromStorage = useCallback(async () => {
    try {
      const savedCampaigns = await AsyncStorage.getItem('adminCollaborations');
      if (savedCampaigns) {
        const parsedCampaigns = JSON.parse(savedCampaigns);

        // Validar y limpiar datos cargados
        const validatedCampaigns = parsedCampaigns.map(campaign => ({
          ...campaign,
          // Asegurar que todas las propiedades cr√≠ticas est√©n presentes
          id: campaign.id || Date.now(),
          title: campaign.title || 'Campa√±a sin t√≠tulo',
          business: campaign.business || 'Negocio',
          category: campaign.category || 'Restaurantes',
          city: campaign.city || 'Madrid',
          followers: campaign.followers || 1000,
          companions: campaign.companions || 1,
          description: campaign.description || '',
          location: campaign.location || { latitude: 40.4168, longitude: -3.7038 },
          address: campaign.address || '',
          phone: campaign.phone || '',
          instagramHandle: campaign.instagramHandle || '',
          images: Array.isArray(campaign.images) ? campaign.images : [],
          includes: Array.isArray(campaign.includes) ? campaign.includes : [],
          requirements: Array.isArray(campaign.requirements) ? campaign.requirements : [],
          adminInfo: campaign.adminInfo || 'Colaboraci√≥n gestionada por el equipo de ZYRO. Contacto: admin@zyro.com',
          timeSlots: Array.isArray(campaign.timeSlots) ? campaign.timeSlots : [],
          availableDates: Array.isArray(campaign.availableDates) ? campaign.availableDates : []
        }));

        setCollaborations(validatedCampaigns);

        console.log('‚úÖ Campa√±as de colaboraci√≥n cargadas permanentemente desde AsyncStorage:', {
          totalCampaigns: validatedCampaigns.length,
          campaigns: validatedCampaigns.map(c => ({
            id: c.id,
            title: c.title,
            business: c.business,
            imagesCount: c.images.length,
            includesCount: c.includes.length,
            requirementsCount: c.requirements.length,
            timeSlotsCount: c.timeSlots.length,
            availableDatesCount: c.availableDates.length,
            lastModified: c.lastModified
          }))
        });
      } else {
        console.log('‚ÑπÔ∏è No hay campa√±as guardadas, usando datos por defecto');
      }
    } catch (error) {
      console.error('‚ùå Error cargando campa√±as de colaboraci√≥n:', error);

      // Intentar cargar desde backup m√°s reciente
      try {
        const allKeys = await AsyncStorage.getAllKeys();
        const backupKeys = allKeys.filter(key => key.startsWith('adminCollaborations_backup_'))
          .sort().reverse();

        if (backupKeys.length > 0) {
          const latestBackup = await AsyncStorage.getItem(backupKeys[0]);
          if (latestBackup) {
            const backupCampaigns = JSON.parse(latestBackup);
            setCollaborations(backupCampaigns);
            console.log('‚úÖ Campa√±as restauradas desde backup:', backupKeys[0]);

            Alert.alert(
              'Datos Restaurados',
              'Se han restaurado las campa√±as desde una copia de seguridad.',
              [{ text: 'OK' }]
            );
          }
        }
      } catch (backupError) {
        console.error('‚ùå Error cargando backup:', backupError);
      }
    }
  }, []);

  // Funci√≥n de debug para mostrar colaboraciones de un usuario
  const debugUserCollaborations = useCallback((userEmail) => {
    const safeCollaborations = Array.isArray(influencerCollaborations) ? influencerCollaborations : [];
    const userCollabs = safeCollaborations.filter(
      collab => collab.influencerEmail === userEmail
    );
    console.log(`üìä Colaboraciones de ${userEmail}:`, {
      total: userCollabs.length,
      pending: userCollabs.filter(c => c.status === 'pending').length,
      approved: userCollabs.filter(c => c.status === 'approved').length,
      rejected: userCollabs.filter(c => c.status === 'rejected').length,
      collaborations: userCollabs
    });
  }, [influencerCollaborations]);

  // Guardar contrase√±as cuando cambien
  React.useEffect(() => {
    savePasswordsToStorage(userPasswords);
  }, [userPasswords, savePasswordsToStorage]);

  // Guardar colaboraciones de influencers cuando cambien
  React.useEffect(() => {
    if (influencerCollaborations.length > 0) {
      saveInfluencerCollaborationsToStorage(influencerCollaborations);
    }
  }, [influencerCollaborations, saveInfluencerCollaborationsToStorage]);

  // Guardar campa√±as de colaboraci√≥n cuando cambien - MEJORADO
  React.useEffect(() => {
    // Guardar siempre, incluso si el array est√° vac√≠o (para persistir eliminaciones)
    const saveWithDelay = setTimeout(() => {
      saveCollaborationsToStorage(collaborations);
    }, 500); // Peque√±o delay para evitar guardados excesivos durante ediciones r√°pidas

  // Return corregido:     return () => clearTimeout(saveWithDelay);
  }, [collaborations, saveCollaborationsToStorage]);

  // Funci√≥n para forzar guardado inmediato (√∫til para operaciones cr√≠ticas)
  const forceSaveCollaborations = useCallback(async () => {
    await saveCollaborationsToStorage(collaborations);
  }, [collaborations, saveCollaborationsToStorage]);

  // Funci√≥n para verificar integridad de datos de campa√±as
  const verifyCollaborationsIntegrity = useCallback(async () => {
    try {
      const savedCampaigns = await AsyncStorage.getItem('adminCollaborations');
      if (savedCampaigns) {
        const parsedCampaigns = JSON.parse(savedCampaigns);
        console.log('üîç Verificaci√≥n de integridad de campa√±as:', {
          totalCampaigns: parsedCampaigns.length,
          campaigns: parsedCampaigns.map(c => ({
            id: c.id,
            title: c.title,
            business: c.business,
            hasImages: c.images && c.images.length > 0,
            hasIncludes: c.includes && c.includes.length > 0,
            hasRequirements: c.requirements && c.requirements.length > 0,
            hasTimeSlots: c.timeSlots && c.timeSlots.length > 0,
            hasAvailableDates: c.availableDates && c.availableDates.length > 0,
            lastModified: c.lastModified,
            version: c.version
          })),
          timestamp: new Date().toISOString()
        });
        return true;
      }
      return false;
    } catch (error) {
      console.error('‚ùå Error verificando integridad de campa√±as:', error);
      return false;
    }
  }, []);

  // Funci√≥n para exportar/importar campa√±as (√∫til para respaldos)
  const exportCollaborationsData = useCallback(async () => {
    try {
      const exportData = {
        campaigns: collaborations,
        exportDate: new Date().toISOString(),
        version: '2.0',
        totalCampaigns: collaborations.length
      };

      console.log('üì§ Datos de campa√±as exportados:', exportData);
      return JSON.stringify(exportData, null, 2);
    } catch (error) {
      console.error('‚ùå Error exportando campa√±as:', error);
      return null;
    }
  }, [collaborations]);

  // Debug: Mostrar colaboraciones cuando un influencer inicia sesi√≥n
  React.useEffect(() => {
    if (currentUser && currentUser.type === 'influencer' && currentUser.email && influencerCollaborations.length > 0) {
      debugUserCollaborations(currentUser.email);
    }
  }, [currentUser, influencerCollaborations, debugUserCollaborations]);



  // useEffect duplicado eliminado - consolidado arriba
  // Funci√≥n para obtener datos de suscripci√≥n din√°micos
  const getSubscriptionData = () => {
    try {
      // Datos por defecto seguros
      const defaultData = {
        currentPlan: 'Plan 6 meses',
        price: '399',
        billingCycle: 'monthly',
        nextBilling: '15/02/2025',
        paymentMethod: 'Tarjeta terminada en 4242',
        status: 'active',
        duration: '6 meses'
      };

      // Validaciones iniciales
      if (!currentUser || currentUser.role !== 'empresa' || !currentUser.email) {
        console.log('‚ÑπÔ∏è Usuario no v√°lido, usando datos por defecto');
        return defaultData;
      }

      if (!registeredCompanies || !Array.isArray(registeredCompanies)) {
        console.warn('‚ö†Ô∏è registeredCompanies no es v√°lido, usando datos por defecto');
        return defaultData;
      }

      // Buscar empresa actual de forma segura
      const currentCompany = registeredCompanies.find(c => c && c.email === currentUser.email);
      if (!currentCompany) {
        console.log('‚ÑπÔ∏è Empresa no encontrada, usando datos por defecto');
        return defaultData;
      }

      // Extraer precio de forma segura
      let numericPrice = '399';
      try {
        if (currentCompany.price && typeof currentCompany.price === 'string') {
          const priceMatch = currentCompany.price.match(/‚Ç¨(\d+)/);
          if (priceMatch && priceMatch[1]) {
            numericPrice = priceMatch[1];
          }
        } else if (currentCompany.pricePerMonth) {
          numericPrice = currentCompany.pricePerMonth.toString();
        }
      } catch (priceError) {
        console.warn('‚ö†Ô∏è Error extrayendo precio:', priceError);
      }

      // Calcular fecha de facturaci√≥n de forma segura
      let formattedNextBilling = '15/02/2025';
      try {
        const nextBillingDate = new Date();
        nextBillingDate.setDate(nextBillingDate.getDate() + 30);
        formattedNextBilling = nextBillingDate.toLocaleDateString('es-ES', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
        });
      } catch (dateError) {
        console.warn('‚ö†Ô∏è Error calculando fecha de facturaci√≥n:', dateError);
      }

      // Determinar duraci√≥n de forma segura
      let duration = '6 meses';
      try {
        if (currentCompany.duration) {
          duration = currentCompany.duration;
        } else if (currentCompany.plan) {
          if (currentCompany.plan.includes('3')) duration = '3 meses';
          else if (currentCompany.plan.includes('12')) duration = '12 meses';
          else duration = '6 meses';
        }
      } catch (durationError) {
        console.warn('‚ö†Ô∏è Error determinando duraci√≥n:', durationError);
      }

      // Construir datos finales de forma segura
      const subscriptionData = {
        currentPlan: currentCompany.plan || defaultData.currentPlan,
        price: numericPrice,
        billingCycle: 'monthly',
        nextBilling: formattedNextBilling,
        paymentMethod: currentCompany.paymentMethod || defaultData.paymentMethod,
        status: currentCompany.status || 'active',
        duration: duration
      };

      console.log('‚úÖ Datos de suscripci√≥n obtenidos correctamente:', {
        plan: subscriptionData.currentPlan,
        precio: subscriptionData.price,
        empresa: currentUser.email
      });

      return subscriptionData;

    } catch (error) {
      console.error('‚ùå Error cr√≠tico en getSubscriptionData:', error);
      // Retornar datos por defecto seguros en caso de cualquier error
      return {
        currentPlan: 'Plan 6 meses',
        price: '399',
        billingCycle: 'monthly',
        nextBilling: '15/02/2025',
        paymentMethod: 'Tarjeta terminada en 4242',
        status: 'active',
        duration: '6 meses'
      };
    }
  };

  const [subscriptionData, setSubscriptionData] = useState({
    currentPlan: 'Plan 6 meses',
    price: '399',
    billingCycle: 'monthly',
    nextBilling: '15/02/2025',
    paymentMethod: 'Tarjeta terminada en 4242',
    status: 'active'
  });

  // M√©todos de pago disponibles
  const paymentMethods = [
    { id: 'credit', name: 'Tarjeta de Cr√©dito', icon: 'card-outline' },
    { id: 'debit', name: 'Tarjeta de D√©bito', icon: 'card-outline' },
    { id: 'apple', name: 'Apple Pay', icon: 'logo-apple' },
    { id: 'google', name: 'Google Pay', icon: 'logo-google' },
    { id: 'paypal', name: 'PayPal', icon: 'logo-paypal' },
    { id: 'transfer', name: 'Transferencia Bancaria', icon: 'business-outline' }
  ];



  const cities = [
    'Todos',
    'Madrid',
    'Barcelona',
    'Valencia',
    'Sevilla',
    'Bilbao',
    'M√°laga',
    'Zaragoza',
    'Murcia',
    'Palma',
    'Las Palmas',
    'C√≥rdoba',
    'Alicante',
    'Valladolid',
    'Vigo',
    'Gij√≥n',
    'Granada',
    'Vitoria',
    'A Coru√±a',
    'Elche',
    'Oviedo',
    'Santa Cruz de Tenerife',
    'Badalona',
    'Cartagena',
    'Terrassa',
    'Jerez de la Frontera',
    'Sabadell',
    'M√≥stoles',
    'Alcal√° de Henares',
    'Pamplona',
    'Fuenlabrada'
  ];
  const categories = [
    'Todos',
    'Restaurantes',
    'Movilidad',
    'Ropa',
    'Eventos',
    'Delivery',
    'Salud y Belleza',
    'Fitness',
    'Alojamiento',
    'Discotecas'
  ];





  const InfluencerRegisterScreen = React.memo(() => {
    // Estado local para evitar re-renderizados
    const [localRegistrationData, setLocalRegistrationData] = useState(registrationData);

    // Refs para navegaci√≥n entre campos
    const nameRef = useRef(null);
    const emailRef = useRef(null);
    const passwordRef = useRef(null);
    const phoneRef = useRef(null);
    const birthDateRef = useRef(null);
    const cityRef = useRef(null);
    const instagramRef = useRef(null);
    const tiktokRef = useRef(null);
    const followersRef = useRef(null);

    // Sincronizar datos cuando cambie el estado padre
    React.useEffect(() => {
      setLocalRegistrationData(registrationData);
    }, [registrationData]);

    // Funci√≥n optimizada para actualizar campos
    const updateLocalField = useCallback((field, value) => {
      setLocalRegistrationData(prev => ({
        ...prev,
        [field]: value
      }));
    }, []);

  // Return corregido:     return (
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor="#000000" />
        <View style={styles.header}>
          <Image
            source={logoZyro}
            style={styles.headerLogo}
            resizeMode="contain"
          />
          <TouchableOpacity
            style={styles.headerCloseButton}
            onPress={() => setCurrentScreen('welcome')}
          >
            <Ionicons name="close" size={24} color="#C9A961" />
          </TouchableOpacity>
        </View>

        <ScrollView
          style={styles.registrationContainer}
          keyboardShouldPersistTaps="handled"
          showsVerticalScrollIndicator={false}
        >
          <Text style={styles.registrationTitle}>Registro de Influencer</Text>

          <View style={styles.formContainer}>
            {/* Informaci√≥n Personal */}
            <Text style={styles.sectionTitle}>Informaci√≥n Personal</Text>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Nombre completo</Text>
              <TextInput
                ref={nameRef}
                style={styles.formInput}
                placeholder="Tu nombre completo"
                placeholderTextColor="#666"
                value={localRegistrationData.name || ''}
                onChangeText={(text) => updateLocalField('name', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => emailRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Email</Text>
              <TextInput
                ref={emailRef}
                style={styles.formInput}
                placeholder="tu@email.com"
                placeholderTextColor="#666"
                keyboardType="email-address"
                value={localRegistrationData.email || ''}
                onChangeText={(text) => updateLocalField('email', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => passwordRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Contrase√±a *</Text>
              <TextInput
                ref={passwordRef}
                style={styles.formInput}
                placeholder="Crea tu contrase√±a (m√≠nimo 6 caracteres)"
                placeholderTextColor="#666"
                secureTextEntry
                value={localRegistrationData.password || ''}
                onChangeText={(text) => updateLocalField('password', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => phoneRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Tel√©fono</Text>
              <TextInput
                ref={phoneRef}
                style={styles.formInput}
                placeholder="Tu tel√©fono"
                placeholderTextColor="#666"
                keyboardType="phone-pad"
                value={localRegistrationData.phone || ''}
                onChangeText={(text) => updateLocalField('phone', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => birthDateRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Fecha de nacimiento</Text>
              <TextInput
                ref={birthDateRef}
                style={styles.formInput}
                placeholder="DD/MM/YYYY"
                placeholderTextColor="#666"
                value={localRegistrationData.birthDate || ''}
                onChangeText={(text) => updateLocalField('birthDate', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => cityRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Ciudad de residencia</Text>
              <TextInput
                ref={cityRef}
                style={styles.formInput}
                placeholder="Tu ciudad"
                placeholderTextColor="#666"
                value={localRegistrationData.city || ''}
                onChangeText={(text) => updateLocalField('city', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => instagramRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>

            {/* Redes Sociales */}
            <Text style={styles.sectionTitle}>Redes Sociales</Text>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Usuario de Instagram</Text>
              <TextInput
                ref={instagramRef}
                style={styles.formInput}
                placeholder="@tuusuario"
                placeholderTextColor="#666"
                value={localRegistrationData.instagram || ''}
                onChangeText={(text) => updateLocalField('instagram', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => tiktokRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Usuario de TikTok</Text>
              <TextInput
                ref={tiktokRef}
                style={styles.formInput}
                placeholder="@tuusuario"
                placeholderTextColor="#666"
                value={localRegistrationData.tiktok || ''}
                onChangeText={(text) => updateLocalField('tiktok', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => followersRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Seguidores en Instagram</Text>
              <TextInput
                ref={followersRef}
                style={styles.formInput}
                placeholder="N√∫mero de seguidores"
                placeholderTextColor="#666"
                keyboardType="numeric"
                value={localRegistrationData.followers || ''}
                onChangeText={(text) => updateLocalField('followers', text)}
                returnKeyType="done"
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>



            {/* Verificaci√≥n */}
            <Text style={styles.sectionTitle}>Verificaci√≥n</Text>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Capturas de pantalla requeridas</Text>
              <Text style={styles.captureInstructions}>
                Sube capturas de pantalla de las estad√≠sticas de los √∫ltimos 30 d√≠as de tus redes sociales:
              </Text>

              <View style={styles.captureSection}>
                <Text style={styles.captureSubtitle}>üì∏ Instagram (requerido):</Text>
                <Text style={styles.captureDetail}>‚Ä¢ Estad√≠sticas detalladas de los √∫ltimos 30 d√≠as</Text>
                <Text style={styles.captureDetail}>‚Ä¢ Visualizaciones de stories</Text>
                <Text style={styles.captureDetail}>‚Ä¢ Pa√≠ses/ciudades principales de audiencia</Text>
                <Text style={styles.captureDetail}>‚Ä¢ Rangos de edad con porcentajes</Text>

                <TouchableOpacity
                  style={styles.uploadButton}
                  onPress={async () => {
                    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
                    if (status !== 'granted') {
                      Alert.alert('Permisos necesarios', 'Necesitamos acceso a tu galer√≠a para subir las capturas de pantalla.');
                      return;
                    }

                    const result = await ImagePicker.launchImageLibraryAsync({
                      mediaTypes: ImagePicker.MediaTypeOptions.Images,
                      allowsMultipleSelection: true,
                      quality: 1,
                    });

                    if (!result.canceled) {
                      Alert.alert(
                        'Capturas Seleccionadas',
                        `Has seleccionado ${result.assets?.length || 1} imagen(es) de Instagram. Las capturas han sido guardadas.`
                      );
                      setRegistrationData(prev => ({
                        ...(prev || {}),
                        instagramScreenshots: result.assets || [result]
                      }));
                    }
                  }}
                >
                  <Ionicons name="camera" size={24} color="#C9A961" />
                  <Text style={styles.uploadButtonText}>
                    {registrationData.instagramScreenshots ?
                      `${registrationData.instagramScreenshots.length} capturas de Instagram` :
                      'Subir capturas de Instagram'
                    }
                  </Text>
                </TouchableOpacity>
              </View>

              <View style={styles.captureSection}>
                <Text style={styles.captureSubtitle}>üéµ TikTok (opcional):</Text>
                <Text style={styles.captureDetail}>‚Ä¢ Estad√≠sticas de los √∫ltimos 30 d√≠as</Text>
                <Text style={styles.captureDetail}>‚Ä¢ Visualizaciones y engagement</Text>
                <Text style={styles.captureDetail}>‚Ä¢ Demograf√≠a de audiencia</Text>

                <TouchableOpacity
                  style={[styles.uploadButton, styles.uploadButtonSecondary]}
                  onPress={async () => {
                    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
                    if (status !== 'granted') {
                      Alert.alert('Permisos necesarios', 'Necesitamos acceso a tu galer√≠a para subir las capturas de pantalla.');
                      return;
                    }

                    const result = await ImagePicker.launchImageLibraryAsync({
                      mediaTypes: ImagePicker.MediaTypeOptions.Images,
                      allowsMultipleSelection: true,
                      quality: 1,
                    });

                    if (!result.canceled) {
                      Alert.alert(
                        'Capturas Seleccionadas',
                        `Has seleccionado ${result.assets?.length || 1} imagen(es) de TikTok. Las capturas han sido guardadas.`
                      );
                      setRegistrationData(prev => ({
                        ...(prev || {}),
                        tiktokScreenshots: result.assets || [result]
                      }));
                    }
                  }}
                >
                  <Ionicons name="videocam" size={24} color="#666" />
                  <Text style={styles.uploadButtonSecondaryText}>
                    {registrationData.tiktokScreenshots ?
                      `${registrationData.tiktokScreenshots.length} capturas de TikTok` :
                      'Subir capturas de TikTok (opcional)'
                    }
                  </Text>
                </TouchableOpacity>
              </View>
            </View>

            <View style={styles.agreementContainer}>
              <TouchableOpacity
                style={styles.agreementCheckbox}
                onPress={() => {
                  const newValue = !localRegistrationData.agreement;
                  updateLocalField('agreement', newValue);
                }}
              >
                <View style={[styles.agreementCheckboxIcon, localRegistrationData.agreement && styles.agreementCheckboxSelected]}>
                  {localRegistrationData.agreement && <Ionicons name="checkmark" size={16} color="#FFFFFF" />}
                </View>
                <Text style={styles.agreementText}>
                  Acepto los t√©rminos y condiciones de ZYRO
                </Text>
              </TouchableOpacity>
            </View>

            {/* Submit Button */}
            <TouchableOpacity
              style={styles.submitButton}
              onPress={async () => {
                // Validar campos obligatorios
                if (!localRegistrationData.name || !localRegistrationData.email || !localRegistrationData.password) {
                  Alert.alert(
                    'Campos Obligatorios',
                    'Por favor completa todos los campos obligatorios: nombre, email y contrase√±a.',
                    [{ text: 'OK' }]
                  );
                  return;
                }

                // Validar formato de email
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(localRegistrationData.email)) {
                  Alert.alert(
                    'Email Inv√°lido',
                    'Por favor ingresa un email v√°lido.',
                    [{ text: 'OK' }]
                  );
                  return;
                }

                // Validar contrase√±a
                if (localRegistrationData.password.length < 6) {
                  Alert.alert(
                    'Contrase√±a Muy Corta',
                    'La contrase√±a debe tener al menos 6 caracteres.',
                    [{ text: 'OK' }]
                  );
                  return;
                }

                // Verificar que el email no est√© ya registrado
                if (userPasswords[localRegistrationData.email]) {
                  Alert.alert(
                    'Email Ya Registrado',
                    'Este email ya est√° registrado. Por favor usa otro email o inicia sesi√≥n.',
                    [{ text: 'OK' }]
                  );
                  return;
                }

                // Validar acuerdo de t√©rminos
                if (!localRegistrationData.agreement) {
                  Alert.alert(
                    'T√©rminos y Condiciones',
                    'Debes aceptar los t√©rminos y condiciones para continuar.',
                    [{ text: 'OK' }]
                  );
                  return;
                }

                // Crear solicitud de registro para el administrador
                const newInfluencerRequest = {
                  id: Date.now(),
                  email: localRegistrationData.email,
                  name: localRegistrationData.name,
                  phone: localRegistrationData.phone || '',
                  city: localRegistrationData.city || 'Madrid',
                  instagram: localRegistrationData.instagram || '@usuario',
                  tiktok: localRegistrationData.tiktok || '@usuario',
                  followers: localRegistrationData.followers || '1000',
                  password: localRegistrationData.password,
                  registrationDate: new Date().toISOString().split('T')[0],
                  registrationTime: new Date().toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }),
                  status: 'pending'
                };

                // Agregar a la lista de influencers pendientes
                const updatedPendingInfluencers = [...pendingInfluencers, newInfluencerRequest];
                setPendingInfluencers(updatedPendingInfluencers);

                // Guardar permanentemente la nueva solicitud
                await savePendingInfluencersToStorage(updatedPendingInfluencers);

                // Guardar datos personales por defecto para el nuevo usuario
                const newUserData = {
                  fullName: localRegistrationData.name,
                  email: localRegistrationData.email,
                  phone: localRegistrationData.phone || '',
                  city: localRegistrationData.city || 'Madrid',
                  instagram: localRegistrationData.instagram || '@usuario',
                  tiktok: localRegistrationData.tiktok || '@usuario',
                  instagramFollowers: localRegistrationData.followers || '1000'
                };

                // Guardar datos personales en AsyncStorage
                try {
                  const key = `personalData_${localRegistrationData.email}`;
                  await AsyncStorage.setItem(key, JSON.stringify(newUserData));
                  console.log('‚úÖ Datos del nuevo usuario guardados:', key);
                } catch (error) {
                  console.error('‚ùå Error guardando datos del nuevo usuario:', error);
                }

                // Sincronizar estado local con estado padre antes de enviar
                setRegistrationData(localRegistrationData);

                Alert.alert(
                  '¬°Registro Enviado! üìã',
                  `Tu solicitud de registro ha sido enviada exitosamente.\n\nüìß Email: ${localRegistrationData.email}\n\n‚è≥ Tu cuenta est√° pendiente de aprobaci√≥n por el administrador.\n\nRecibir√°s una notificaci√≥n cuando sea aprobada.`,
                  [{
                    text: 'OK',
                    onPress: () => setCurrentScreen('welcome')
                  }]
                );
              }}
            >
              <Text style={styles.submitButtonText}>Enviar Solicitud</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.backToWelcomeButton}
              onPress={() => setCurrentScreen('welcome')}
            >
              <Text style={styles.backToWelcomeButtonText}>‚Üê Volver</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </SafeAreaView>
    );
  });

  const CompanyRegisterScreen = React.memo(() => {
    // Estado local para evitar re-renderizados
    const [localRegistrationData, setLocalRegistrationData] = useState(registrationData);
    const [localSelectedPaymentMethod, setLocalSelectedPaymentMethod] = useState(selectedPaymentMethod);

    // Refs para navegaci√≥n entre campos
    const companyNameRef = useRef(null);
    const cifRef = useRef(null);
    const addressRef = useRef(null);
    const phoneRef = useRef(null);
    const emailRef = useRef(null);
    const representativeNameRef = useRef(null);
    const representativeEmailRef = useRef(null);
    const representativeRoleRef = useRef(null);
    const businessTypeRef = useRef(null);
    const businessDescriptionRef = useRef(null);
    const websiteRef = useRef(null);

    const plans = [
      {
        id: 'plan3',
        name: 'Plan 3 meses',
        price: '‚Ç¨499/mes',
        duration: '3 meses',
        features: ['Acceso completo a la plataforma', 'Colaboraciones ilimitadas', 'Soporte prioritario', 'Analytics avanzados']
      },
      {
        id: 'plan6',
        name: 'Plan 6 meses',
        price: '‚Ç¨399/mes',
        duration: '6 meses',
        features: ['Acceso completo a la plataforma', 'Colaboraciones ilimitadas', 'Soporte est√°ndar', 'Analytics completos', 'Descuento del 20%']
      },
      {
        id: 'plan12',
        name: 'Plan 12 meses',
        price: '‚Ç¨299/mes',
        duration: '12 meses',
        features: ['Acceso completo a la plataforma', 'Colaboraciones ilimitadas', 'Soporte premium', 'Analytics completos', 'Descuento del 40%', 'Mejor valor']
      }
    ];

    // Sincronizar datos cuando cambie el estado padre
    React.useEffect(() => {
      setLocalRegistrationData(registrationData);
    }, [registrationData]);

    React.useEffect(() => {
      setLocalSelectedPaymentMethod(selectedPaymentMethod);
    }, [selectedPaymentMethod]);

    // Funci√≥n optimizada para actualizar campos
    const updateLocalField = useCallback((field, value) => {
      setLocalRegistrationData(prev => ({
        ...prev,
        [field]: value
      }));
    }, []);

    // Funci√≥n local para selecci√≥n de m√©todo de pago
    const handleLocalPaymentMethodSelection = useCallback((method) => {
      updateLocalField('paymentMethod', method.id);
      setLocalSelectedPaymentMethod(method);
    }, [updateLocalField]);

    // Funci√≥n local para manejar el registro de empresa
    const handleLocalCompanyRegistration = useCallback(() => {
      // Sincronizar estado local con estado padre antes de procesar
      setRegistrationData(localRegistrationData);
      setSelectedPaymentMethod(localSelectedPaymentMethod);
      // Llamar a la funci√≥n global despu√©s de un peque√±o delay para asegurar que el estado se actualice
      setTimeout(() => {
        handleCompanyRegistration();
      }, 100);
    }, [localRegistrationData, localSelectedPaymentMethod]);

  // Return corregido:     return (
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor="#000000" />
        <View style={styles.header}>
          <Image
            source={logoZyro}
            style={styles.headerLogo}
            resizeMode="contain"
          />
          <TouchableOpacity
            style={styles.headerCloseButton}
            onPress={() => setCurrentScreen('welcome')}
          >
            <Ionicons name="close" size={24} color="#C9A961" />
          </TouchableOpacity>
        </View>

        <ScrollView
          style={styles.registrationContainer}
          keyboardShouldPersistTaps="handled"
          showsVerticalScrollIndicator={false}
        >
          <Text style={styles.registrationTitle}>Registro de Empresa</Text>

          <View style={styles.formContainer}>
            {/* Informaci√≥n de la Empresa */}
            <Text style={styles.sectionTitle}>Informaci√≥n de la Empresa</Text>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Nombre de la empresa *</Text>
              <TextInput
                ref={companyNameRef}
                style={styles.formInput}
                placeholder="Nombre de tu empresa"
                placeholderTextColor="#888"
                value={localRegistrationData.companyName || ''}
                onChangeText={(text) => updateLocalField('companyName', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => cifRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>CIF/NIF *</Text>
              <TextInput
                ref={cifRef}
                style={styles.formInput}
                placeholder="CIF de la empresa"
                placeholderTextColor="#888"
                value={localRegistrationData.cif || ''}
                onChangeText={(text) => updateLocalField('cif', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => addressRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Direcci√≥n completa *</Text>
              <TextInput
                ref={addressRef}
                style={styles.formInput}
                placeholder="Direcci√≥n de la empresa"
                placeholderTextColor="#888"
                value={localRegistrationData.address || ''}
                onChangeText={(text) => updateLocalField('address', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => phoneRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Tel√©fono de la empresa *</Text>
              <TextInput
                ref={phoneRef}
                style={styles.formInput}
                placeholder="Tel√©fono corporativo"
                placeholderTextColor="#888"
                keyboardType="phone-pad"
                value={localRegistrationData.phone || ''}
                onChangeText={(text) => updateLocalField('phone', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => emailRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Email corporativo *</Text>
              <TextInput
                ref={emailRef}
                style={styles.formInput}
                placeholder="email@empresa.com"
                placeholderTextColor="#888"
                keyboardType="email-address"
                value={localRegistrationData.email || ''}
                onChangeText={(text) => updateLocalField('email', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => representativeNameRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>

            {/* Contacto y Representante */}
            <Text style={styles.sectionTitle}>Contacto y Representante</Text>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Nombre del representante *</Text>
              <TextInput
                ref={representativeNameRef}
                style={styles.formInput}
                placeholder="Nombre del contacto principal"
                placeholderTextColor="#888"
                value={localRegistrationData.contactName || ''}
                onChangeText={(text) => updateLocalField('contactName', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => representativeEmailRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Email del representante *</Text>
              <TextInput
                ref={representativeEmailRef}
                style={styles.formInput}
                placeholder="contacto@empresa.com"
                placeholderTextColor="#888"
                keyboardType="email-address"
                value={localRegistrationData.contactEmail || ''}
                onChangeText={(text) => updateLocalField('contactEmail', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => representativeRoleRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Cargo del representante *</Text>
              <TextInput
                ref={representativeRoleRef}
                style={styles.formInput}
                placeholder="Director de Marketing, CEO, etc."
                placeholderTextColor="#888"
                value={localRegistrationData.position || ''}
                onChangeText={(text) => updateLocalField('position', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => businessTypeRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>

            {/* Informaci√≥n del Negocio */}
            <Text style={styles.sectionTitle}>Informaci√≥n del Negocio</Text>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Tipo de negocio *</Text>
              <TextInput
                ref={businessTypeRef}
                style={styles.formInput}
                placeholder="Restaurante, Tienda de moda, Spa, etc."
                placeholderTextColor="#888"
                value={localRegistrationData.businessType || ''}
                onChangeText={(text) => updateLocalField('businessType', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => businessDescriptionRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Descripci√≥n del negocio *</Text>
              <TextInput
                ref={businessDescriptionRef}
                style={[styles.formInput, styles.textArea]}
                placeholder="Describe tu negocio y qu√© tipo de colaboraciones buscas..."
                placeholderTextColor="#888"
                multiline
                numberOfLines={4}
                value={localRegistrationData.description || ''}
                onChangeText={(text) => updateLocalField('description', text)}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => websiteRef.current?.focus()}
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Sitio web</Text>
              <TextInput
                ref={websiteRef}
                style={styles.formInput}
                placeholder="https://www.tuempresa.com (opcional)"
                placeholderTextColor="#888"
                value={localRegistrationData.website || ''}
                onChangeText={(text) => updateLocalField('website', text)}
                returnKeyType="done"
                onBlur={() => setRegistrationData(localRegistrationData)}
              />
            </View>

            {/* Plan de Suscripci√≥n */}
            <Text style={styles.sectionTitle}>Plan de Suscripci√≥n</Text>
            <Text style={styles.formLabel}>Selecciona tu plan *</Text>
            {plans.map((plan) => (
              <TouchableOpacity
                key={plan.id}
                style={[
                  styles.planCard,
                  localRegistrationData.selectedPlan === plan.id && styles.planCardSelected
                ]}
                onPress={() => {
                  updateLocalField('selectedPlan', plan.id);
                }}
              >
                <View style={styles.planHeader}>
                  <View style={styles.planTitleContainer}>
                    <Text style={styles.planName}>{plan.name}</Text>
                    <Text style={styles.planDuration}>{plan.duration}</Text>
                  </View>
                  <Text style={styles.planPrice}>{plan.price}</Text>
                </View>
                <View style={styles.planFeatures}>
                  {plan.features.map((feature, index) => (
                    <View key={index} style={styles.planFeature}>
                      <Ionicons name="checkmark" size={16} color="#4CAF50" />
                      <Text style={styles.planFeatureText}>{feature}</Text>
                    </View>
                  ))}
                </View>
              </TouchableOpacity>
            ))}

            {/* M√©todo de Pago */}
            <Text style={styles.sectionTitle}>M√©todo de Pago</Text>
            <Text style={styles.formLabel}>Selecciona tu m√©todo de pago preferido *</Text>
            <View style={styles.paymentMethodsContainer}>
              {paymentMethods.map((method) => (
                <TouchableOpacity
                  key={method.id}
                  style={[
                    styles.paymentMethod,
                    localRegistrationData.paymentMethod === method.id && styles.paymentMethodSelected
                  ]}
                  onPress={() => handleLocalPaymentMethodSelection(method)}
                >
                  <Ionicons name={method.icon} size={24} color="#C9A961" />
                  <Text style={styles.paymentMethodText}>{method.name}</Text>
                  {localRegistrationData.paymentMethod === method.id && (
                    <Ionicons name="checkmark-circle" size={20} color="#4CAF50" />
                  )}
                </TouchableOpacity>
              ))}
            </View>

            {/* Submit Button */}
            <TouchableOpacity
              style={styles.submitButton}
              onPress={handleLocalCompanyRegistration}
            >
              <Text style={styles.submitButtonText}>Finalizar Registro</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.backToWelcomeButton}
              onPress={() => setCurrentScreen('welcome')}
            >
              <Text style={styles.backToWelcomeButtonText}>‚Üê Volver</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </SafeAreaView>
    );
  });

  const WelcomeScreen = () => (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor="#000000" />
      <View style={styles.welcomeContainer}>
        <View style={styles.logoContainer}>
          <Image
            source={logoZyro}
            style={styles.welcomeLogo}
            resizeMode="contain"
          />
        </View>
        <Text style={styles.welcomeTitle}>Bienvenido</Text>
        <Text style={styles.welcomeSubtitle}>
          El marketplace premium que conecta influencers con marcas exclusivas
        </Text>

        <View style={styles.buttonContainer}>
          <TouchableOpacity
            style={styles.premiumButton}
            onPress={() => {
              setUserType('influencer');
              setRegistrationStep(1);
              setRegistrationData({});
              setCurrentScreen('influencerRegister');
            }}
          >
            <Text style={styles.buttonText}>SOY INFLUENCER</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.premiumButton}
            onPress={() => {
              setUserType('company');
              setRegistrationStep(1);
              setRegistrationData({});
              setCurrentScreen('companyRegister');
            }}
          >
            <Text style={styles.buttonText}>SOY EMPRESA</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.secondaryButton}
            onPress={() => setCurrentScreen('login')}
          >
            <Text style={styles.secondaryButtonText} numberOfLines={1}>¬øYa tienes cuenta? Inicia Sesi√≥n</Text>
          </TouchableOpacity>
        </View>
      </View>
    </SafeAreaView>
  );

  const LoginScreen = React.memo(() => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');

    // Refs para navegaci√≥n entre campos
    const emailRef = useRef(null);
    const passwordRef = useRef(null);

    const handleLogin = async () => {
      // Verificar credenciales usando el sistema din√°mico de contrase√±as
      const storedPassword = userPasswords[email];

      if (storedPassword && storedPassword === password) {
        // Detectar tipo de usuario basado en email
        if (email === 'admin_zyrovip') {
          setUserType('admin');
          setCurrentUser({ type: 'admin', name: 'Administrador ZYRO', email: email });
          setCurrentScreen('main');
          return;
        }

        // Credenciales para empresas
        if (email === 'empresa@zyro.com' || email === 'restaurante@elegance.com') {
          setUserType('company');

          // Buscar los datos completos de la empresa
          const companyData = registeredCompanies.find(c => c.email === email);
          const companyName = companyData ? companyData.name : 'Restaurante Elegance';

          const userData = {
            type: 'company',
            role: 'empresa',
            name: companyName,
            businessName: companyName,
            email: email,
            plan: companyData ? {
              name: companyData.plan,
              price: companyData.price,
              duration: companyData.duration || (companyData.plan.includes('3') ? '3 meses' :
                companyData.plan.includes('6') ? '6 meses' : '12 meses')
            } : null
          };

          setCurrentUser(userData);

          // Guardar usuario actual en AsyncStorage para persistencia
          try {
            await AsyncStorage.setItem('currentUser', JSON.stringify(userData));
          } catch (error) {
            console.error('Error guardando usuario actual:', error);
          }

          setCurrentScreen('main');
          return;
        }

        // Credenciales para influencers (usuarios predefinidos y registrados)
        if (email === 'nayades@gmail.com' || email === 'ana@gmail.com' || email === 'influencer@zyro.com') {
          setUserType('influencer');
          const userName = email === 'nayades@gmail.com' ? 'Nayades Influencer' : 'Ana Garc√≠a';
          setCurrentUser({
            type: 'influencer',
            name: userName,
            email: email
          });
          setCurrentScreen('main');
          return;
        }

        // Para cualquier otro email con contrase√±a v√°lida, verificar si es un influencer aprobado
        if (storedPassword) {
          // Verificar si el influencer est√° aprobado
          if (!approvedInfluencers.includes(email)) {
            Alert.alert(
              'Cuenta Pendiente de Aprobaci√≥n ‚è≥',
              'Tu cuenta de influencer est√° pendiente de aprobaci√≥n por el administrador.\n\nRecibir√°s una notificaci√≥n cuando sea aprobada.',
              [{ text: 'OK' }]
            );
            return;
          }

          setUserType('influencer');
          // Intentar obtener el nombre del usuario desde los datos guardados
          const getUserName = async () => {
            try {
              const key = `personalData_${email}`;
              const savedData = await AsyncStorage.getItem(key);
              if (savedData) {
                const parsedData = JSON.parse(savedData);
                return parsedData.fullName || 'Usuario Influencer';
              }
            } catch (error) {
              console.error('Error obteniendo nombre de usuario:', error);
            }
            return 'Usuario Influencer';
          };

          getUserName().then(userName => {
            setCurrentUser({
              type: 'influencer',
              name: userName,
              email: email
            });
            setCurrentScreen('main');
          });
          return;
        }
      }

      if (email && password) {
        Alert.alert(
          'Credenciales no v√°lidas',
          'Por favor, verifica tu email y contrase√±a e int√©ntalo de nuevo.'
        );
      } else {
        Alert.alert('Error', 'Por favor completa todos los campos');
      }
    };



  // Return corregido:     return (
      <SafeAreaView style={styles.container}>
        <View style={styles.header}>
          <Image
            source={logoZyro}
            style={styles.headerLogo}
            resizeMode="contain"
          />
          <TouchableOpacity
            style={styles.headerCloseButton}
            onPress={() => setCurrentScreen('welcome')}
          >
            <Ionicons name="close" size={24} color="#C9A961" />
          </TouchableOpacity>
        </View>

        <ScrollView style={styles.loginContainer}>
          <Text style={styles.loginTitle}>Iniciar Sesi√≥n</Text>
          <Text style={styles.loginSubtitle}>
            Acceso para Influencers y Empresas
          </Text>

          <View style={styles.formContainer}>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Email o Usuario</Text>
              <TextInput
                ref={emailRef}
                style={styles.formInput}
                placeholder="tu@email.com"
                placeholderTextColor="#666"
                value={email}
                onChangeText={setEmail}
                keyboardType="email-address"
                autoCapitalize="none"
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => passwordRef.current?.focus()}
              />
            </View>

            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Contrase√±a</Text>
              <TextInput
                ref={passwordRef}
                style={styles.formInput}
                placeholder="Tu contrase√±a"
                placeholderTextColor="#666"
                value={password}
                onChangeText={setPassword}
                secureTextEntry
                returnKeyType="done"
                onSubmitEditing={handleLogin}
              />
            </View>

            <TouchableOpacity style={styles.loginButton} onPress={handleLogin}>
              <Text style={styles.buttonText}>Iniciar Sesi√≥n</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.backButton}
              onPress={() => setCurrentScreen('welcome')}
            >
              <Text style={styles.backButtonText}>‚Üê Volver</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </SafeAreaView>
    );
  });

  const MainScreen = () => {
    // Si es usuario administrador, mostrar solo el dashboard de administrador
    if (userType === 'admin') {
      return (
        <SafeAreaView style={styles.container}>
          <StatusBar barStyle="light-content" backgroundColor="#000000" />

          <View style={styles.mainHeader}>
            <View style={styles.headerLeft}>
              <Image
                source={logoZyro}
                style={styles.mainHeaderLogo}
                resizeMode="contain"
              />
            </View>
            <View style={styles.headerRight}>
              <TouchableOpacity
                style={styles.headerButton}
                onPress={() => setShowNotifications(true)}
              >
                <Ionicons name="notifications-outline" size={24} color="#C9A961" />
              </TouchableOpacity>
            </View>
          </View>

          <View style={styles.tabContent}>
            <AdminDashboard />
          </View>

          {/* Modales para administrador */}
          <NotificationsModal />

          <CollaborationRequestsManagementModal />
          <CampaignManagementModal
            visible={showCampaignManagement}
            onClose={() => setShowCampaignManagement(false)}
            collaborations={collaborations}
            setCollaborations={setCollaborations}
            onEditCampaign={(campaign) => {
              setSelectedCampaign(campaign);
              setIsCreatingCampaign(false);
              setShowCampaignManagement(false); // Cerrar el modal de gesti√≥n
              setShowCampaignEditor(true);
            }}
            onCreateCampaign={() => {
              setSelectedCampaign(null);
              setIsCreatingCampaign(true);
              setShowCampaignManagement(false); // Cerrar el modal de gesti√≥n
              setShowCampaignEditor(true);
            }}
          />

          {/* Modal de gesti√≥n de empresas */}
          <CompanyManagementModal
            visible={showCompanyManagement}
            onClose={() => setShowCompanyManagement(false)}
          />

          {/* ‚úÖ NUEVOS MODALES: GESTI√ìN DE SOLICITUDES DE REGISTRO DE INFLUENCERS */}
          {showInfluencerRegistrationRequests && <InfluencerRegistrationRequestsModal />}
          {showApprovedInfluencers && <ApprovedInfluencersModal />}

          {/* Modal del editor de campa√±as - renderizado por separado para que aparezca por delante */}
          <CampaignEditorModal
            visible={showCampaignEditor}
            onClose={() => {
              setShowCampaignEditor(false);
              setShowCampaignManagement(true); // Volver a abrir el modal de gesti√≥n
            }}
            campaign={selectedCampaign}
            isCreating={isCreatingCampaign}
            onSave={async (campaign, isCreating) => {
              try {
                // Validar datos de la campa√±a antes de guardar
                if (!campaign.title || !campaign.business || !campaign.description) {
                  Alert.alert('Error', 'Faltan datos obligatorios en la campa√±a');
                  return;
                }

                // Asegurar que la campa√±a tenga un ID √∫nico
                if (!campaign.id) {
                  campaign.id = Date.now();
                }

                // Agregar metadatos de guardado
                const campaignToSave = {
                  ...campaign,
                  lastModified: new Date().toISOString(),
                  modifiedBy: 'admin',
                  version: '2.0'
                };

                if (isCreating) {
                  setCollaborations(prev => {
                    const newCollaborations = [...prev, campaignToSave];
                    console.log('‚úÖ Nueva campa√±a creada:', {
                      id: campaignToSave.id,
                      title: campaignToSave.title,
                      business: campaignToSave.business,
                      imagesCount: campaignToSave.images?.length || 0,
                      includesCount: campaignToSave.includes?.length || 0,
                      requirementsCount: campaignToSave.requirements?.length || 0
                    });
                    return newCollaborations;
                  });

                  // Forzar guardado inmediato para nuevas campa√±as
                  setTimeout(async () => {
                    await forceSaveCollaborations();
                  }, 100);

                  Alert.alert(
                    '‚úÖ Campa√±a Creada',
                    `"${campaignToSave.title}" ha sido creada correctamente y guardada permanentemente.\n\nLos influencers podr√°n verla inmediatamente en la aplicaci√≥n.`,
                    [{ text: 'Perfecto' }]
                  );
                } else {
                  setCollaborations(prev => {
                    const updatedCollaborations = prev.map(c =>
                      c.id === campaign.id ? campaignToSave : c
                    );
                    console.log('‚úÖ Campa√±a actualizada:', {
                      id: campaignToSave.id,
                      title: campaignToSave.title,
                      business: campaignToSave.business,
                      changes: 'Datos, im√°genes y configuraci√≥n actualizados'
                    });
                    return updatedCollaborations;
                  });

                  // Forzar guardado inmediato para actualizaciones
                  setTimeout(async () => {
                    await forceSaveCollaborations();
                  }, 100);

                  Alert.alert(
                    '‚úÖ Campa√±a Actualizada',
                    `"${campaignToSave.title}" ha sido actualizada correctamente y guardada permanentemente.\n\nTodos los cambios est√°n disponibles inmediatamente para los influencers.`,
                    [{ text: 'Perfecto' }]
                  );
                }

                setShowCampaignEditor(false);
                setShowCampaignManagement(true); // Volver a abrir el modal de gesti√≥n despu√©s de guardar
              } catch (error) {
                console.error('‚ùå Error guardando campa√±a:', error);
                Alert.alert(
                  'Error de Guardado',
                  'No se pudo guardar la campa√±a. Por favor, int√©ntalo de nuevo.',
                  [{ text: 'OK' }]
                );
              }
            }}
          />
        </SafeAreaView>
      );
    }

    // Si es usuario de empresa, mostrar solo el dashboard de empresa
    if (userType === 'company') {
      return (
        <SafeAreaView style={styles.container}>
          <StatusBar barStyle="light-content" backgroundColor="#000000" />

          <View style={styles.mainHeader}>
            <View style={styles.headerLeft}>
              <Image
                source={logoZyro}
                style={styles.mainHeaderLogo}
                resizeMode="contain"
              />
            </View>
            <View style={styles.headerRight}>
              <TouchableOpacity
                style={styles.headerButton}
                onPress={() => setShowNotifications(true)}
              >
                <Ionicons name="notifications-outline" size={24} color="#C9A961" />
              </TouchableOpacity>
            </View>
          </View>

          <View style={styles.tabContent}>
            <CompanyDashboard />
          </View>

          {/* Modales para empresas */}
          <NotificationsModal />
          <CollaborationDetailModal />
          <CompanyRequestsModal />
          <CompanyPersonalDataModal />
          <SubscriptionManagementModal />
          <PaymentMethodChangeModal />
          <CompanyProfilePhotoModal />
          <HelpSupportModal />
        </SafeAreaView>
      );
    }

    // Para influencers y otros usuarios, mantener la navegaci√≥n con tabs
    const renderTabContent = () => {
      switch (activeTab) {
        case 0:
          return <HomeTab />;
        case 1:
          return <MapTab />;
        case 2:
          return <HistoryTab />;
        case 3:
          return <ProfileTab />;
        default:
          return <HomeTab />;
      }
    };

  // Return corregido:     return (
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor="#000000" />

        <View style={styles.mainHeader}>
          <View style={styles.headerLeft}>
            <Image
              source={logoZyro}
              style={styles.mainHeaderLogo}
              resizeMode="contain"
            />
            {userType === 'influencer' && activeTab === 0 && (
              <TouchableOpacity
                style={styles.citySelector}
                onPress={() => setShowCityDropdown(!showCityDropdown)}
              >
                <Text style={styles.citySelectorText}>ZYRO {selectedCity.toUpperCase()}</Text>
                <Ionicons name="chevron-down" size={16} color="#C9A961" />
              </TouchableOpacity>
            )}


          </View>
          <View style={styles.headerRight}>
            <TouchableOpacity
              style={styles.headerButton}
              onPress={() => setShowNotifications(true)}
            >
              <Ionicons name="notifications-outline" size={24} color="#C9A961" />
            </TouchableOpacity>
          </View>
        </View>

        <View style={styles.tabContent}>
          {renderTabContent()}
        </View>

        {/* Solo mostrar barra de navegaci√≥n para usuarios que no sean empresas ni administradores */}
        {userType !== 'company' && userType !== 'admin' && (
          <View style={styles.bottomNav}>
            <TouchableOpacity
              style={[styles.navItem, activeTab === 0 && styles.activeNavItem]}
              onPress={() => setActiveTab(0)}
            >
              <Ionicons
                name={activeTab === 0 ? "home" : "home-outline"}
                size={24}
                color={activeTab === 0 ? "#C9A961" : "#666"}
              />
              <Text style={[styles.navLabel, activeTab === 0 && styles.activeNavLabel]}>
                Inicio
              </Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={[styles.navItem, activeTab === 1 && styles.activeNavItem]}
              onPress={() => setActiveTab(1)}
            >
              <Ionicons
                name={activeTab === 1 ? "map" : "map-outline"}
                size={24}
                color={activeTab === 1 ? "#C9A961" : "#666"}
              />
              <Text style={[styles.navLabel, activeTab === 1 && styles.activeNavLabel]}>
                Mapa
              </Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={[styles.navItem, activeTab === 2 && styles.activeNavItem]}
              onPress={() => setActiveTab(2)}
            >
              <Ionicons
                name={activeTab === 2 ? "time" : "time-outline"}
                size={24}
                color={activeTab === 2 ? "#C9A961" : "#666"}
              />
              <Text style={[styles.navLabel, activeTab === 2 && styles.activeNavLabel]}>
                Historial
              </Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={[styles.navItem, activeTab === 3 && styles.activeNavItem]}
              onPress={() => setActiveTab(3)}
            >
              <Ionicons
                name={activeTab === 3 ? "person" : "person-outline"}
                size={24}
                color={activeTab === 3 ? "#C9A961" : "#666"}
              />
              <Text style={[styles.navLabel, activeTab === 3 && styles.activeNavLabel]}>
                Perfil
              </Text>
            </TouchableOpacity>
          </View>
        )}

        <NotificationsModal />
        <SettingsModal />
        <CalendarModal />
        <CollaborationDetailModal />
        <ProfilePhotoModal />
        <PaymentModal />
        <PersonalDataModal />
        <PrivacyPolicyModal />
        <TermsOfUseModal />
        <PasswordSecurityModal />

        <HelpSupportModal />
        <ErrorBoundary>
          <InfluencerRegistrationManagementModal />
        </ErrorBoundary>
        <CitySelectionModal />
      </SafeAreaView>
    );
  };
  const HomeTab = () => {
    if (userType === 'influencer') {
      return (
        <ScrollView style={styles.homeTab}>
          {/* Selector de categor√≠as deslizable horizontal */}
          <View style={styles.categoryButtonsContainer}>
            <View style={styles.categoryRow}>
              <Text style={styles.categoryLabel}>Categor√≠as</Text>
              <ScrollView
                horizontal
                showsHorizontalScrollIndicator={false}
                style={styles.categoryScrollView}
                contentContainerStyle={styles.categoryScrollContent}
              >
                {categories.map((category) => (
                  <TouchableOpacity
                    key={category}
                    style={[
                      styles.categoryButton,
                      selectedCategory === category && styles.categoryButtonSelected
                    ]}
                    onPress={() => setSelectedCategory(category)}
                  >
                    <Text style={[
                      styles.categoryButtonText,
                      selectedCategory === category && styles.categoryButtonTextSelected
                    ]}>
                      {category}
                    </Text>
                  </TouchableOpacity>
                ))}
              </ScrollView>
            </View>
          </View>

          {/* Lista de colaboraciones */}
          <View style={styles.collaborationsList}>
            {collaborations
              .filter(collab =>
                (selectedCity === 'Todos' || collab.city === selectedCity) &&
                (selectedCategory === 'Todos' || collab.category === selectedCategory)
              )
              .map((collab) => (
                <CollaborationCard key={collab.id} collaboration={collab} />
              ))}
          </View>
        </ScrollView>
      );
    } else {
      return userType === 'company' ? <CompanyDashboard /> : <AdminDashboard />;
    }
  };

  const MapTab = () => (
    <View style={styles.mapTab}>
      <InteractiveMap collaborations={collaborations} />
    </View>
  );

  const HistoryTab = () => {
    const [activeHistoryTab, setActiveHistoryTab] = useState('upcoming');

    // Obtener colaboraciones del influencer actual
    const safeCollaborations = Array.isArray(influencerCollaborations) ? influencerCollaborations : [];
    const currentInfluencerCollaborations = safeCollaborations.filter(
      collab => collab.influencerEmail === currentUser?.email
    );

    // Funci√≥n para obtener la fecha de una colaboraci√≥n (maneja diferentes campos de fecha)
    const getCollaborationDate = (collab) => {
      // Priorizar diferentes campos de fecha que pueden existir
      const dateField = collab.date || collab.requestedDate || collab.requestDate;
      if (!dateField) return null;

      try {
        const date = new Date(dateField);
        return isNaN(date.getTime()) ? null : date;
      } catch (error) {
        console.warn('Error parsing date:', dateField, error);
        return null;
      }
    };

    // Funci√≥n para determinar si una fecha es futura o pasada
    const isDateInFuture = (collab) => {
      const collaborationDate = getCollaborationDate(collab);
      if (!collaborationDate) return true; // Si no hay fecha, considerarlo futuro por defecto

      const today = new Date();
      today.setHours(0, 0, 0, 0);
      return collaborationDate >= today;
    };

    // Organizar colaboraciones por estado seg√∫n los criterios correctos
    const organizedCollaborations = {
      // PR√ìXIMOS: Solicitudes pendientes + Colaboraciones aprobadas con fecha futura
      upcoming: currentInfluencerCollaborations.filter(collab => {
        if (collab.status === 'pending') return true; // Todas las pendientes
        if (collab.status === 'approved') return isDateInFuture(collab); // Solo aprobadas futuras
  // Return corregido:         return false;
      }),
      // PASADOS: Solo colaboraciones aprobadas cuya fecha ya pas√≥
      past: currentInfluencerCollaborations.filter(collab =>
        collab.status === 'approved' && !isDateInFuture(collab)
      ),
      // CANCELADOS: Solo solicitudes rechazadas por el administrador
      cancelled: currentInfluencerCollaborations.filter(collab =>
        collab.status === 'rejected'
      )
    };

    // Debug: Log para entender la organizaci√≥n de colaboraciones
    console.log('üîç DEBUG Historial Influencer:', {
      totalCollaborations: currentInfluencerCollaborations.length,
      upcoming: organizedCollaborations.upcoming.length,
      past: organizedCollaborations.past.length,
      cancelled: organizedCollaborations.cancelled.length,
      collaborationsData: currentInfluencerCollaborations.map(collab => ({
        id: collab.id,
        status: collab.status,
        date: collab.date || collab.requestedDate || collab.requestDate,
        business: collab.business || collab.businessName,
        title: collab.title || collab.collaborationTitle
      }))
    });

    const renderCollaborationHistory = (collaboration) => {
      // Extraer informaci√≥n de manera segura con fallbacks
      const businessName = collaboration.business || collaboration.businessName || 'Restaurante';
      const campaignTitle = collaboration.title || collaboration.collaborationTitle || 'Colaboraci√≥n';
      const category = collaboration.category || collaboration.businessCategory || '';
      const time = collaboration.time || collaboration.requestedTime || 'Hora no especificada';
      const city = collaboration.city || collaboration.influencerCity || 'Ciudad no especificada';

      // Formatear la fecha para mostrar usando la funci√≥n segura
      const collaborationDate = getCollaborationDate(collaboration);
      const formattedDate = collaborationDate
        ? collaborationDate.toLocaleDateString('es-ES', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
        })
        : 'Fecha no disponible';

      // Determinar el estado visual
      const getStatusInfo = (status) => {
        switch (status) {
          case 'approved':
            return { text: 'Confirmada', style: 'statusConfirmed', color: '#4CAF50' };
          case 'pending':
            return { text: 'Pendiente', style: 'statusPending', color: '#FFA500' };
          case 'rejected':
            return { text: 'Cancelada', style: 'statusCancelled', color: '#F44336' };
          default:
            return { text: 'Desconocido', style: 'statusPending', color: '#757575' };
        }
      };

      const statusInfo = getStatusInfo(collaboration.status);

  // Return corregido:       return (
        <View key={collaboration.id} style={styles.historyItem}>
          <View style={styles.historyItemHeader}>
            <Text style={styles.historyItemTitle}>{businessName}</Text>
            <View style={[styles.statusBadge, { backgroundColor: statusInfo.color }]}>
              <Text style={styles.statusText}>{statusInfo.text}</Text>
            </View>
          </View>

          <Text style={styles.historyItemBusiness}>{campaignTitle}</Text>

          {category && (
            <Text style={styles.historyItemCategory}>{category}</Text>
          )}

          <View style={styles.historyItemDetails}>
            <View style={styles.historyDetailItem}>
              <Ionicons name="calendar-outline" size={16} color="#C9A961" />
              <Text style={styles.historyDetailText}>{formattedDate}</Text>
            </View>
            <View style={styles.historyDetailItem}>
              <Ionicons name="time-outline" size={16} color="#C9A961" />
              <Text style={styles.historyDetailText}>{time}</Text>
            </View>
            <View style={styles.historyDetailItem}>
              <Ionicons name="location-outline" size={16} color="#C9A961" />
              <Text style={styles.historyDetailText}>{city}</Text>
            </View>
          </View>



          {collaboration.status === 'pending' && (
            <View style={styles.pendingInfo}>
              <Ionicons name="hourglass-outline" size={16} color="#FFA500" />
              <Text style={styles.pendingInfoText}>
                Esperando aprobaci√≥n del administrador
              </Text>
            </View>
          )}

          {collaboration.status === 'rejected' && (
            <View style={styles.rejectedInfo}>
              <Ionicons name="close-circle-outline" size={16} color="#F44336" />
              <Text style={styles.rejectedInfoText}>
                Solicitud no aprobada por el administrador
              </Text>
            </View>
          )}
        </View>
      );
    };

  // Return corregido:     return (
      <ScrollView style={styles.historyTab}>
        <View style={styles.historyHeader}>
          <Text style={styles.sectionTitle}>Historial de Colaboraciones</Text>
        </View>

        <View style={styles.historyTabs}>
          <TouchableOpacity
            style={[styles.historyTabButton, activeHistoryTab === 'upcoming' && styles.activeHistoryTab]}
            onPress={() => setActiveHistoryTab('upcoming')}
          >
            <Text style={[styles.historyTabText, activeHistoryTab === 'upcoming' && styles.activeHistoryTabText]}>
              PR√ìXIMOS{'\n'}({organizedCollaborations.upcoming.length})
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.historyTabButton, activeHistoryTab === 'past' && styles.activeHistoryTab]}
            onPress={() => setActiveHistoryTab('past')}
          >
            <Text style={[styles.historyTabText, activeHistoryTab === 'past' && styles.activeHistoryTabText]}>
              PASADOS{'\n'}({organizedCollaborations.past.length})
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[styles.historyTabButton, activeHistoryTab === 'cancelled' && styles.activeHistoryTab]}
            onPress={() => setActiveHistoryTab('cancelled')}
          >
            <Text style={[styles.historyTabText, activeHistoryTab === 'cancelled' && styles.activeHistoryTabText]}>
              CANCELADOS{'\n'}({organizedCollaborations.cancelled.length})
            </Text>
          </TouchableOpacity>
        </View>

        <View style={styles.historyContent}>
          {organizedCollaborations[activeHistoryTab] && organizedCollaborations[activeHistoryTab].length > 0 ? (
            organizedCollaborations[activeHistoryTab]
              .sort((a, b) => new Date(b.requestDate) - new Date(a.requestDate)) // Ordenar por fecha de solicitud m√°s reciente
              .map(renderCollaborationHistory)
          ) : (
            <View style={styles.emptyState}>
              <Ionicons
                name={
                  activeHistoryTab === 'upcoming' ? 'calendar-outline' :
                    activeHistoryTab === 'past' ? 'checkmark-circle-outline' :
                      'close-circle-outline'
                }
                size={64}
                color="#666"
              />
              <Text style={styles.emptyStateText}>
                {activeHistoryTab === 'upcoming' ? 'No tienes colaboraciones pr√≥ximas' :
                  activeHistoryTab === 'past' ? 'No tienes colaboraciones realizadas' :
                    'No tienes colaboraciones canceladas'}
              </Text>
              <Text style={styles.emptyStateSubtext}>
                {activeHistoryTab === 'upcoming' ? 'Las solicitudes pendientes y colaboraciones aprobadas futuras aparecer√°n aqu√≠' :
                  activeHistoryTab === 'past' ? 'Las colaboraciones ya realizadas (aprobadas y pasadas) aparecer√°n aqu√≠' :
                    'Las solicitudes rechazadas por el administrador aparecer√°n aqu√≠'}
              </Text>
            </View>
          )}
        </View>
      </ScrollView>
    );
  };

  const ProfileTab = () => {
    if (currentUser?.type === 'admin') {
      return <AdminDashboard />;
    } else if (currentUser?.type === 'company') {
      return <CompanyDashboard />;
    } else {
      return <InfluencerProfile />;
    }
  };

  const CollaborationCard = ({ collaboration }) => (
    <TouchableOpacity
      style={styles.collaborationCard}
      onPress={() => showCollaborationDetails(collaboration)}
    >
      <View style={styles.cardImage}>
        {collaboration.images && collaboration.images.length > 0 ? (
          <Image
            source={{ uri: collaboration.images[0] }}
            style={styles.cardImageBackground}
            resizeMode="cover"
            onError={() => console.log('Error cargando imagen:', collaboration.images[0])}
          />
        ) : (
          <View style={styles.cardImagePlaceholder}>
            <Ionicons name="image-outline" size={40} color="#000000" style={{ opacity: 0.3 }} />
          </View>
        )}
        <View style={styles.categoryBadge}>
          <Text style={styles.categoryBadgeText}>{collaboration.category}</Text>
        </View>
        <View style={styles.cardImageOverlay}>
          <Text style={styles.cardBusinessName}>{collaboration.business}</Text>
          <Text style={styles.cardImageText}>{collaboration.title}</Text>
        </View>
      </View>

      <View style={styles.cardContent}>
        <View style={styles.cardInfo}>
          <View style={styles.infoItem}>
            <Ionicons name="people-outline" size={16} color="#C9A961" />
            <Text style={styles.infoText}>{collaboration.followers.toLocaleString()} min</Text>
          </View>
          <View style={styles.infoItem}>
            <Ionicons name="person-add-outline" size={16} color="#C9A961" />
            <Text style={styles.infoText}>+{collaboration.companions}</Text>
          </View>
        </View>

        <View style={styles.cardFooter}>
          <View style={styles.locationInfo}>
            <Ionicons name="location-outline" size={16} color="#999" />
            <Text style={styles.locationText}>{collaboration.city}</Text>
          </View>
          <TouchableOpacity
            style={styles.viewDetailsBtn}
            onPress={() => showCollaborationDetails(collaboration)}
          >
            <Text style={styles.viewDetailsBtnText}>Ver Detalles</Text>
            <Ionicons name="arrow-forward" size={16} color="#000" />
          </TouchableOpacity>
        </View>
      </View>
    </TouchableOpacity>
  );

  const InfluencerProfile = () => (
    <ScrollView style={styles.profileTab}>
      <View style={styles.profileHeader}>
        <TouchableOpacity
          style={styles.profileAvatar}
          onPress={() => setShowProfilePhoto(true)}
        >
          {profilePhotoUri ? (
            <Image
              source={{ uri: profilePhotoUri }}
              style={styles.profileAvatarImage}
            />
          ) : (
            <Ionicons name="person" size={32} color="#C9A961" />
          )}
          <View style={styles.cameraIcon}>
            <Ionicons name="camera" size={16} color="#000" />
          </View>
        </TouchableOpacity>
        <Text style={styles.profileName}>{personalData.fullName}</Text>
        <Text style={styles.profileRole}>Influencer</Text>
        <Text style={styles.profileUsername}>{personalData.instagram}</Text>
      </View>

      <View style={styles.profileStats}>
        <View style={styles.statCard}>
          <Text style={styles.statValue}>12</Text>
          <Text style={styles.statLabel}>Colaboraciones</Text>
        </View>
        <View style={styles.statCard}>
          <Text style={styles.statValue}>
            {personalData.instagramFollowers ?
              (parseInt(personalData.instagramFollowers) >= 1000000 ?
                `${(parseInt(personalData.instagramFollowers) / 1000000).toFixed(1)}M` :
                parseInt(personalData.instagramFollowers) >= 1000 ?
                  `${(parseInt(personalData.instagramFollowers) / 1000).toFixed(0)}K` :
                  personalData.instagramFollowers
              ) : '0'
            }
          </Text>
          <Text style={styles.statLabel}>Seguidores</Text>
        </View>
      </View>



      <View style={styles.profileActions}>
        <TouchableOpacity
          style={styles.menuItem}
          onPress={() => setShowProfilePhoto(true)}
        >
          <View style={styles.menuItemLeft}>
            <Ionicons name="camera-outline" size={20} color="#C9A961" />
            <Text style={styles.menuItemText}>Actualizar Foto de Perfil</Text>
          </View>
          <Ionicons name="chevron-forward" size={20} color="#666" />
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.menuItem}
          onPress={() => setShowPersonalData(true)}
        >
          <View style={styles.menuItemLeft}>
            <Ionicons name="person-outline" size={20} color="#C9A961" />
            <Text style={styles.menuItemText}>Datos Personales</Text>
          </View>
          <Ionicons name="chevron-forward" size={20} color="#666" />
        </TouchableOpacity>


        <TouchableOpacity
          style={styles.menuItem}
          onPress={() => setShowTermsOfUse(true)}
        >
          <View style={styles.menuItemLeft}>
            <Ionicons name="document-text-outline" size={20} color="#C9A961" />
            <Text style={styles.menuItemText}>Normas de Uso</Text>
          </View>
          <Ionicons name="chevron-forward" size={20} color="#666" />
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.menuItem}
          onPress={() => setShowPrivacyPolicy(true)}
        >
          <View style={styles.menuItemLeft}>
            <Ionicons name="shield-outline" size={20} color="#C9A961" />
            <Text style={styles.menuItemText}>Pol√≠tica de Privacidad</Text>
          </View>
          <Ionicons name="chevron-forward" size={20} color="#666" />
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.menuItem}
          onPress={() => setShowPasswordSecurity(true)}
        >
          <View style={styles.menuItemLeft}>
            <Ionicons name="lock-closed-outline" size={20} color="#C9A961" />
            <Text style={styles.menuItemText}>Contrase√±a y Seguridad</Text>
          </View>
          <Ionicons name="chevron-forward" size={20} color="#666" />
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.menuItem}
          onPress={() => setShowHelpSupport(true)}
        >
          <View style={styles.menuItemLeft}>
            <Ionicons name="help-circle-outline" size={20} color="#C9A961" />
            <Text style={styles.menuItemText}>Ayuda y Soporte</Text>
          </View>
          <Ionicons name="chevron-forward" size={20} color="#666" />
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.menuItem, styles.logoutItem]}
          onPress={() => {
            Alert.alert(
              'Cerrar Sesi√≥n',
              '¬øEst√°s seguro de que quieres cerrar sesi√≥n?',
              [
                { text: 'Cancelar', style: 'cancel' },
                {
                  text: 'Cerrar Sesi√≥n',
                  style: 'destructive',
                  onPress: () => {
                    setCurrentUser(null);
                    setUserType(null);
                    setCurrentScreen('welcome');
                  }
                }
              ]
            );
          }}
        >
          <View style={styles.menuItemLeft}>
            <Ionicons name="log-out-outline" size={20} color="#FF6B6B" />
            <Text style={[styles.menuItemText, { color: '#FF6B6B' }]}>Cerrar Sesi√≥n</Text>
          </View>
          <Ionicons name="chevron-forward" size={20} color="#FF6B6B" />
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.menuItem, styles.deleteAccountItem]}
          onPress={() => {
            Alert.alert(
              'Borrar Cuenta',
              'Esta acci√≥n eliminar√° permanentemente tu cuenta y todos tus datos. Esta acci√≥n no se puede deshacer.',
              [
                { text: 'Cancelar', style: 'cancel' },
                {
                  text: 'Borrar Cuenta',
                  style: 'destructive',
                  onPress: () => {
                    Alert.alert(
                      'Cuenta Eliminada',
                      'Tu cuenta ha sido eliminada seg√∫n el GDPR. Todos tus datos han sido borrados.',
                      [{ text: 'OK', onPress: () => setCurrentScreen('welcome') }]
                    );
                  }
                }
              ]
            );
          }}
        >
          <View style={styles.menuItemLeft}>
            <Ionicons name="trash-outline" size={20} color="#FF4444" />
            <Text style={[styles.menuItemText, { color: '#FF4444' }]}>Borrar Cuenta (GDPR)</Text>
          </View>
          <Ionicons name="chevron-forward" size={20} color="#FF4444" />
        </TouchableOpacity>
      </View>
    </ScrollView>
  );

  // Funci√≥n para obtener las solicitudes espec√≠ficas de la empresa actual
  const getCompanyRequests = () => {
    if (!currentUser?.businessName || !currentUser?.email) return [];

    const businessName = currentUser.businessName;
    const businessEmail = currentUser.email;

    // Filtrar solicitudes de influencers que corresponden espec√≠ficamente a esta empresa
    const safeCollaborations = Array.isArray(influencerCollaborations) ? influencerCollaborations : [];
    const companySpecificRequests = safeCollaborations.filter(collab => {
      // Verificar por nombre de negocio
      if (collab.business === businessName) return true;

      // Verificar por email de empresa si est√° disponible
      if (collab.companyEmail === businessEmail) return true;

      // Verificar por colaboraci√≥n personalizada
      if (collab.collaboration?.companyEmail === businessEmail) return true;

      // Verificar por ID de colaboraci√≥n personalizada
      const companyCollabId = `company_${businessEmail.replace(/[^a-zA-Z0-9]/g, '_')}`;
      if (collab.collaborationId === companyCollabId) return true;

      return false;
    });

    // Convertir a formato de solicitudes para mostrar en la UI
  // Return corregido:     return companySpecificRequests.map(collab => ({
      id: collab.id,
      influencerName: collab.influencerName || 'Influencer',
      influencerEmail: collab.influencerEmail,
      influencerFollowers: collab.influencerFollowers || 0,
      collaborationTitle: collab.title,
      collaborationId: collab.collaborationId,
      businessName: businessName,
      requestedDate: collab.date,
      requestedTime: collab.time,
      requestDate: collab.requestDate,
      message: `Solicitud de colaboraci√≥n para ${businessName}`,
      status: collab.status || 'pending'
    }));
  };

  // Funci√≥n para obtener o crear la colaboraci√≥n espec√≠fica de la empresa
  const getCompanyCollaboration = () => {
    if (!currentUser?.businessName || !currentUser?.email) return null;

    const businessName = currentUser.businessName;
    const businessEmail = currentUser.email;

    // Buscar colaboraci√≥n existente que coincida exactamente con la empresa
    let matchedCollaboration = collaborations.find(collab =>
      collab.business === businessName ||
      collab.business.toLowerCase() === businessName.toLowerCase()
    );

    // Si no existe, crear una colaboraci√≥n personalizada basada en los datos de registro
    if (!matchedCollaboration) {
      const companyData = registeredCompanies.find(company => company.email === businessEmail);

      if (companyData) {
        // Crear colaboraci√≥n din√°mica basada en los datos de la empresa
        matchedCollaboration = {
          id: `company_${businessEmail.replace(/[^a-zA-Z0-9]/g, '_')}`,
          title: `Experiencia en ${businessName}`,
          business: businessName,
          category: currentUser.businessType || 'Restaurantes',
          city: currentUser.city || 'Madrid',
          followers: currentUser.minFollowers || 5000,
          companions: currentUser.maxCompanions || 2,
          description: currentUser.businessDescription || `Experiencia √∫nica en ${businessName}. Descubre lo mejor que tenemos para ofrecer.`,
          location: {
            latitude: 40.4168,
            longitude: -3.7038
          },
          address: currentUser.businessAddress || `${businessName}, ${currentUser.city || 'Madrid'}`,
          phone: currentUser.businessPhone || '+34 900 000 000',
          images: [
            'https://via.placeholder.com/400x300/C9A961/000000?text=' + encodeURIComponent(businessName + ' 1'),
            'https://via.placeholder.com/400x300/C9A961/000000?text=' + encodeURIComponent(businessName + ' 2'),
            'https://via.placeholder.com/400x300/C9A961/000000?text=' + encodeURIComponent(businessName + ' 3')
          ],
          includes: currentUser.offerIncludes || [
            'Experiencia completa',
            'Servicio premium',
            'Atenci√≥n personalizada'
          ],
          requirements: currentUser.contentRequirements || [
            '2 historias de Instagram',
            '1 post en feed',
            `Mencionar @${businessName.toLowerCase().replace(/\s+/g, '_')}`
          ],
          adminInfo: `Colaboraci√≥n gestionada por ${businessName}. Contacto: ${businessEmail}`,
          timeSlots: currentUser.availableHours || ['12:00', '13:00', '14:00', '19:00', '20:00', '21:00'],
          isCustomCompany: true,
          companyEmail: businessEmail
        };
      }
    }

    return matchedCollaboration;
  };

  const CompanyDashboard = () => {
    const companyCollaboration = getCompanyCollaboration();

    return (
      <ScrollView style={styles.profileTab}>
        <View style={styles.companyHeader}>
          <TouchableOpacity
            style={styles.companyAvatar}
            onPress={() => setShowCompanyProfilePhoto(true)}
          >
            {companyProfilePhotoUri ? (
              <Image
                source={{ uri: companyProfilePhotoUri }}
                style={styles.companyAvatarImage}
              />
            ) : (
              <Ionicons name="business" size={24} color="#000" />
            )}
          </TouchableOpacity>
          <Text style={styles.companyName}>{currentUser?.businessName || 'Mi Empresa'}</Text>
          <Text style={styles.companyPlan}>
            {subscriptionData?.currentPlan || currentUser?.plan?.name || 'Plan 6 meses'}
          </Text>
          <Text style={styles.companyDetails}>
            {currentUser?.businessType || 'Restaurante'} ‚Ä¢ {currentUser?.city || 'Madrid'}
          </Text>
          <View style={styles.statusBadge}>
            <Text style={styles.statusBadgeText}>
              {subscriptionData?.status === 'active' ? 'ACTIVA' : 'ACTIVA'}
            </Text>
          </View>
        </View>

        <View style={styles.myCampaigns}>
          <Text style={styles.sectionTitle}>Mi Anuncio de Colaboraci√≥n</Text>

          {companyCollaboration ? (
            <View style={styles.campaignCard}>
              <View style={styles.campaignHeader}>
                <View>
                  <Text style={styles.campaignTitle}>{companyCollaboration.business}</Text>
                  <Text style={styles.campaignBusiness}>{companyCollaboration.title}</Text>
                </View>
                <View style={[styles.statusBadge, { backgroundColor: '#4CAF50' }]}>
                  <Text style={styles.statusBadgeText}>ACTIVA</Text>
                </View>
              </View>
              <View style={styles.campaignInfo}>
                <View style={styles.campaignInfoItem}>
                  <Ionicons name="people-outline" size={16} color="#C9A961" />
                  <Text style={styles.campaignInfoText}>
                    {companyCollaboration.followers?.toLocaleString()} min
                  </Text>
                </View>
                <View style={styles.campaignInfoItem}>
                  <Ionicons name="person-add-outline" size={16} color="#C9A961" />
                  <Text style={styles.campaignInfoText}>
                    +{companyCollaboration.companions}
                  </Text>
                </View>
              </View>
              <TouchableOpacity
                style={styles.campaignDetailsBtn}
                onPress={() => {
                  setSelectedCollaboration(companyCollaboration);
                  setShowCollaborationDetail(true);
                }}
              >
                <Text style={styles.campaignDetailsBtnText}>Ver Detalles</Text>
              </TouchableOpacity>
            </View>
          ) : (
            <View style={styles.campaignCard}>
              <View style={styles.campaignHeader}>
                <View>
                  <Text style={styles.campaignTitle}>{currentUser?.businessName || 'Mi Empresa'}</Text>
                  <Text style={styles.campaignBusiness}>Sin colaboraci√≥n asignada</Text>
                </View>
                <View style={[styles.statusBadge, { backgroundColor: '#FF9800' }]}>
                  <Text style={styles.statusBadgeText}>PENDIENTE</Text>
                </View>
              </View>
              <Text style={styles.campaignDetails}>
                Contacta con el administrador para configurar tu colaboraci√≥n
              </Text>
            </View>
          )}
        </View>

        <View style={styles.quickActions}>
          <Text style={styles.sectionTitle}>Acciones R√°pidas</Text>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => setShowCompanyRequests(true)}
          >
            <View style={styles.menuItemLeft}>
              <Ionicons name="people" size={20} color="#C9A961" />
              <Text style={styles.menuItemText}>Ver Todas las Solicitudes</Text>
            </View>
            <Ionicons name="chevron-forward" size={20} color="#666" />
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => setShowSubscriptionManagement(true)}
          >
            <View style={styles.menuItemLeft}>
              <Ionicons name="card" size={20} color="#C9A961" />
              <Text style={styles.menuItemText}>Gestionar Suscripci√≥n</Text>
            </View>
            <Ionicons name="chevron-forward" size={20} color="#666" />
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => {
              Alert.prompt(
                'Cambiar Contrase√±a de Empresa',
                'Ingresa tu contrase√±a actual:',
                [
                  {
                    text: 'Cancelar',
                    style: 'cancel'
                  },
                  {
                    text: 'Continuar',
                    onPress: (currentPassword) => {
                      if (!currentPassword) {
                        Alert.alert('Error', 'Debes ingresar tu contrase√±a actual');
                        return;
                      }

                      // Verificar contrase√±a actual
                      const storedPassword = userPasswords[currentUser?.email];
                      if (currentPassword !== storedPassword) {
                        Alert.alert('Error', 'La contrase√±a actual es incorrecta');
                        return;
                      }

                      // Pedir nueva contrase√±a
                      Alert.prompt(
                        'Nueva Contrase√±a',
                        'Ingresa tu nueva contrase√±a (m√≠nimo 6 caracteres):',
                        [
                          {
                            text: 'Cancelar',
                            style: 'cancel'
                          },
                          {
                            text: 'Continuar',
                            onPress: (newPassword) => {
                              if (!newPassword || newPassword.length < 6) {
                                Alert.alert('Error', 'La nueva contrase√±a debe tener al menos 6 caracteres');
                                return;
                              }

                              if (newPassword === currentPassword) {
                                Alert.alert('Error', 'La nueva contrase√±a debe ser diferente a la actual');
                                return;
                              }

                              // Confirmar nueva contrase√±a
                              Alert.prompt(
                                'Confirmar Contrase√±a',
                                'Confirma tu nueva contrase√±a:',
                                [
                                  {
                                    text: 'Cancelar',
                                    style: 'cancel'
                                  },
                                  {
                                    text: 'Actualizar',
                                    onPress: async (confirmPassword) => {
                                      if (newPassword !== confirmPassword) {
                                        Alert.alert('Error', 'Las contrase√±as no coinciden');
                                        return;
                                      }

                                      // Actualizar contrase√±a usando funci√≥n centralizada
                                      const success = await updateUserPassword(currentUser.email, newPassword);

                                      if (success) {
                                        Alert.alert(
                                          '‚úÖ Contrase√±a Actualizada',
                                          'Tu contrase√±a de empresa ha sido cambiada exitosamente y guardada permanentemente. Usa la nueva contrase√±a en tu pr√≥ximo inicio de sesi√≥n.'
                                        );
                                      } else {
                                        Alert.alert('Error', 'No se pudo actualizar la contrase√±a. Int√©ntalo de nuevo.');
                                      }
                                    }
                                  }
                                ],
                                'secure-text'
                              );
                            }
                          }
                        ],
                        'secure-text'
                      );
                    }
                  }
                ],
                'secure-text'
              );
            }}
          >
            <View style={styles.menuItemLeft}>
              <Ionicons name="lock-closed-outline" size={20} color="#C9A961" />
              <Text style={styles.menuItemText}>Cambiar Contrase√±a de Empresa</Text>
            </View>
            <Ionicons name="chevron-forward" size={20} color="#666" />
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => setShowCompanyPersonalData(true)}
          >
            <View style={styles.menuItemLeft}>
              <Ionicons name="person-outline" size={20} color="#C9A961" />
              <Text style={styles.menuItemText}>Datos Personales</Text>
            </View>
            <Ionicons name="chevron-forward" size={20} color="#666" />
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => setShowHelpSupport(true)}
          >
            <View style={styles.menuItemLeft}>
              <Ionicons name="help-circle" size={20} color="#C9A961" />
              <Text style={styles.menuItemText}>Soporte y Ayuda</Text>
            </View>
            <Ionicons name="chevron-forward" size={20} color="#666" />
          </TouchableOpacity>
        </View>

        {/* Bot√≥n de cerrar sesi√≥n */}
        <View style={styles.logoutSection}>
          <TouchableOpacity
            style={styles.logoutButton}
            onPress={() => {
              handleLogout();
              setCurrentScreen('welcome');
              setActiveTab(0);
            }}
          >
            <Ionicons name="log-out-outline" size={20} color="#FF4444" />
            <Text style={styles.logoutButtonText}>Cerrar Sesi√≥n</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    );
  };

  // Componente AdminDashboard
  const AdminDashboard = () => {
    return (
      <ScrollView style={styles.profileTab}>
        <View style={styles.companyHeader}>
          <View style={styles.companyAvatar}>
            <Ionicons name="shield-checkmark" size={24} color="#000" />
          </View>
          <Text style={styles.companyName}>Panel de Administrador</Text>
          <Text style={styles.companyPlan}>ZYRO Admin</Text>
          <Text style={styles.companyDetails}>Gesti√≥n del Sistema</Text>
          <View style={styles.statusBadge}>
            <Text style={styles.statusBadgeText}>ADMIN</Text>
          </View>
        </View>

        <View style={styles.quickActions}>
          <Text style={styles.sectionTitle}>Gesti√≥n del Sistema</Text>



          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => setShowCollaborationRequestsManagement(true)}
          >
            <View style={styles.menuItemLeft}>
              <Ionicons name="people" size={20} color="#C9A961" />
              <Text style={styles.menuItemText}>Gesti√≥n de Solicitudes de Colaboraci√≥n</Text>
            </View>
            <View style={styles.menuItemRight}>
              {pendingAdminRequests.length > 0 && (
                <View style={styles.notificationBadge}>
                  <Text style={styles.notificationBadgeText}>{pendingAdminRequests.length}</Text>
                </View>
              )}
              <Ionicons name="chevron-forward" size={20} color="#666" />
            </View>
          </TouchableOpacity>

          {/* ‚úÖ NUEVO BOT√ìN: SOLICITUDES DE REGISTRO DE INFLUENCERS */}
          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => setShowInfluencerRegistrationRequests(true)}
          >
            <View style={styles.menuItemLeft}>
              <Ionicons name="person-add" size={20} color="#C9A961" />
              <Text style={styles.menuItemText}>Solicitudes de Registro de Influencers</Text>
            </View>
            <View style={styles.menuItemRight}>
              {pendingInfluencers.length > 0 && (
                <View style={styles.notificationBadge}>
                  <Text style={styles.notificationBadgeText}>{pendingInfluencers.length}</Text>
                </View>
              )}
              <Ionicons name="chevron-forward" size={20} color="#666" />
            </View>
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => setShowCompanyManagement(true)}
          >
            <View style={styles.menuItemLeft}>
              <Ionicons name="business" size={20} color="#C9A961" />
              <Text style={styles.menuItemText}>Gesti√≥n de Empresas</Text>
            </View>
            <Ionicons name="chevron-forward" size={20} color="#666" />
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => setShowCampaignManagement(true)}
          >
            <View style={styles.menuItemLeft}>
              <Ionicons name="create" size={20} color="#C9A961" />
              <Text style={styles.menuItemText}>Crear / Editar Campa√±as de Colaboraci√≥n</Text>
            </View>
            <Ionicons name="chevron-forward" size={20} color="#666" />
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => {
              Alert.alert(
                'Estad√≠sticas del Sistema',
                'Funcionalidad disponible pr√≥ximamente'
              );
            }}
          >
            <View style={styles.menuItemLeft}>
              <Ionicons name="analytics" size={20} color="#C9A961" />
              <Text style={styles.menuItemText}>Estad√≠sticas del Sistema</Text>
            </View>
            <Ionicons name="chevron-forward" size={20} color="#666" />
          </TouchableOpacity>

          {/* ‚úÖ BOT√ìN TEMPORAL PARA GENERAR DATOS DE PRUEBA */}
          <TouchableOpacity
            style={[styles.menuItem, { backgroundColor: 'rgba(76, 175, 80, 0.1)' }]}
            onPress={async () => {
              Alert.alert(
                'üß™ Generar Datos de Prueba',
                'Esto crear√° 5 solicitudes de registro de influencers de ejemplo para probar el sistema. ¬øContinuar?',
                [
                  { text: 'Cancelar', style: 'cancel' },
                  {
                    text: 'Generar',
                    onPress: async () => {
                      try {
                        await createTestInfluencerData();
                        Alert.alert(
                          '‚úÖ Datos Creados',
                          'Se han creado 5 solicitudes de registro de influencers de prueba. Ve a "Solicitudes de Registro de Influencers" para verlas.'
                        );
                      } catch (error) {
                        Alert.alert('Error', 'No se pudieron crear los datos de prueba');
                      }
                    }
                  }
                ]
              );
            }}
          >
            <View style={styles.menuItemLeft}>
              <Ionicons name="flask" size={20} color="#4CAF50" />
              <Text style={[styles.menuItemText, { color: '#4CAF50' }]}>üß™ Generar Datos de Prueba</Text>
            </View>
            <Ionicons name="chevron-forward" size={20} color="#4CAF50" />
          </TouchableOpacity>

          {/* ‚úÖ BOT√ìN PARA LIMPIAR INFLUENCERS APROBADOS */}
          <TouchableOpacity
            style={[styles.menuItem, { backgroundColor: 'rgba(255, 152, 0, 0.1)' }]}
            onPress={async () => {
              Alert.alert(
                'üßπ Limpiar Lista de Influencers',
                'Esto eliminar√° influencers de prueba (Carlos Fitness, Pedro Picado, etc.) y mostrar√° solo los influencers reales con acceso (nayades@gmail.com, ana@gmail.com, etc.). ¬øContinuar?',
                [
                  { text: 'Cancelar', style: 'cancel' },
                  {
                    text: 'Limpiar',
                    onPress: async () => {
                      try {
                        const cleanList = await cleanApprovedInfluencers();
                        Alert.alert(
                          '‚úÖ Lista Limpiada',
                          `Se han eliminado los influencers de prueba. Ahora solo aparecen ${cleanList.length} influencers reales con acceso.`
                        );
                      } catch (error) {
                        Alert.alert('Error', 'No se pudo limpiar la lista. Int√©ntalo de nuevo.');
                      }
                    }
                  }
                ]
              );
            }}
          >
            <View style={styles.menuItemLeft}>
              <Ionicons name="broom" size={20} color="#FF9800" />
              <Text style={[styles.menuItemText, { color: '#FF9800' }]}>üßπ Limpiar Lista de Influencers</Text>
            </View>
            <Ionicons name="chevron-forward" size={20} color="#FF9800" />
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.menuItem}
            onPress={() => {
              Alert.prompt(
                'Cambiar Contrase√±a de Administrador',
                'Ingresa tu contrase√±a actual:',
                [
                  {
                    text: 'Cancelar',
                    style: 'cancel'
                  },
                  {
                    text: 'Continuar',
                    onPress: (currentPassword) => {
                      if (!currentPassword) {
                        Alert.alert('Error', 'Debes ingresar tu contrase√±a actual');
                        return;
                      }

                      // Verificar contrase√±a actual
                      const storedPassword = userPasswords[currentUser?.email];
                      if (currentPassword !== storedPassword) {
                        Alert.alert('Error', 'La contrase√±a actual es incorrecta');
                        return;
                      }

                      // Pedir nueva contrase√±a
                      Alert.prompt(
                        'Nueva Contrase√±a de Administrador',
                        'Ingresa tu nueva contrase√±a (m√≠nimo 8 caracteres para mayor seguridad):',
                        [
                          {
                            text: 'Cancelar',
                            style: 'cancel'
                          },
                          {
                            text: 'Continuar',
                            onPress: (newPassword) => {
                              if (!newPassword || newPassword.length < 8) {
                                Alert.alert('Error', 'La nueva contrase√±a debe tener al menos 8 caracteres para mayor seguridad');
                                return;
                              }

                              if (newPassword === currentPassword) {
                                Alert.alert('Error', 'La nueva contrase√±a debe ser diferente a la actual');
                                return;
                              }

                              // Confirmar nueva contrase√±a
                              Alert.prompt(
                                'Confirmar Contrase√±a de Administrador',
                                'Confirma tu nueva contrase√±a:',
                                [
                                  {
                                    text: 'Cancelar',
                                    style: 'cancel'
                                  },
                                  {
                                    text: 'Actualizar',
                                    onPress: async (confirmPassword) => {
                                      if (newPassword !== confirmPassword) {
                                        Alert.alert('Error', 'Las contrase√±as no coinciden');
                                        return;
                                      }

                                      // Actualizar contrase√±a usando funci√≥n centralizada
                                      const success = await updateUserPassword(currentUser.email, newPassword);

                                      if (success) {
                                        Alert.alert(
                                          'üîê Contrase√±a de Administrador Actualizada',
                                          'Tu contrase√±a de administrador ha sido cambiada exitosamente y guardada permanentemente. Esta es una cuenta cr√≠tica del sistema, aseg√∫rate de recordar la nueva contrase√±a.'
                                        );
                                      } else {
                                        Alert.alert('Error', 'No se pudo actualizar la contrase√±a. Int√©ntalo de nuevo.');
                                      }
                                    }
                                  }
                                ],
                                'secure-text'
                              );
                            }
                          }
                        ],
                        'secure-text'
                      );
                    }
                  }
                ],
                'secure-text'
              );
            }}
          >
            <View style={styles.menuItemLeft}>
              <Ionicons name="shield-checkmark-outline" size={20} color="#C9A961" />
              <Text style={styles.menuItemText}>Cambiar Contrase√±a de Administrador</Text>
            </View>
            <Ionicons name="chevron-forward" size={20} color="#666" />
          </TouchableOpacity>
        </View>

        {/* Bot√≥n de cerrar sesi√≥n */}
        <View style={styles.logoutSection}>
          <TouchableOpacity
            style={styles.logoutButton}
            onPress={() => {
              handleLogout();
              setCurrentScreen('welcome');
              setActiveTab(0);
            }}
          >
            <Ionicons name="log-out-outline" size={20} color="#FF4444" />
            <Text style={styles.logoutButtonText}>Cerrar Sesi√≥n</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    );
  };

  // Funciones para manejar aprobaciones y rechazos de influencers
  const handleApproveInfluencer = useCallback(async (influencerId) => {
    const influencer = pendingInfluencers.find(inf => inf.id === influencerId);
    if (!influencer) {
      console.warn('‚ö†Ô∏è Influencer no encontrado:', influencerId);
      return;
    }

    try {
      console.log('‚úÖ Aprobando influencer con persistencia:', influencer.name);

      // Usar la funci√≥n del hook para aprobar con persistencia
      const success = await approveInfluencer(influencerId);

      if (success) {
        // Agregar el influencer a la lista de aprobados
        setApprovedInfluencers(prev => [...prev, influencer.email]);

        // Agregar la contrase√±a al sistema usando funci√≥n centralizada
        await updateUserPassword(influencer.email, influencer.password);

        // Crear notificaci√≥n para el influencer
        const notification = {
          id: Date.now(),
          type: 'influencer_approved',
          title: '¬°Cuenta Aprobada! üéâ',
          message: `Tu solicitud de registro como influencer ha sido aprobada. Ya puedes acceder a tu cuenta con tu email y contrase√±a.`,
          date: new Date().toISOString().split('T')[0],
          time: new Date().toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }),
          recipient: 'influencer',
          influencerEmail: influencer.email,
          read: false
        };

        setNotifications(prev => [...prev, notification]);

        Alert.alert(
          'Influencer Aprobado ‚úÖ',
          `${influencer.name} ha sido aprobado como influencer.\n\nEmail: ${influencer.email}\nSeguidores: ${influencer.followers}\nYa puede acceder a su cuenta.`,
          [{ 
            text: 'OK',
            onPress: () => {
              // Forzar actualizaci√≥n de la interfaz
              console.log('‚úÖ Interfaz actualizada despu√©s de aprobaci√≥n');
            }
          }]
        );

        console.log('‚úÖ Influencer aprobado y persistido:', {
          name: influencer.name,
          email: influencer.email,
          followers: influencer.followers
        });
      } else {
        console.error('‚ùå Error aprobando influencer');
        Alert.alert('Error', 'No se pudo aprobar el influencer');
      }
    } catch (error) {
      console.error('‚ùå Error en handleApproveInfluencer:', error);
      Alert.alert('Error', 'Error inesperado al aprobar el influencer');
    }
  }, [pendingInfluencers, approveInfluencer, updateUserPassword]);

  const handleRejectInfluencer = useCallback(async (influencerId) => {
    try {
      const influencer = pendingInfluencers.find(inf => inf.id === influencerId);
      if (!influencer) {
        console.warn('‚ö†Ô∏è Influencer no encontrado:', influencerId);
        Alert.alert('Error', 'Influencer no encontrado');
        return;
      }

      Alert.alert(
        'Confirmar Rechazo',
        `¬øEst√°s seguro de que quieres rechazar la solicitud de ${influencer.name}?\n\nSeguidores: ${influencer.followers}\nEsta acci√≥n eliminar√° permanentemente todos sus datos.`,
        [
          { text: 'Cancelar', style: 'cancel' },
          {
            text: 'Rechazar',
            style: 'destructive',
            onPress: async () => {
              try {
                console.log('‚ùå Iniciando proceso de rechazo para:', influencer.name);

                // Mostrar indicador de carga
                console.log('üîÑ Procesando rechazo...');

                // Usar la funci√≥n del hook para rechazar con persistencia
                const success = await rejectInfluencer(influencerId, 'Rechazado por el administrador');

                if (success) {
                  console.log('‚úÖ Rechazo exitoso, creando notificaci√≥n...');

                  // Crear notificaci√≥n para el influencer
                  const notification = {
                    id: Date.now(),
                    type: 'influencer_rejected',
                    title: 'Solicitud Rechazada ‚ùå',
                    message: `Tu solicitud de registro como influencer ha sido rechazada. Puedes contactar con soporte para m√°s informaci√≥n.`,
                    date: new Date().toISOString().split('T')[0],
                    time: new Date().toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }),
                    recipient: 'influencer',
                    influencerEmail: influencer.email,
                    read: false
                  };

                  // Actualizar notificaciones de forma segura
                  try {
                    setNotifications(prev => {
                      const newNotifications = [...prev, notification];
                      console.log('‚úÖ Notificaci√≥n agregada correctamente');
                      return newNotifications;
                    });
                  } catch (notificationError) {
                    console.error('‚ö†Ô∏è Error agregando notificaci√≥n:', notificationError);
                    // Continuar sin bloquear el flujo
                  }

                  // Mostrar confirmaci√≥n final
                  setTimeout(() => {
                    Alert.alert(
                      'Influencer Rechazado ‚úÖ',
                      `La solicitud de ${influencer.name} ha sido rechazada y eliminada.\n\nTodos los datos han sido eliminados permanentemente.`,
                      [{ 
                        text: 'OK',
                        onPress: () => {
                          console.log('‚úÖ Proceso de rechazo completado exitosamente');
                          // Forzar re-render de la lista
                          try {
                            setPendingInfluencers(prev => [...prev]);
                          } catch (rerenderError) {
                            console.error('‚ö†Ô∏è Error en re-render:', rerenderError);
                          }
                        }
                      }]
                    );
                  }, 100);

                  console.log('‚ùå Influencer rechazado y eliminado:', {
                    name: influencer.name,
                    email: influencer.email,
                    followers: influencer.followers,
                    timestamp: new Date().toISOString()
                  });

                } else {
                  console.error('‚ùå Error en funci√≥n rejectInfluencer');
                  Alert.alert(
                    'Error',
                    'No se pudo rechazar el influencer. Por favor, int√©ntalo de nuevo.',
                    [{ text: 'OK' }]
                  );
                }
              } catch (innerError) {
                console.error('‚ùå Error cr√≠tico en proceso de rechazo:', innerError);
                Alert.alert(
                  'Error Cr√≠tico',
                  'Ocurri√≥ un error inesperado. La aplicaci√≥n se recuperar√° autom√°ticamente.',
                  [{ 
                    text: 'OK',
                    onPress: () => {
                      // Recuperaci√≥n autom√°tica
                      try {
                        console.log('üîÑ Iniciando recuperaci√≥n autom√°tica...');
                        setPendingInfluencers(prev => [...prev]);
                      } catch (recoveryError) {
                        console.error('‚ùå Error en recuperaci√≥n:', recoveryError);
                      }
                    }
                  }]
                );
              }
            }
          }
        ]
      );
    } catch (outerError) {
      console.error('‚ùå Error cr√≠tico en handleRejectInfluencer:', outerError);
      Alert.alert(
        'Error',
        'Ocurri√≥ un error inesperado. Por favor, int√©ntalo de nuevo.',
        [{ text: 'OK' }]
      );
    }
  }, [pendingInfluencers, rejectInfluencer, setNotifications]);

  // Funciones para manejar aprobaciones del administrador (colaboraciones)
  const handleApproveRequest = useCallback(async (requestId) => {
    console.log('‚úÖ Aprobando solicitud con persistencia:', requestId);

    const request = pendingAdminRequests.find(req => req.id === requestId);
    if (!request) {
      console.warn('‚ö†Ô∏è Solicitud no encontrada:', requestId);
      return;
    }

    try {
      // Usar la funci√≥n del hook para aprobar con persistencia
      const success = await approveCollaborationRequest(requestId, {
        approvedDate: new Date().toISOString().split('T')[0]
      });

      if (success) {
        // Actualizar en solicitudes de empresa de manera segura
        try {
          setRealCompanyRequests(prev => {
            const updated = prev.map(req =>
              req.id === requestId
                ? { ...req, status: 'approved', approvedDate: new Date().toISOString().split('T')[0] }
                : req
            );
            return updated;
          });
        } catch (updateError) {
          console.error('Error actualizando RealCompanyRequests:', updateError);
        }

        // Mostrar confirmaci√≥n sin bloquear la UI
        setTimeout(() => {
          try {
            console.log('‚úÖ Solicitud aprobada y persistida correctamente');
            Alert.alert(
              '√âxito',
              'La colaboraci√≥n ha sido aprobada correctamente',
              [{ text: 'OK' }]
            );
          } catch (alertError) {
            console.error('Error mostrando alert:', alertError);
          }
        }, 100);
      } else {
        console.error('‚ùå Error aprobando solicitud');
        Alert.alert('Error', 'No se pudo aprobar la solicitud');
      }
    } catch (error) {
      console.error('‚ùå Error en handleApproveRequest:', error);
      Alert.alert('Error', 'Error inesperado al aprobar la solicitud: ' + error.message);
    }

    // Crear notificaciones para influencer y empresa
    const influencerNotification = {
      id: Date.now(),
      type: 'collaboration_approved',
      title: '¬°Colaboraci√≥n Aprobada! üéâ',
      message: `Tu solicitud para "${request.collaborationTitle}" con ${request.businessName} ha sido aprobada por el administrador.`,
      date: new Date().toISOString().split('T')[0],
      time: new Date().toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }),
      recipient: 'influencer',
      requestId: requestId,
      read: false
    };

    const companyNotification = {
      id: Date.now() + 1,
      type: 'new_approved_collaboration',
      title: 'Nueva Colaboraci√≥n Confirmada üìÖ',
      message: `${request.influencerName} (${request.influencerFollowers.toLocaleString()} seguidores) ha sido aprobado para tu colaboraci√≥n "${request.collaborationTitle}".`,
      date: new Date().toISOString().split('T')[0],
      time: new Date().toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }),
      recipient: 'company',
      businessName: request.businessName,
      requestId: requestId,
      read: false
    };

    setNotifications(prev => [...prev, influencerNotification, companyNotification]);

    Alert.alert(
      'Solicitud Aprobada ‚úÖ',
      `La colaboraci√≥n de ${request.influencerName} con ${request.businessName} ha sido aprobada.\n\nSe han enviado notificaciones a ambas partes.`,
      [{ text: 'OK' }]
    );
  }, [pendingAdminRequests, influencerCollaborations]);

  const handleRejectRequest = useCallback(async (requestId) => {
    const request = pendingAdminRequests.find(req => req.id === requestId);
    if (!request) {
      console.warn('‚ö†Ô∏è Solicitud no encontrada:', requestId);
      return;
    }

    Alert.alert(
      'Rechazar Solicitud',
      `¬øEst√°s seguro de que quieres rechazar la solicitud de ${request.influencerName} para "${request.collaborationTitle}"?`,
      [
        { text: 'Cancelar', style: 'cancel' },
        {
          text: 'Rechazar',
          style: 'destructive',
          onPress: async () => {
            try {
              console.log('‚ùå Rechazando solicitud con persistencia:', requestId);

              // Usar la funci√≥n del hook para rechazar con persistencia
              const success = await rejectCollaborationRequest(requestId, 'Rechazada por el administrador');

              if (success) {
                // Actualizar en solicitudes de empresa de manera segura
                try {
                  setRealCompanyRequests(prev => {
                    const updated = prev.map(req =>
                      req.id === requestId
                        ? { ...req, status: 'rejected', rejectedDate: new Date().toISOString().split('T')[0] }
                        : req
                    );
                    return updated;
                  });
                } catch (updateError) {
                  console.error('Error actualizando RealCompanyRequests:', updateError);
                }

                // Mostrar confirmaci√≥n sin bloquear la UI
                setTimeout(() => {
                  try {
                    console.log('‚úÖ Solicitud rechazada y persistida correctamente');
                    Alert.alert(
                      'Solicitud Rechazada',
                      'La colaboraci√≥n ha sido rechazada',
                      [{ text: 'OK' }]
                    );
                  } catch (alertError) {
                    console.error('Error mostrando alert:', alertError);
                  }
                }, 100);
              } else {
                console.error('‚ùå Error rechazando solicitud');
                Alert.alert('Error', 'No se pudo rechazar la solicitud');
              }
            } catch (error) {
              console.error('‚ùå Error en handleRejectRequest:', error);
              Alert.alert('Error', 'Error inesperado al rechazar la solicitud');
            }
          }
        }
      ]
    );

    // Crear notificaci√≥n para el influencer
    const influencerNotification = {
      id: Date.now(),
      type: 'collaboration_rejected',
      title: 'Solicitud No Aprobada üòî',
      message: `Tu solicitud para "${request.collaborationTitle}" con ${request.businessName} no ha sido aprobada en esta ocasi√≥n.`,
      date: new Date().toISOString().split('T')[0],
      time: new Date().toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }),
      recipient: 'influencer',
      requestId: requestId,
      read: false
    };

    setNotifications(prev => [...prev, influencerNotification]);

    Alert.alert(
      'Solicitud Rechazada ‚ùå',
      `La solicitud de ${request.influencerName} ha sido rechazada.\n\nSe ha enviado una notificaci√≥n al influencer.`,
      [{ text: 'OK' }]
    );
  }, [pendingAdminRequests, influencerCollaborations]);




  const NotificationsModal = () => {
    // Filtrar notificaciones seg√∫n el tipo de usuario
    const userNotifications = notifications.filter(notification => {
      if (userType === 'influencer') return notification.recipient === 'influencer';
      if (userType === 'company') return notification.recipient === 'company' && notification.businessName === currentUser?.businessName;
      if (userType === 'admin') return true; // Admin ve todas las notificaciones
      return false;
    });

  // Return corregido:     return (
      <Modal visible={showNotifications} animationType="fade" transparent>
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>
                Notificaciones {userNotifications.length > 0 && `(${userNotifications.length})`}
              </Text>
              <TouchableOpacity onPress={() => setShowNotifications(false)}>
                <Ionicons name="close" size={24} color="#C9A961" />
              </TouchableOpacity>
            </View>

            <ScrollView style={styles.notificationsList}>
              {userNotifications.length > 0 ? (
                userNotifications.map((notification) => (
                  <View key={notification.id} style={styles.notificationItem}>
                    <View style={styles.notificationHeader}>
                      <Text style={styles.notificationTitle}>{notification.title}</Text>
                      <Text style={styles.notificationTime}>
                        {notification.date} ‚Ä¢ {notification.time}
                      </Text>
                    </View>
                    <Text style={styles.notificationText}>{notification.message}</Text>
                    {!notification.read && <View style={styles.unreadIndicator} />}
                  </View>
                ))
              ) : (
                <View style={styles.emptyNotifications}>
                  <Ionicons name="notifications-outline" size={64} color="#666" />
                  <Text style={styles.emptyNotificationsTitle}>No hay notificaciones</Text>
                  <Text style={styles.emptyNotificationsSubtitle}>
                    Las notificaciones aparecer√°n aqu√≠
                  </Text>
                </View>
              )}
            </ScrollView>
          </View>
        </View>
      </Modal>
    );
  };

  const SettingsModal = () => (
    <Modal visible={showSettings} animationType="fade" transparent>
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Configuraci√≥n</Text>
            <TouchableOpacity onPress={() => setShowSettings(false)}>
              <Ionicons name="close" size={24} color="#C9A961" />
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.settingsList}>
            <TouchableOpacity style={styles.settingItem}>
              <Ionicons name="person-outline" size={20} color="#C9A961" />
              <Text style={styles.settingText}>Editar Perfil</Text>
            </TouchableOpacity>

            <TouchableOpacity style={styles.settingItem}>
              <Ionicons name="notifications-outline" size={20} color="#C9A961" />
              <Text style={styles.settingText}>Notificaciones</Text>
            </TouchableOpacity>

            <TouchableOpacity style={styles.settingItem}>
              <Ionicons name="shield-outline" size={20} color="#C9A961" />
              <Text style={styles.settingText}>Privacidad</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.settingItem}
              onPress={() => {
                setShowSettings(false);
                setCurrentScreen('welcome');
                setCurrentUser(null);
                setUserType(null);
              }}
            >
              <Ionicons name="log-out-outline" size={20} color="#FF6B6B" />
              <Text style={[styles.settingText, { color: '#FF6B6B' }]}>Cerrar Sesi√≥n</Text>
            </TouchableOpacity>
          </ScrollView>
        </View>
      </View>
    </Modal>
  );

  // Modal para ver capturas de pantalla de influencers
  const ScreenshotsModal = () => {
    const [selectedTab, setSelectedTab] = useState('instagram');
    const [selectedImageIndex, setSelectedImageIndex] = useState(0);
    const [showImageViewer, setShowImageViewer] = useState(false);

    if (!selectedInfluencerScreenshots || !showScreenshotsModal) return null;

    const instagramScreenshots = selectedInfluencerScreenshots.instagramScreenshots || [];
    const tiktokScreenshots = selectedInfluencerScreenshots.tiktokScreenshots || [];
    const currentScreenshots = selectedTab === 'instagram' ? instagramScreenshots : tiktokScreenshots;

    // Funci√≥n para cambiar de tab y resetear el √≠ndice de imagen
    const handleTabChange = (tab) => {
      setSelectedTab(tab);
      setSelectedImageIndex(0);
      setShowImageViewer(false);
    };

    // Funci√≥n para cerrar el modal
    const closeModal = () => {
      setShowScreenshotsModal(false);
      setSelectedInfluencerScreenshots(null);
      setSelectedTab('instagram');
      setSelectedImageIndex(0);
      setShowImageViewer(false);
    };

  // Return corregido:     return (
      <Modal visible={showScreenshotsModal} animationType="slide" transparent={false}>
        <SafeAreaView style={styles.container}>
          <StatusBar barStyle="light-content" backgroundColor="#000000" />

          {/* Header */}
          <View style={styles.modalHeader}>
            <TouchableOpacity
              style={styles.modalBackButton}
              onPress={closeModal}
            >
              <Ionicons name="arrow-back" size={20} color="#C9A961" />
            </TouchableOpacity>
            <Text style={styles.modalTitle}>Capturas de {selectedInfluencerScreenshots.name}</Text>
          </View>

          {/* Tabs para Instagram y TikTok */}
          <View style={styles.tabsContainer}>
            {instagramScreenshots.length > 0 && (
              <TouchableOpacity
                style={[styles.tabButton, selectedTab === 'instagram' && styles.tabButtonActive]}
                onPress={() => handleTabChange('instagram')}
              >
                <Text style={[styles.tabButtonText, selectedTab === 'instagram' && styles.tabButtonTextActive]}>
                  üì∏ Instagram ({instagramScreenshots.length})
                </Text>
              </TouchableOpacity>
            )}
            {tiktokScreenshots.length > 0 && (
              <TouchableOpacity
                style={[styles.tabButton, selectedTab === 'tiktok' && styles.tabButtonActive]}
                onPress={() => handleTabChange('tiktok')}
              >
                <Text style={[styles.tabButtonText, selectedTab === 'tiktok' && styles.tabButtonTextActive]}>
                  üéµ TikTok ({tiktokScreenshots.length})
                </Text>
              </TouchableOpacity>
            )}
          </View>

          {/* Informaci√≥n del influencer */}
          <View style={styles.influencerInfoHeader}>
            <Text style={styles.influencerInfoText}>
              üìß {selectedInfluencerScreenshots.email}
            </Text>
            <Text style={styles.influencerInfoText}>
              üìä Total de capturas: {instagramScreenshots.length + tiktokScreenshots.length}
            </Text>
          </View>

          {/* Contenido de capturas */}
          <ScrollView style={styles.screenshotsContent}>
            <View style={styles.screenshotsGrid}>
              {currentScreenshots.map((screenshot, index) => (
                <TouchableOpacity
                  key={index}
                  style={styles.screenshotThumbnail}
                  onPress={() => {
                    Alert.alert(
                      `Captura de ${selectedTab === 'instagram' ? 'Instagram' : 'TikTok'}`,
                      `Captura ${index + 1} de ${currentScreenshots.length}\n\nURL: ${screenshot.uri}\n\nFuncionalidad de zoom completo disponible pr√≥ximamente.`,
                      [
                        { text: 'Cerrar', style: 'cancel' },
                        { 
                          text: 'Ver Original', 
                          onPress: () => {
                            console.log('üñºÔ∏è Abriendo imagen original:', screenshot.uri);
                          }
                        }
                      ]
                    );
                  }}
                >
                  <Image
                    source={{ uri: screenshot.uri }}
                    style={styles.screenshotImage}
                    resizeMode="cover"
                  />
                  <View style={styles.screenshotOverlay}>
                    <Ionicons name="expand" size={20} color="#FFFFFF" />
                    <Text style={styles.screenshotIndex}>{index + 1}</Text>
                  </View>
                </TouchableOpacity>
              ))}
            </View>

            {currentScreenshots.length === 0 && (
              <View style={styles.emptyScreenshots}>
                <Ionicons
                  name={selectedTab === 'instagram' ? 'logo-instagram' : 'logo-tiktok'}
                  size={64}
                  color="#666"
                />
                <Text style={styles.emptyScreenshotsTitle}>
                  No hay capturas de {selectedTab === 'instagram' ? 'Instagram' : 'TikTok'}
                </Text>
                <Text style={styles.emptyScreenshotsSubtitle}>
                  Este influencer no subi√≥ capturas de {selectedTab === 'instagram' ? 'Instagram' : 'TikTok'}
                </Text>
              </View>
            )}
          </ScrollView>

          {/* Modal para ver imagen en pantalla completa con zoom */}
          <Modal visible={showImageViewer} animationType="fade" transparent>
            <View style={styles.imageViewerOverlay}>
              {/* Header con informaci√≥n de la imagen */}
              <View style={styles.imageViewerHeader}>
                <TouchableOpacity
                  style={styles.imageViewerClose}
                  onPress={() => setShowImageViewer(false)}
                >
                  <Ionicons name="close" size={30} color="#FFFFFF" />
                </TouchableOpacity>

                <View style={styles.imageViewerInfo}>
                  <Text style={styles.imageViewerTitle}>
                    {selectedTab === 'instagram' ? 'üì∏ Instagram' : 'üéµ TikTok'}
                  </Text>
                  <Text style={styles.imageViewerCounter}>
                    {selectedImageIndex + 1} / {currentScreenshots.length}
                  </Text>
                </View>

                <TouchableOpacity
                  style={styles.imageViewerZoomInfo}
                  onPress={() => {
                    Alert.alert(
                      'Zoom de Imagen',
                      'Pellizca la imagen para hacer zoom.\nDesliza para navegar entre im√°genes.\nToca dos veces para zoom r√°pido.',
                      [{ text: 'OK' }]
                    );
                  }}
                >
                  <Ionicons name="information-circle" size={24} color="#FFFFFF" />
                </TouchableOpacity>
              </View>

              {/* Imagen con zoom */}
              {currentScreenshots[selectedImageIndex] && (
                <ScrollView
                  style={styles.imageScrollContainer}
                  contentContainerStyle={styles.imageScrollContent}
                  maximumZoomScale={3}
                  minimumZoomScale={1}
                  showsHorizontalScrollIndicator={false}
                  showsVerticalScrollIndicator={false}
                  bouncesZoom={true}
                >
                  <TouchableOpacity
                    activeOpacity={1}
                    onPress={() => {
                      // Toque simple no hace nada, permite el zoom
                    }}
                    style={styles.imageContainer}
                  >
                    <Image
                      source={{ uri: currentScreenshots[selectedImageIndex].uri }}
                      style={styles.fullScreenImage}
                      resizeMode="contain"
                    />
                  </TouchableOpacity>
                </ScrollView>
              )}

              {/* Navegaci√≥n entre im√°genes mejorada */}
              {currentScreenshots.length > 1 && (
                <View style={styles.imageNavigation}>
                  <TouchableOpacity
                    style={[styles.navButton, selectedImageIndex === 0 && styles.navButtonDisabled]}
                    onPress={() => setSelectedImageIndex(Math.max(0, selectedImageIndex - 1))}
                    disabled={selectedImageIndex === 0}
                  >
                    <Ionicons name="chevron-back" size={24} color={selectedImageIndex === 0 ? "#666" : "#FFFFFF"} />
                    <Text style={styles.navButtonText}>Anterior</Text>
                  </TouchableOpacity>

                  <View style={styles.imageNavigationCenter}>
                    <Text style={styles.imageCounter}>
                      {selectedImageIndex + 1} de {currentScreenshots.length}
                    </Text>
                    <Text style={styles.imageTabIndicator}>
                      {selectedTab === 'instagram' ? 'üì∏ Instagram' : 'üéµ TikTok'}
                    </Text>
                  </View>

                  <TouchableOpacity
                    style={[styles.navButton, selectedImageIndex === currentScreenshots.length - 1 && styles.navButtonDisabled]}
                    onPress={() => setSelectedImageIndex(Math.min(currentScreenshots.length - 1, selectedImageIndex + 1))}
                    disabled={selectedImageIndex === currentScreenshots.length - 1}
                  >
                    <Text style={styles.navButtonText}>Siguiente</Text>
                    <Ionicons name="chevron-forward" size={24} color={selectedImageIndex === currentScreenshots.length - 1 ? "#666" : "#FFFFFF"} />
                  </TouchableOpacity>
                </View>
              )}

              {/* Botones para cambiar entre Instagram y TikTok en modo zoom */}
              <View style={styles.zoomTabSwitcher}>
                {instagramScreenshots.length > 0 && (
                  <TouchableOpacity
                    style={[styles.zoomTabButton, selectedTab === 'instagram' && styles.zoomTabButtonActive]}
                    onPress={() => handleTabChange('instagram')}
                  >
                    <Ionicons name="logo-instagram" size={20} color={selectedTab === 'instagram' ? "#000" : "#FFFFFF"} />
                    <Text style={[styles.zoomTabButtonText, selectedTab === 'instagram' && styles.zoomTabButtonTextActive]}>
                      IG ({instagramScreenshots.length})
                    </Text>
                  </TouchableOpacity>
                )}
                {tiktokScreenshots.length > 0 && (
                  <TouchableOpacity
                    style={[styles.zoomTabButton, selectedTab === 'tiktok' && styles.zoomTabButtonActive]}
                    onPress={() => handleTabChange('tiktok')}
                  >
                    <Ionicons name="logo-tiktok" size={20} color={selectedTab === 'tiktok' ? "#000" : "#FFFFFF"} />
                    <Text style={[styles.zoomTabButtonText, selectedTab === 'tiktok' && styles.zoomTabButtonTextActive]}>
                      TT ({tiktokScreenshots.length})
                    </Text>
                  </TouchableOpacity>
                )}
              </View>
            </View>
          </Modal>
        </SafeAreaView>
      </Modal>
    );
  };

  // Modal de gesti√≥n de solicitudes de colaboraci√≥n
  const CollaborationRequestsManagementModal = () => {
    return (
      <Modal visible={showCollaborationRequestsManagement} animationType="fade" transparent={false}>
        <SafeAreaView style={styles.container}>
          <StatusBar barStyle="light-content" backgroundColor="#000000" />

          {/* Header */}
          <View style={styles.modalHeader}>
            <TouchableOpacity
              style={styles.modalBackButton}
              onPress={() => setShowCollaborationRequestsManagement(false)}
            >
              <Ionicons name="arrow-back" size={20} color="#C9A961" />
            </TouchableOpacity>
            <Text style={styles.modalTitle}>Solicitudes de Colaboraci√≥n</Text>
          </View>

          {/* Content */}
          <ScrollView style={styles.tabContent}>
            <View style={styles.sectionContainer}>
              <Text style={styles.sectionTitle}>
                Solicitudes Pendientes ({pendingAdminRequests.length})
              </Text>

              {pendingAdminRequests.length > 0 ? (
                pendingAdminRequests.map((request) => (
                  <View key={request.id} style={styles.itemCard}>
                    <View style={styles.itemHeader}>
                      <View style={styles.itemInfo}>
                        <Text style={styles.itemName}>{request.influencerName}</Text>
                        <Text style={styles.itemEmail}>{request.influencerEmail}</Text>
                        <Text style={styles.itemDetails}>
                          üë• {request.influencerFollowers.toLocaleString()} seguidores
                        </Text>
                      </View>
                      <View style={styles.pendingBadge}>
                        <Text style={styles.pendingBadgeText}>PENDIENTE</Text>
                      </View>
                    </View>

                    {/* Informaci√≥n de la colaboraci√≥n */}
                    <View style={styles.collaborationInfo}>
                      <Text style={styles.collaborationTitle}>"{request.collaborationTitle}"</Text>
                      <Text style={styles.collaborationBusiness}>con {request.businessName}</Text>
                      <View style={styles.collaborationDetails}>
                        <Text style={styles.collaborationDate}>
                          üìÖ {new Date(request.requestedDate).toLocaleDateString('es-ES')} a las {request.requestedTime}
                        </Text>
                        <Text style={styles.requestDate}>
                          Solicitado el {request.requestDate} a las {request.requestTime}
                        </Text>
                      </View>
                    </View>

                    {/* Mensaje del influencer */}
                    <View style={styles.messageContainer}>
                      <Text style={styles.messageLabel}>Mensaje del influencer:</Text>
                      <Text style={styles.messageText}>{request.message}</Text>
                    </View>

                    {/* Informaci√≥n adicional */}
                    <View style={styles.itemDetailsContainer}>
                      <Text style={styles.detailText}>
                        <Text style={{ fontWeight: '600', color: '#C9A961' }}>Colaboraci√≥n ID:</Text> {request.collaborationId}
                      </Text>
                      <Text style={styles.detailText}>
                        <Text style={{ fontWeight: '600', color: '#C9A961' }}>Estado:</Text> Pendiente de aprobaci√≥n
                      </Text>
                    </View>

                    {/* Acciones */}
                    <View style={styles.itemActions}>
                      <TouchableOpacity
                        style={styles.approveButton}
                        onPress={() => handleApproveRequest(request.id)}
                      >
                        <Ionicons name="checkmark-circle" size={16} color="#000" />
                        <Text style={styles.approveButtonText}>Aprobar</Text>
                      </TouchableOpacity>
                      <TouchableOpacity
                        style={styles.rejectButton}
                        onPress={() => handleRejectRequest(request.id)}
                      >
                        <Ionicons name="close-circle" size={16} color="#C9A961" />
                        <Text style={styles.rejectButtonText}>Rechazar</Text>
                      </TouchableOpacity>
                    </View>
                  </View>
                ))
              ) : (
                <View style={styles.emptyStateContainer}>
                  <Ionicons name="people-outline" size={64} color="#666" />
                  <Text style={styles.emptyStateTitle}>No hay solicitudes pendientes</Text>
                  <Text style={styles.emptyStateSubtitle}>
                    Las nuevas solicitudes de colaboraci√≥n aparecer√°n aqu√≠
                  </Text>
                </View>
              )}
            </View>
          </ScrollView>
        </SafeAreaView>
      </Modal>
    );
  };




  const CalendarModal = React.memo(() => {
    // Estado local para evitar re-renderizados
    const [localSelectedDate, setLocalSelectedDate] = useState(selectedDate);
    const [localSelectedTime, setLocalSelectedTime] = useState(selectedTime);
    const [localTermsAccepted, setLocalTermsAccepted] = useState(termsAccepted);

    // Animaci√≥n para el modal
    const slideAnim = useRef(new Animated.Value(height)).current;
    const fadeAnim = useRef(new Animated.Value(0)).current;

    // Sincronizar estado local cuando se abre el modal
    React.useEffect(() => {
      if (showCalendar) {
        setLocalSelectedDate(selectedDate);
        setLocalSelectedTime(selectedTime);
        setLocalTermsAccepted(termsAccepted);

        // Animar entrada
        Animated.parallel([
          Animated.timing(fadeAnim, {
            toValue: 1,
            duration: 300,
            easing: Easing.out(Easing.quad),
            useNativeDriver: true,
          }),
          Animated.timing(slideAnim, {
            toValue: 0,
            duration: 400,
            easing: Easing.out(Easing.back(1.1)),
            useNativeDriver: true,
          }),
        ]).start();
      } else {
        // Animar salida
        Animated.parallel([
          Animated.timing(fadeAnim, {
            toValue: 0,
            duration: 200,
            easing: Easing.in(Easing.quad),
            useNativeDriver: true,
          }),
          Animated.timing(slideAnim, {
            toValue: height,
            duration: 300,
            easing: Easing.in(Easing.back(1.1)),
            useNativeDriver: true,
          }),
        ]).start();
      }
    }, [showCalendar, selectedDate, selectedTime, termsAccepted, slideAnim, fadeAnim]);

    // Funciones optimizadas para manejar cambios locales
    const handleLocalDateSelect = useCallback((date) => {
      setLocalSelectedDate(date);
    }, []);

    const handleLocalTimeSelect = useCallback((time) => {
      setLocalSelectedTime(time);
    }, []);

    const handleLocalTermsToggle = useCallback(() => {
      setLocalTermsAccepted(prev => !prev);
    }, []);

    const handleLocalCloseModal = useCallback(() => {
      // Animar salida antes de cerrar
      Animated.parallel([
        Animated.timing(fadeAnim, {
          toValue: 0,
          duration: 200,
          easing: Easing.in(Easing.quad),
          useNativeDriver: true,
        }),
        Animated.timing(slideAnim, {
          toValue: height,
          duration: 300,
          easing: Easing.in(Easing.back(1.1)),
          useNativeDriver: true,
        }),
      ]).start(() => {
        // Cerrar modal despu√©s de la animaci√≥n
        setShowCalendar(false);
        setLocalSelectedDate(null);
        setLocalSelectedTime(null);
        setLocalTermsAccepted(false);
        // Limpiar estado global tambi√©n
        setSelectedDate(null);
        setSelectedTime(null);
        setTermsAccepted(false);

        // Resetear animaciones para la pr√≥xima vez
        slideAnim.setValue(height);
        fadeAnim.setValue(0);
      });
    }, [slideAnim, fadeAnim]);

    const handleLocalConfirmRequest = useCallback(async () => {
      if (localSelectedDate && localSelectedTime && localTermsAccepted) {
        // Sincronizar estado local con global antes de procesar
        setSelectedDate(localSelectedDate);
        setSelectedTime(localSelectedTime);
        setTermsAccepted(localTermsAccepted);

        // Crear solicitud completa
        const newRequest = {
          id: Date.now(), // ID √∫nico basado en timestamp
          influencerName: currentUser?.name || personalData?.fullName || 'Usuario Influencer',
          influencerUsername: personalData?.instagram || '@usuario_influencer',
          influencerFollowers: parseInt(personalData?.instagramFollowers) || 25000,
          influencerEmail: currentUser?.email || personalData?.email || 'usuario@email.com',
          influencerPhone: personalData?.phone || '+34 600 000 000',
          influencerCity: personalData?.city || 'Madrid',
          collaborationTitle: selectedCollaboration?.title,
          collaborationId: selectedCollaboration?.id,
          businessName: selectedCollaboration?.business,
          businessCategory: selectedCollaboration?.category,
          requestedDate: localSelectedDate.toISOString().split('T')[0], // Formato YYYY-MM-DD
          requestedTime: localSelectedTime,
          status: 'pending', // Pendiente de aprobaci√≥n del administrador
          requestDate: new Date().toISOString().split('T')[0],
          requestTime: new Date().toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' }),
          message: `¬°Hola! Me interesa mucho colaborar con ${selectedCollaboration?.business}. Creo que mi audiencia de ${parseInt(personalData?.instagramFollowers || 25000).toLocaleString()} seguidores estar√≠a muy interesada en esta experiencia y puedo crear contenido aut√©ntico y de calidad que beneficie a ambas partes.`,
          collaborationDetails: {
            address: selectedCollaboration?.address,
            phone: selectedCollaboration?.phone,
            includes: selectedCollaboration?.includes,
            requirements: selectedCollaboration?.requirements
          }
        };

        // Usar la funci√≥n centralizada para agregar la solicitud
        const createdRequest = await addCollaborationRequest(newRequest);

        // Tambi√©n agregar a las solicitudes de empresa (para que la empresa pueda verla)
        setRealCompanyRequests(prev => [...prev, createdRequest]);

        setShowCalendar(false);
        Alert.alert(
          'Solicitud Enviada',
          `Tu solicitud para "${selectedCollaboration?.title}" ha sido enviada para el ${localSelectedDate.toLocaleDateString('es-ES')} a las ${localSelectedTime}. Recibir√°s una respuesta en 24-48 horas.`,
          [{ text: 'OK' }]
        );

        // Limpiar estados
        setLocalSelectedDate(null);
        setLocalSelectedTime(null);
        setLocalTermsAccepted(false);
        setSelectedDate(null);
        setSelectedTime(null);
        setTermsAccepted(false);
      }
    }, [localSelectedDate, localSelectedTime, localTermsAccepted, selectedCollaboration, currentUser]);

  // Return corregido:     return (
      <Modal
        visible={showCalendar}
        animationType="none"
        transparent={true}
        statusBarTranslucent={true}
      >
        <Animated.View style={[styles.modalBackdrop, { opacity: fadeAnim }]}>
          <Animated.View style={[
            styles.modalSlideContainer,
            { transform: [{ translateY: slideAnim }] }
          ]}>
            <SafeAreaView style={styles.collaborationRequestContainer}>
              <StatusBar barStyle="light-content" backgroundColor="#000000" />

              {/* Header con bot√≥n cerrar */}
              <View style={styles.collaborationRequestHeader}>
                <TouchableOpacity
                  style={styles.collaborationCloseButton}
                  onPress={handleLocalCloseModal}
                >
                  <Ionicons name="arrow-back" size={28} color="#FFFFFF" />
                </TouchableOpacity>
                <Text style={styles.collaborationRequestTitle}>Solicitar Colaboraci√≥n</Text>
                <View style={styles.headerSpacer} />
              </View>

              <ScrollView
                style={styles.collaborationRequestScroll}
                showsVerticalScrollIndicator={false}
                contentContainerStyle={styles.collaborationRequestScrollContent}
              >
                {/* Informaci√≥n de la colaboraci√≥n */}
                <View style={styles.collaborationInfoCard}>
                  <Text style={styles.collaborationInfoTitle}>{selectedCollaboration?.title}</Text>
                  <Text style={styles.collaborationInfoBusiness}>{selectedCollaboration?.business}</Text>
                </View>

                {/* Selecci√≥n de fecha */}
                <View style={styles.requestSection}>
                  <Text style={styles.requestSectionTitle}>Selecciona una fecha:</Text>
                  <CalendarPicker
                    onDateSelect={handleLocalDateSelect}
                    selectedDate={localSelectedDate}
                    availableDates={selectedCollaboration?.availableDates}
                  />
                </View>

                {/* Selecci√≥n de hora */}
                <View style={styles.requestSection}>
                  <Text style={styles.requestSectionTitle}>Selecciona una hora:</Text>
                  <View style={styles.timeSlotsList}>
                    {selectedCollaboration?.timeSlots && selectedCollaboration.timeSlots.map((time) => (
                      <TouchableOpacity
                        key={time}
                        style={[
                          styles.timeSlot,
                          localSelectedTime === time && styles.timeSlotSelected
                        ]}
                        onPress={() => handleLocalTimeSelect(time)}
                      >
                        <Text style={[
                          styles.timeSlotText,
                          localSelectedTime === time && styles.timeSlotTextSelected
                        ]}>{time}</Text>
                      </TouchableOpacity>
                    ))}
                  </View>
                </View>

                {/* T√©rminos y condiciones */}
                <View style={styles.requestSection}>
                  <Text style={styles.requestSectionTitle}>T√©rminos y condiciones:</Text>
                  <TouchableOpacity
                    style={styles.termsCheckbox}
                    onPress={handleLocalTermsToggle}
                  >
                    <View style={[styles.checkbox, localTermsAccepted && styles.checkboxChecked]}>
                      {localTermsAccepted && <Ionicons name="checkmark" size={16} color="#FFFFFF" />}
                    </View>
                    <Text style={styles.termsText}>
                      Acepto los t√©rminos y condiciones de la colaboraci√≥n
                    </Text>
                  </TouchableOpacity>
                </View>

                {/* Bot√≥n confirmar */}
                <View style={styles.requestButtonContainer}>
                  <TouchableOpacity
                    style={[
                      styles.confirmButton,
                      (!localSelectedDate || !localSelectedTime || !localTermsAccepted) && styles.confirmButtonDisabled
                    ]}
                    disabled={!localSelectedDate || !localSelectedTime || !localTermsAccepted}
                    onPress={handleLocalConfirmRequest}
                  >
                    <Text style={[
                      styles.confirmButtonText,
                      (!localSelectedDate || !localSelectedTime || !localTermsAccepted) && styles.confirmButtonTextDisabled
                    ]}>
                      CONFIRMAR SOLICITUD
                    </Text>
                  </TouchableOpacity>
                </View>
              </ScrollView>
            </SafeAreaView>
          </Animated.View>
        </Animated.View>
      </Modal>
    );
  });

  const CollaborationDetailModal = () => (
    <Modal visible={showCollaborationDetail} animationType="fade" transparent={false}>
      <SafeAreaView style={styles.collaborationDetailContainer}>
        <StatusBar barStyle="light-content" backgroundColor="#000000" />

        {/* Header con bot√≥n cerrar */}
        <View style={styles.collaborationDetailHeader}>
          <TouchableOpacity
            style={styles.collaborationCloseButton}
            onPress={() => setShowCollaborationDetail(false)}
          >
            <Ionicons name="close" size={28} color="#FFFFFF" />
          </TouchableOpacity>
        </View>

        <ScrollView style={styles.collaborationDetailScroll} showsVerticalScrollIndicator={false}>
          {/* Galer√≠a de fotos con indicadores */}
          <View style={styles.photoGalleryContainer}>
            <ScrollView
              horizontal
              pagingEnabled
              showsHorizontalScrollIndicator={false}
              style={styles.photoGalleryScroll}
            >
              {selectedCollaboration?.images && selectedCollaboration.images.length > 0 ?
                selectedCollaboration.images.map((image, index) => (
                  <View key={index} style={styles.photoSlide}>
                    <Image
                      source={{ uri: image }}
                      style={styles.photoSlideImage}
                      resizeMode="cover"
                      onError={() => console.log('Error cargando imagen en galer√≠a:', image)}
                    />
                  </View>
                )) : (
                  <View style={styles.photoSlide}>
                    <View style={styles.photoPlaceholder}>
                      <Ionicons name="image-outline" size={60} color="#C9A961" />
                      <Text style={styles.photoPlaceholderText}>Sin im√°genes disponibles</Text>
                    </View>
                  </View>
                )
              }
            </ScrollView>

            {/* Indicadores de puntos */}
            <View style={styles.photoIndicators}>
              {selectedCollaboration?.images && selectedCollaboration.images.map((_, index) => (
                <View key={index} style={styles.photoIndicatorDot} />
              ))}
            </View>
          </View>

          {/* Informaci√≥n b√°sica */}
          <View style={styles.basicInfoSection}>
            <Text style={styles.categoryText}>{selectedCollaboration?.category}</Text>
            <Text style={styles.businessName}>{selectedCollaboration?.business}</Text>

            {/* Botones de informaci√≥n */}
            <View style={styles.infoButtonsRow}>
              <View style={styles.infoButton}>
                <Text style={styles.infoButtonText}>+{selectedCollaboration?.followers / 1000}K</Text>
              </View>
              <View style={styles.infoButton}>
                <Ionicons name="people" size={16} color="#666" />
                <Text style={styles.infoButtonText}>+{selectedCollaboration?.companions}</Text>
              </View>
              <View style={styles.infoButton}>
                <Ionicons name="calendar" size={16} color="#666" />
              </View>
            </View>

            {/* Bot√≥n SOLICITAR */}
            <TouchableOpacity
              style={styles.solicitarButton}
              onPress={handleCollaborationRequest}
              activeOpacity={0.8}
            >
              <Text style={styles.solicitarButtonText}>SOLICITAR</Text>
            </TouchableOpacity>
          </View>

          {/* Descripci√≥n */}
          <View style={styles.descriptionSection}>
            <Text style={styles.sectionTitle}>DESCRIPCI√ìN</Text>
            <Text style={styles.descriptionText}>{selectedCollaboration?.description}</Text>
            <Text style={styles.instagramHandle}>
              {selectedCollaboration?.instagramHandle || `@${selectedCollaboration?.business?.toLowerCase().replace(/\s+/g, '_')}`}
            </Text>
          </View>

          {/* Ubicaci√≥n con mapa */}
          <View style={styles.locationSection}>
            <Text style={styles.sectionTitle}>UBICACI√ìN</Text>
            <View style={styles.mapContainer}>
              <InteractiveMap
                collaborations={[selectedCollaboration]}
                showSingleLocation={true}
                initialRegion={{
                  latitude: selectedCollaboration?.location?.latitude || 40.4168,
                  longitude: selectedCollaboration?.location?.longitude || -3.7038,
                  latitudeDelta: 0.01,
                  longitudeDelta: 0.01,
                }}
              />
            </View>
            <Text style={styles.addressText}>{selectedCollaboration?.address}</Text>
          </View>

          {/* QUE INCLUYE */}
          <View style={styles.includesSection}>
            <Text style={styles.sectionTitle}>QUE INCLUYE</Text>
            <View style={styles.includesCard}>
              <Text style={styles.includesCardTitle}>La colaboraci√≥n incluye*:</Text>
              {selectedCollaboration?.includes && selectedCollaboration.includes.map((item, index) => (
                <Text key={index} style={styles.includesItem}>- {item}</Text>
              ))}

            </View>
          </View>

          {/* CONDICIONES */}
          <View style={styles.conditionsSection}>
            <Text style={styles.sectionTitle}>CONDICIONES</Text>

            {/* Instagram */}
            <View style={styles.conditionCard}>
              <View style={styles.conditionHeader}>
                <Ionicons name="logo-instagram" size={20} color="#E4405F" />
                <Text style={styles.conditionPlatform}>INSTAGRAM</Text>
              </View>
              <Text style={styles.conditionText}>
                Contenido a subir etiquetando de forma visible y legible a {selectedCollaboration?.instagramHandle || `@${selectedCollaboration?.business?.toLowerCase().replace(/\s+/g, '_')}`} mostrando producto, local y experiencia:
              </Text>
              <Text style={styles.conditionRequirement}>
                - M√≠nimo 2 stories de Instagram mostrando la experiencia completa
              </Text>
              <Text style={styles.conditionRequirement}>
                - Etiquetar visiblemente al negocio y usar hashtags proporcionados
              </Text>
              <Text style={styles.conditionRequirement}>
                - Menci√≥n a @zyro_app
              </Text>
              <Text style={styles.conditionNote}>
                *El contenido deber√° publicarse en un plazo m√°ximo de 72h desde la finalizaci√≥n de la experiencia.
              </Text>
            </View>

            {/* TikTok */}
            <View style={styles.conditionCard}>
              <View style={styles.conditionHeader}>
                <Ionicons name="logo-tiktok" size={20} color="#000000" />
                <Text style={styles.conditionPlatform}>TIKTOK</Text>
              </View>
              <Text style={styles.conditionText}>
                Contenido a subir etiquetando a {selectedCollaboration?.instagramHandle || `@${selectedCollaboration?.business?.toLowerCase().replace(/\s+/g, '_')}`} mostrando producto, local y experiencia:
              </Text>
              <Text style={styles.conditionRequirement}>- 1 TikTok</Text>
            </View>
          </View>
        </ScrollView>
      </SafeAreaView>
    </Modal>
  );



  // Modales para funcionalidades del perfil
  const ProfilePhotoModal = () => (
    <Modal visible={showProfilePhoto} animationType="fade" transparent>
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Actualizar Foto de Perfil</Text>
            <TouchableOpacity onPress={() => setShowProfilePhoto(false)}>
              <Ionicons name="close" size={24} color="#C9A961" />
            </TouchableOpacity>
          </View>

          <View style={styles.photoOptions}>
            <TouchableOpacity
              style={styles.photoOption}
              onPress={async () => {
                const { status } = await ImagePicker.requestCameraPermissionsAsync();
                if (status !== 'granted') {
                  Alert.alert('Permisos necesarios', 'Necesitamos acceso a la c√°mara para tomar fotos.');
                  return;
                }

                const result = await ImagePicker.launchCameraAsync({
                  mediaTypes: ImagePicker.MediaTypeOptions.Images,
                  allowsEditing: true,
                  aspect: [1, 1],
                  quality: 0.8,
                });

                if (!result.canceled) {
                  const newPhotoUri = result.assets[0].uri;
                  setProfilePhotoUri(newPhotoUri);
                  saveProfilePhotoToStorage(newPhotoUri);
                  setShowProfilePhoto(false);
                  Alert.alert('¬°Perfecto! üì∏', 'Tu foto de perfil ha sido actualizada y guardada permanentemente.');
                }
              }}
            >
              <Ionicons name="camera" size={32} color="#C9A961" />
              <Text style={styles.photoOptionText}>Tomar Foto</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.photoOption}
              onPress={async () => {
                const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
                if (status !== 'granted') {
                  Alert.alert('Permisos necesarios', 'Necesitamos acceso a tu galer√≠a para seleccionar fotos.');
                  return;
                }

                const result = await ImagePicker.launchImageLibraryAsync({
                  mediaTypes: ImagePicker.MediaTypeOptions.Images,
                  allowsEditing: true,
                  aspect: [1, 1],
                  quality: 0.8,
                });

                if (!result.canceled) {
                  const newPhotoUri = result.assets[0].uri;
                  setProfilePhotoUri(newPhotoUri);
                  saveProfilePhotoToStorage(newPhotoUri);
                  setShowProfilePhoto(false);
                  Alert.alert('¬°Perfecto! üì∏', 'Tu foto de perfil ha sido actualizada y guardada permanentemente.');
                }
              }}
            >
              <Ionicons name="images" size={32} color="#C9A961" />
              <Text style={styles.photoOptionText}>Elegir de Galer√≠a</Text>
            </TouchableOpacity>
          </View>


        </View>
      </View>
    </Modal>
  );

  // Modal para foto de perfil de empresa
  const CompanyProfilePhotoModal = () => (
    <Modal visible={showCompanyProfilePhoto} animationType="fade" transparent>
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Logo de Empresa</Text>
            <TouchableOpacity onPress={() => setShowCompanyProfilePhoto(false)}>
              <Ionicons name="close" size={24} color="#C9A961" />
            </TouchableOpacity>
          </View>

          <View style={styles.photoOptions}>
            <TouchableOpacity
              style={styles.photoOption}
              onPress={async () => {
                const { status } = await ImagePicker.requestCameraPermissionsAsync();
                if (status !== 'granted') {
                  Alert.alert('Permisos necesarios', 'Necesitamos acceso a la c√°mara para tomar fotos.');
                  return;
                }

                const result = await ImagePicker.launchCameraAsync({
                  mediaTypes: ImagePicker.MediaTypeOptions.Images,
                  allowsEditing: true,
                  aspect: [1, 1],
                  quality: 0.8,
                });

                if (!result.canceled) {
                  const newPhotoUri = result.assets[0].uri;
                  setCompanyProfilePhotoUri(newPhotoUri);
                  saveCompanyProfilePhotoToStorage(newPhotoUri);
                  setShowCompanyProfilePhoto(false);
                  Alert.alert('¬°Perfecto! üè¢', 'El logo de tu empresa ha sido actualizado y guardado permanentemente.');
                }
              }}
            >
              <Ionicons name="camera" size={32} color="#C9A961" />
              <Text style={styles.photoOptionText}>Tomar Foto</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.photoOption}
              onPress={async () => {
                const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();
                if (status !== 'granted') {
                  Alert.alert('Permisos necesarios', 'Necesitamos acceso a tu galer√≠a para seleccionar fotos.');
                  return;
                }

                const result = await ImagePicker.launchImageLibraryAsync({
                  mediaTypes: ImagePicker.MediaTypeOptions.Images,
                  allowsEditing: true,
                  aspect: [1, 1],
                  quality: 0.8,
                });

                if (!result.canceled) {
                  const newPhotoUri = result.assets[0].uri;
                  setCompanyProfilePhotoUri(newPhotoUri);
                  saveCompanyProfilePhotoToStorage(newPhotoUri);
                  setShowCompanyProfilePhoto(false);
                  Alert.alert('¬°Perfecto! üè¢', 'El logo de tu empresa ha sido actualizado y guardado permanentemente.');
                }
              }}
            >
              <Ionicons name="images" size={32} color="#C9A961" />
              <Text style={styles.photoOptionText}>Elegir de Galer√≠a</Text>
            </TouchableOpacity>

            {companyProfilePhotoUri && (
              <TouchableOpacity
                style={[styles.photoOption, { backgroundColor: '#2a1a1a' }]}
                onPress={() => {
                  Alert.alert(
                    'Eliminar Logo',
                    '¬øEst√°s seguro de que quieres eliminar el logo de tu empresa?',
                    [
                      { text: 'Cancelar', style: 'cancel' },
                      {
                        text: 'Eliminar',
                        style: 'destructive',
                        onPress: async () => {
                          setCompanyProfilePhotoUri(null);
                          try {
                            const key = `companyProfilePhoto_${currentUser?.email}`;
                            await AsyncStorage.removeItem(key);
                          } catch (error) {
                            console.error('Error eliminando logo:', error);
                          }
                          setShowCompanyProfilePhoto(false);
                          Alert.alert('Logo eliminado', 'El logo de tu empresa ha sido eliminado.');
                        }
                      }
                    ]
                  );
                }}
              >
                <Ionicons name="trash" size={32} color="#F44336" />
                <Text style={[styles.photoOptionText, { color: '#F44336' }]}>Eliminar Logo</Text>
              </TouchableOpacity>
            )}
          </View>
        </View>
      </View>
    </Modal>
  );

  const PersonalDataModal = React.memo(() => {
    // Estado local para evitar re-renderizados del componente padre
    const [localData, setLocalData] = useState(personalData);

    // Refs para evitar re-renderizados
    const fullNameRef = useRef(null);
    const emailRef = useRef(null);
    const phoneRef = useRef(null);
    const cityRef = useRef(null);
    const instagramRef = useRef(null);
    const tiktokRef = useRef(null);
    const followersRef = useRef(null);

    // Sincronizar datos cuando se abre el modal
    React.useEffect(() => {
      if (showPersonalData) {
        setLocalData(personalData);
      }
    }, [showPersonalData, personalData]);

    // Funciones de actualizaci√≥n local
    const updateLocalField = useCallback((field, value) => {
      setLocalData(prev => ({
        ...prev,
        [field]: value
      }));
    }, []);

    const handleSave = useCallback(async () => {
      try {
        const oldEmail = personalData.email;
        const newEmail = localData.email;

        // Verificar si el email ha cambiado
        const emailChanged = oldEmail !== newEmail;

        // Validar formato de email si ha cambiado
        if (emailChanged) {
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          if (!emailRegex.test(newEmail)) {
            Alert.alert(
              'Email Inv√°lido',
              'Por favor ingresa un email v√°lido.',
              [{ text: 'OK' }]
            );
            return;
          }

          // Verificar que el nuevo email no est√© ya en uso
          if (userPasswords[newEmail] && newEmail !== oldEmail) {
            Alert.alert(
              'Email en Uso',
              'Este email ya est√° registrado en el sistema. Por favor usa otro email.',
              [{ text: 'OK' }]
            );
            return;
          }
        }

        // Actualizar estado local
        setPersonalData(localData);

        // Si el email cambi√≥, actualizar las credenciales de login
        if (emailChanged) {
          updateUserEmail(oldEmail, newEmail);
        }

        // Guardar en AsyncStorage (con el nuevo email como clave si cambi√≥)
        await savePersonalDataToStorage(localData);

        const message = emailChanged
          ? '¬°Datos Guardados! üíæ\n\nTus datos personales han sido actualizados y guardados permanentemente.\n\nüìß Tu nuevo email de inicio de sesi√≥n es:\n' + newEmail
          : '¬°Datos Guardados! üíæ\n\nTus datos personales han sido actualizados y guardados permanentemente.';

        Alert.alert(
          emailChanged ? '¬°Email de Login Actualizado!' : '¬°Datos Guardados!',
          message,
          [
            {
              text: 'OK',
              onPress: () => setShowPersonalData(false)
            }
          ]
        );
      } catch (error) {
        console.error('Error guardando datos:', error);
        Alert.alert(
          'Error',
          'Hubo un problema guardando tus datos. Int√©ntalo de nuevo.',
          [{ text: 'OK' }]
        );
      }
    }, [localData, personalData.email, savePersonalDataToStorage, updateUserEmail, userPasswords]);

  // Return corregido:     return (
      <Modal
        visible={showPersonalData}
        animationType="none"
        transparent={false}
        statusBarTranslucent={false}
        onRequestClose={() => setShowPersonalData(false)}
      >
        <SafeAreaView style={styles.modalContainer}>
          <View style={styles.modalFullContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Datos Personales</Text>
              <TouchableOpacity onPress={() => setShowPersonalData(false)}>
                <Ionicons name="close" size={24} color="#C9A961" />
              </TouchableOpacity>
            </View>

            <ScrollView
              style={styles.personalDataContent}
              keyboardShouldPersistTaps="handled"
              showsVerticalScrollIndicator={false}
              nestedScrollEnabled={true}
              contentContainerStyle={{ paddingBottom: 100 }}
            >
              <View style={styles.dataSection}>
                <Text style={styles.dataSectionTitle}>Informaci√≥n Personal</Text>

                <View style={styles.dataField}>
                  <Text style={styles.dataLabel}>Nombre completo</Text>
                  <TextInput
                    ref={fullNameRef}
                    style={styles.dataInput}
                    value={localData.fullName}
                    onChangeText={(text) => updateLocalField('fullName', text)}
                    placeholder="Nombre completo"
                    placeholderTextColor="#666"
                    autoCorrect={false}
                    autoCapitalize="words"
                    returnKeyType="next"
                    blurOnSubmit={false}
                    onSubmitEditing={() => emailRef.current?.focus()}
                  />
                </View>

                <View style={styles.dataField}>
                  <Text style={styles.dataLabel}>Email</Text>
                  <TextInput
                    ref={emailRef}
                    style={styles.dataInput}
                    value={localData.email}
                    onChangeText={(text) => updateLocalField('email', text)}
                    placeholder="Email"
                    placeholderTextColor="#666"
                    keyboardType="email-address"
                    autoCorrect={false}
                    autoCapitalize="none"
                    returnKeyType="next"
                    blurOnSubmit={false}
                    onSubmitEditing={() => phoneRef.current?.focus()}
                  />
                </View>

                <View style={styles.dataField}>
                  <Text style={styles.dataLabel}>Tel√©fono</Text>
                  <TextInput
                    ref={phoneRef}
                    style={styles.dataInput}
                    value={localData.phone}
                    onChangeText={(text) => updateLocalField('phone', text)}
                    placeholder="Tel√©fono"
                    placeholderTextColor="#666"
                    keyboardType="phone-pad"
                    autoCorrect={false}
                    returnKeyType="next"
                    blurOnSubmit={false}
                    onSubmitEditing={() => cityRef.current?.focus()}
                  />
                </View>

                <View style={styles.dataField}>
                  <Text style={styles.dataLabel}>Ciudad</Text>
                  <TextInput
                    ref={cityRef}
                    style={styles.dataInput}
                    value={localData.city}
                    onChangeText={(text) => updateLocalField('city', text)}
                    placeholder="Ciudad"
                    placeholderTextColor="#666"
                    returnKeyType="next"
                    blurOnSubmit={false}
                    onSubmitEditing={() => instagramRef.current?.focus()}
                  />
                </View>
              </View>

              <View style={styles.dataSection}>
                <Text style={styles.dataSectionTitle}>Redes Sociales</Text>

                <View style={styles.dataField}>
                  <Text style={styles.dataLabel}>Instagram</Text>
                  <TextInput
                    ref={instagramRef}
                    style={styles.dataInput}
                    value={localData.instagram}
                    onChangeText={(text) => updateLocalField('instagram', text)}
                    placeholder="@usuario"
                    placeholderTextColor="#666"
                    returnKeyType="next"
                    blurOnSubmit={false}
                    onSubmitEditing={() => tiktokRef.current?.focus()}
                  />
                </View>

                <View style={styles.dataField}>
                  <Text style={styles.dataLabel}>TikTok</Text>
                  <TextInput
                    ref={tiktokRef}
                    style={styles.dataInput}
                    value={localData.tiktok}
                    onChangeText={(text) => updateLocalField('tiktok', text)}
                    placeholder="@usuario"
                    placeholderTextColor="#666"
                    returnKeyType="next"
                    blurOnSubmit={false}
                    onSubmitEditing={() => followersRef.current?.focus()}
                  />
                </View>

                <View style={styles.dataField}>
                  <Text style={styles.dataLabel}>Seguidores Instagram</Text>
                  <TextInput
                    ref={followersRef}
                    style={styles.dataInput}
                    value={localData.instagramFollowers}
                    onChangeText={(text) => updateLocalField('instagramFollowers', text)}
                    placeholder="N√∫mero de seguidores (ej: 1000000)"
                    placeholderTextColor="#666"
                    keyboardType="numeric"
                    returnKeyType="done"
                  />
                </View>
              </View>

              <TouchableOpacity
                style={styles.saveButton}
                onPress={handleSave}
              >
                <Text style={styles.saveButtonText}>Guardar Cambios</Text>
              </TouchableOpacity>
            </ScrollView>
          </View>
        </SafeAreaView>
      </Modal>
    );
  });

  const PrivacyPolicyModal = () => (
    <Modal visible={showPrivacyPolicy} animationType="fade" transparent>
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Pol√≠tica de Privacidad</Text>
            <TouchableOpacity onPress={() => setShowPrivacyPolicy(false)}>
              <Ionicons name="close" size={24} color="#C9A961" />
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.policyContent}>
            <Text style={styles.policyTitle}>POL√çTICA DE PRIVACIDAD - ZYRO MARKETPLACE</Text>
            <Text style={styles.policyDate}>√öltima actualizaci√≥n: Noviembre 2025</Text>

            <Text style={styles.policySection}>1. INFORMACI√ìN QUE RECOPILAMOS</Text>
            <Text style={styles.policyText}>
              En ZYRO recopilamos informaci√≥n personal que nos proporcionas directamente, como tu nombre,
              email, n√∫mero de tel√©fono, informaci√≥n de redes sociales y datos de colaboraciones.
            </Text>

            <Text style={styles.policySection}>2. C√ìMO USAMOS TU INFORMACI√ìN</Text>
            <Text style={styles.policyText}>
              Utilizamos tu informaci√≥n para facilitar colaboraciones entre influencers y empresas,
              mejorar nuestros servicios y cumplir con obligaciones legales.
            </Text>

            <Text style={styles.policySection}>3. DERECHOS GDPR</Text>
            <Text style={styles.policyText}>
              Tienes derecho a acceder, rectificar, suprimir y portar tus datos personales.
              Tambi√©n puedes oponerte al tratamiento y solicitar la limitaci√≥n del mismo.
            </Text>

            <Text style={styles.policySection}>4. CONTACTO</Text>
            <Text style={styles.policyText}>
              Para ejercer tus derechos o resolver dudas sobre privacidad, contacta:
              privacidad@zyromarketplace.com
            </Text>
          </ScrollView>
        </View>
      </View>
    </Modal>
  );

  const TermsOfUseModal = () => (
    <Modal visible={showTermsOfUse} animationType="fade" transparent>
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Normas de Uso</Text>
            <TouchableOpacity onPress={() => setShowTermsOfUse(false)}>
              <Ionicons name="close" size={24} color="#C9A961" />
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.policyContent}>
            <Text style={styles.policyTitle}>NORMAS DE USO - ZYRO MARKETPLACE</Text>

            <Text style={styles.policySection}>1. COMPROMISO DE CONTENIDO</Text>
            <Text style={styles.policyText}>
              ‚Ä¢ Debes crear y publicar el contenido acordado (2 stories de Instagram o 1 TikTok)
              {'\n'}‚Ä¢ El contenido debe ser aut√©ntico y de calidad
              {'\n'}‚Ä¢ Debes etiquetar correctamente al negocio y usar hashtags acordados
            </Text>

            <Text style={styles.policySection}>2. COMPORTAMIENTO PROFESIONAL</Text>
            <Text style={styles.policyText}>
              ‚Ä¢ Llega puntual a las colaboraciones
              {'\n'}‚Ä¢ Mant√©n una actitud profesional y respetuosa
              {'\n'}‚Ä¢ Comunica cualquier problema con anticipaci√≥n
            </Text>

            <Text style={styles.policySection}>3. CANCELACIONES</Text>
            <Text style={styles.policyText}>
              ‚Ä¢ Las cancelaciones deben hacerse con al menos 24 horas de antelaci√≥n
              {'\n'}‚Ä¢ Cancelaciones repetitivas pueden resultar en suspensi√≥n de cuenta
            </Text>

            <Text style={styles.policySection}>4. CONSECUENCIAS</Text>
            <Text style={styles.policyText}>
              El incumplimiento de estas normas puede resultar en:
              {'\n'}‚Ä¢ Advertencias
              {'\n'}‚Ä¢ Suspensi√≥n temporal
              {'\n'}‚Ä¢ Eliminaci√≥n permanente de la plataforma
            </Text>
          </ScrollView>
        </View>
      </View>
    </Modal>
  );

  const PasswordSecurityModal = React.memo(() => {
    // Estado local para evitar re-renderizados
    const [currentPassword, setCurrentPassword] = useState('');
    const [newPassword, setNewPassword] = useState('');
    const [confirmNewPassword, setConfirmNewPassword] = useState('');

    // Refs para navegaci√≥n entre campos
    const currentPasswordRef = useRef(null);
    const newPasswordRef = useRef(null);
    const confirmPasswordRef = useRef(null);

    // Limpiar campos cuando se abre el modal
    React.useEffect(() => {
      if (showPasswordSecurity || showCompanyPasswordSecurity) {
        setCurrentPassword('');
        setNewPassword('');
        setConfirmNewPassword('');
      }
    }, [showPasswordSecurity, showCompanyPasswordSecurity]);

    // Funci√≥n para manejar el cambio de contrase√±a
    const handlePasswordChange = useCallback(async () => {
      // Validar que todos los campos est√©n completos
      if (!currentPassword || !newPassword || !confirmNewPassword) {
        Alert.alert('Error', 'Por favor completa todos los campos');
        return;
      }

      // Validar contrase√±a actual
      const userEmail = currentUser?.email;
      const storedPassword = userPasswords[userEmail];

      if (currentPassword !== storedPassword) {
        Alert.alert('Error', 'La contrase√±a actual no es correcta');
        return;
      }

      // Validar que la nueva contrase√±a tenga al menos 6 caracteres
      if (newPassword.length < 6) {
        Alert.alert('Error', 'La nueva contrase√±a debe tener al menos 6 caracteres');
        return;
      }

      // Validar que las contrase√±as coincidan
      if (newPassword !== confirmNewPassword) {
        Alert.alert('Error', 'Las contrase√±as nuevas no coinciden');
        return;
      }

      // Validar que la nueva contrase√±a sea diferente a la actual
      if (newPassword === currentPassword) {
        Alert.alert('Error', 'La nueva contrase√±a debe ser diferente a la actual');
        return;
      }

      // Actualizar la contrase√±a en el sistema usando funci√≥n centralizada
      const success = await updateUserPassword(userEmail, newPassword);

      if (success) {
        // Limpiar campos
        setCurrentPassword('');
        setNewPassword('');
        setConfirmNewPassword('');

        Alert.alert(
          '¬°Contrase√±a Actualizada! üîê',
          'Tu contrase√±a ha sido cambiada exitosamente y guardada permanentemente. Usa la nueva contrase√±a en tu pr√≥ximo inicio de sesi√≥n.',
          [
            {
              text: 'OK',
              onPress: () => {
                setShowPasswordSecurity(false);
                setShowCompanyPasswordSecurity(false);
              }
            }
          ]
        );
      } else {
        Alert.alert('Error', 'No se pudo actualizar la contrase√±a. Int√©ntalo de nuevo.');
      }
    }, [currentPassword, newPassword, confirmNewPassword, currentUser, userPasswords, updateUserPassword]);

  // Return corregido:     return (
      <Modal visible={showPasswordSecurity || showCompanyPasswordSecurity} animationType="fade" transparent>
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>
                {showCompanyPasswordSecurity ? 'Cambiar Contrase√±a de Empresa' : 'Cambiar Contrase√±a'}
              </Text>
              <TouchableOpacity onPress={() => {
                setShowPasswordSecurity(false);
                setShowCompanyPasswordSecurity(false);
              }}>
                <Ionicons name="close" size={24} color="#C9A961" />
              </TouchableOpacity>
            </View>

            <ScrollView
              style={styles.personalDataContent}
              keyboardShouldPersistTaps="handled"
              showsVerticalScrollIndicator={false}
            >
              <View style={styles.dataSection}>
                <Text style={styles.dataSectionTitle}>Actualizar Contrase√±a</Text>
                <Text style={styles.passwordChangeSubtitle}>
                  Ingresa tu contrase√±a actual y define una nueva contrase√±a segura
                </Text>

                <View style={styles.dataField}>
                  <Text style={styles.dataLabel}>Contrase√±a actual *</Text>
                  <TextInput
                    ref={currentPasswordRef}
                    style={styles.dataInput}
                    placeholder="Tu contrase√±a actual"
                    placeholderTextColor="#666"
                    secureTextEntry
                    value={currentPassword}
                    onChangeText={setCurrentPassword}
                    returnKeyType="next"
                    blurOnSubmit={false}
                    onSubmitEditing={() => newPasswordRef.current?.focus()}
                  />
                </View>

                <View style={styles.dataField}>
                  <Text style={styles.dataLabel}>Nueva contrase√±a *</Text>
                  <TextInput
                    ref={newPasswordRef}
                    style={styles.dataInput}
                    placeholder="M√≠nimo 6 caracteres"
                    placeholderTextColor="#666"
                    secureTextEntry
                    value={newPassword}
                    onChangeText={setNewPassword}
                    returnKeyType="next"
                    blurOnSubmit={false}
                    onSubmitEditing={() => confirmPasswordRef.current?.focus()}
                  />
                </View>

                <View style={styles.dataField}>
                  <Text style={styles.dataLabel}>Confirmar nueva contrase√±a *</Text>
                  <TextInput
                    ref={confirmPasswordRef}
                    style={styles.dataInput}
                    placeholder="Repite la nueva contrase√±a"
                    placeholderTextColor="#666"
                    secureTextEntry
                    value={confirmNewPassword}
                    onChangeText={setConfirmNewPassword}
                    returnKeyType="done"
                    onSubmitEditing={handlePasswordChange}
                  />
                </View>

                {/* Indicadores de validaci√≥n */}
                <View style={styles.passwordValidation}>
                  <View style={styles.validationItem}>
                    <Ionicons
                      name={newPassword.length >= 6 ? "checkmark-circle" : "close-circle"}
                      size={16}
                      color={newPassword.length >= 6 ? "#4CAF50" : "#666"}
                    />
                    <Text style={[
                      styles.validationText,
                      { color: newPassword.length >= 6 ? "#4CAF50" : "#666" }
                    ]}>
                      M√≠nimo 6 caracteres
                    </Text>
                  </View>

                  <View style={styles.validationItem}>
                    <Ionicons
                      name={newPassword && confirmNewPassword && newPassword === confirmNewPassword ? "checkmark-circle" : "close-circle"}
                      size={16}
                      color={newPassword && confirmNewPassword && newPassword === confirmNewPassword ? "#4CAF50" : "#666"}
                    />
                    <Text style={[
                      styles.validationText,
                      { color: newPassword && confirmNewPassword && newPassword === confirmNewPassword ? "#4CAF50" : "#666" }
                    ]}>
                      Las contrase√±as coinciden
                    </Text>
                  </View>

                  <View style={styles.validationItem}>
                    <Ionicons
                      name={newPassword && newPassword !== currentPassword ? "checkmark-circle" : "close-circle"}
                      size={16}
                      color={newPassword && newPassword !== currentPassword ? "#4CAF50" : "#666"}
                    />
                    <Text style={[
                      styles.validationText,
                      { color: newPassword && newPassword !== currentPassword ? "#4CAF50" : "#666" }
                    ]}>
                      Diferente a la contrase√±a actual
                    </Text>
                  </View>
                </View>
              </View>

              <TouchableOpacity
                style={[
                  styles.saveButton,
                  (!currentPassword || !newPassword || !confirmNewPassword ||
                    newPassword !== confirmNewPassword || newPassword.length < 6 ||
                    newPassword === currentPassword) && styles.saveButtonDisabled
                ]}
                onPress={handlePasswordChange}
                disabled={
                  !currentPassword || !newPassword || !confirmNewPassword ||
                  newPassword !== confirmNewPassword || newPassword.length < 6 ||
                  newPassword === currentPassword
                }
              >
                <Text style={[
                  styles.saveButtonText,
                  (!currentPassword || !newPassword || !confirmNewPassword ||
                    newPassword !== confirmNewPassword || newPassword.length < 6 ||
                    newPassword === currentPassword) && styles.saveButtonTextDisabled
                ]}>
                  Actualizar Contrase√±a
                </Text>
              </TouchableOpacity>
            </ScrollView>
          </View>
        </View>
      </Modal>
    );
  });





  const CitySelectionModal = () => (
    <Modal visible={showCityDropdown} animationType="fade" transparent>
      <View style={styles.cityModalOverlay}>
        <View style={styles.cityModalContainer}>
          {/* Handle bar */}
          <View style={styles.cityModalHandle} />

          {/* Header */}
          <View style={styles.cityModalHeader}>
            <Text style={styles.cityModalTitle}>C√°mbiate de ciudad</Text>
            <TouchableOpacity
              style={styles.cityModalCancelButton}
              onPress={() => setShowCityDropdown(false)}
            >
              <Text style={styles.cityModalCancelText}>Cancelar</Text>
            </TouchableOpacity>
          </View>

          {/* Country indicator */}
          <View style={styles.cityModalCountry}>
            <Text style={styles.cityModalCountryIcon}>üá™üá∏</Text>
            <Text style={styles.cityModalCountryText}>Espa√±a</Text>
          </View>

          {/* Cities list */}
          <ScrollView style={styles.cityModalList} showsVerticalScrollIndicator={false}>
            {cities.map((city, index) => (
              <TouchableOpacity
                key={city}
                style={[
                  styles.cityModalListItem,
                  selectedCity === city && styles.cityModalListItemSelected
                ]}
                onPress={() => {
                  setSelectedCity(city);
                  setShowCityDropdown(false);
                }}
              >
                <Text style={[
                  styles.cityModalListItemText,
                  selectedCity === city && styles.cityModalListItemTextSelected
                ]}>
                  {city}
                </Text>
                {selectedCity === city && (
                  <Ionicons name="checkmark" size={20} color="#C9A961" />
                )}
              </TouchableOpacity>
            ))}
          </ScrollView>

          {/* Bottom indicator */}
          <View style={styles.cityModalBottomIndicator} />
        </View>
      </View>
    </Modal>
  );

  const HelpSupportModal = () => (
    <Modal visible={showHelpSupport} animationType="fade" transparent>
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Ayuda y Soporte</Text>
            <TouchableOpacity onPress={() => setShowHelpSupport(false)}>
              <Ionicons name="close" size={24} color="#C9A961" />
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.helpContent}>
            <Text style={styles.helpSectionTitle}>Preguntas Frecuentes</Text>

            <View style={styles.faqItem}>
              <Text style={styles.faqQuestion}>¬øC√≥mo solicito una colaboraci√≥n?</Text>
              <Text style={styles.faqAnswer}>
                Navega por las colaboraciones disponibles, selecciona una que te interese y pulsa
                "Solicitar Colaboraci√≥n". Elige fecha y hora, y env√≠a tu solicitud.
              </Text>
            </View>

            <View style={styles.faqItem}>
              <Text style={styles.faqQuestion}>¬øCu√°nto tiempo tarda la aprobaci√≥n?</Text>
              <Text style={styles.faqAnswer}>
                Las solicitudes se revisan en 24-48 horas. Recibir√°s una notificaci√≥n con la respuesta.
              </Text>
            </View>

            <View style={styles.faqItem}>
              <Text style={styles.faqQuestion}>¬øQu√© contenido debo crear?</Text>
              <Text style={styles.faqAnswer}>
                Cada colaboraci√≥n especifica el contenido requerido (generalmente 2 stories de Instagram
                o 1 TikTok). Revisa los detalles antes de solicitar.
              </Text>
            </View>



            <Text style={styles.helpSectionTitle}>Contacto</Text>

            <TouchableOpacity style={styles.contactOption}>
              <Ionicons name="mail-outline" size={24} color="#C9A961" />
              <View style={styles.contactInfo}>
                <Text style={styles.contactTitle}>Email</Text>
                <Text style={styles.contactDetail}>zyroappnacho@gmail.com</Text>
              </View>
            </TouchableOpacity>

            <TouchableOpacity style={styles.contactOption}>
              <Ionicons name="call-outline" size={24} color="#C9A961" />
              <View style={styles.contactInfo}>
                <Text style={styles.contactTitle}>Tel√©fono</Text>
                <Text style={styles.contactDetail}>+34 682373844</Text>
              </View>
            </TouchableOpacity>
          </ScrollView>
        </View>
      </View>
    </Modal>
  );



  const CompanyRequestsModal = () => (
    <Modal visible={showCompanyRequests} animationType="fade" transparent={false}>
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor="#000000" />

        {/* Header */}
        <View style={styles.companyRequestsHeader}>
          <TouchableOpacity
            style={styles.companyRequestsBackButton}
            onPress={() => setShowCompanyRequests(false)}
          >
            <Ionicons name="arrow-back" size={20} color="#C9A961" />
          </TouchableOpacity>
          <Text style={styles.companyRequestsTitle}>Solicitudes de Influencers</Text>
        </View>

        {/* Filtros de estado */}
        <View style={styles.requestsFilters}>
          <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.filtersScroll}>
            <TouchableOpacity
              style={[styles.filterButton, requestsFilter === 'all' && styles.filterButtonActive]}
              onPress={() => setRequestsFilter('all')}
            >
              <Text style={[styles.filterButtonText, requestsFilter === 'all' && styles.filterButtonTextActive]}>Todas</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.filterButton, requestsFilter === 'pending' && styles.filterButtonActive]}
              onPress={() => setRequestsFilter('pending')}
            >
              <Text style={[styles.filterButtonText, requestsFilter === 'pending' && styles.filterButtonTextActive]}>Pendientes</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.filterButton, requestsFilter === 'approved' && styles.filterButtonActive]}
              onPress={() => setRequestsFilter('approved')}
            >
              <Text style={[styles.filterButtonText, requestsFilter === 'approved' && styles.filterButtonTextActive]}>Aprobadas</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.filterButton, requestsFilter === 'rejected' && styles.filterButtonActive]}
              onPress={() => setRequestsFilter('rejected')}
            >
              <Text style={[styles.filterButtonText, requestsFilter === 'rejected' && styles.filterButtonTextActive]}>Rechazadas</Text>
            </TouchableOpacity>
          </ScrollView>
        </View>

        {/* Lista de solicitudes */}
        <ScrollView style={styles.requestsList}>
          {getCompanyRequests()
            .filter((request) => {
              if (requestsFilter === 'all') return true;
  // Return corregido:               return request.status === requestsFilter;
            })
            .map((request) => (
              <View key={request.id} style={styles.requestCard}>
                {/* Header de la solicitud */}
                <View style={styles.requestCardHeader}>
                  <View style={styles.influencerInfo}>
                    <View style={styles.influencerAvatar}>
                      <Ionicons name="person" size={20} color="#C9A961" />
                    </View>
                    <View style={styles.influencerDetails}>
                      <Text style={styles.influencerName}>{request.influencerName}</Text>
                      <Text style={styles.influencerUsername}>{request.influencerUsername}</Text>
                      <Text style={styles.influencerFollowers}>
                        {request.influencerFollowers.toLocaleString()} seguidores
                      </Text>
                    </View>
                  </View>
                  <View style={[
                    styles.requestStatusBadge,
                    request.status === 'pending' && styles.statusPending,
                    request.status === 'approved' && styles.statusApproved,
                    request.status === 'rejected' && styles.statusRejected
                  ]}>
                    <Text style={styles.requestStatusText}>
                      {request.status === 'pending' ? 'PENDIENTE' :
                        request.status === 'approved' ? 'APROBADA' : 'RECHAZADA'}
                    </Text>
                  </View>
                </View>

                {/* Informaci√≥n de la colaboraci√≥n */}
                <View style={styles.collaborationInfo}>
                  <Text style={styles.collaborationTitle}>{request.collaborationTitle}</Text>
                  <View style={styles.requestDetails}>
                    <View style={styles.requestDetailItem}>
                      <Ionicons name="calendar-outline" size={16} color="#C9A961" />
                      <Text style={styles.requestDetailText}>
                        {new Date(request.requestedDate).toLocaleDateString('es-ES')} a las {request.requestedTime}
                      </Text>
                    </View>
                    <View style={styles.requestDetailItem}>
                      <Ionicons name="time-outline" size={16} color="#999" />
                      <Text style={styles.requestDetailText}>
                        Solicitado el {new Date(request.requestDate).toLocaleDateString('es-ES')}
                      </Text>
                    </View>
                  </View>
                </View>

                {/* Mensaje del influencer */}
                <View style={styles.influencerMessage}>
                  <Text style={styles.messageLabel}>Mensaje:</Text>
                  <Text style={styles.messageText}>{request.message}</Text>
                </View>

                {/* Informaci√≥n del Influencer */}
                <View style={styles.influencerFollowersInfo}>
                  <Text style={styles.followersLabel}>Seguidores de Instagram:</Text>
                  <View style={styles.followersDisplay}>
                    <Ionicons name="logo-instagram" size={20} color="#E4405F" />
                    <Text style={styles.followersCount}>{(request.influencerFollowers || 0).toLocaleString()}</Text>
                    <Text style={styles.followersText}>seguidores</Text>
                  </View>
                </View>

                {/* Nota informativa */}
                <View style={styles.adminNote}>
                  <Ionicons name="information-circle-outline" size={16} color="#FF9800" />
                  <Text style={styles.adminNoteText}>
                    Solo el administrador puede aprobar o rechazar solicitudes
                  </Text>
                </View>

                {/* Botones de contacto */}
                <View style={styles.contactButtons}>
                  <TouchableOpacity
                    style={styles.contactButton}
                    onPress={() => Alert.alert(
                      'Contactar Influencer',
                      `Email: ${request.influencerEmail}\n\nPuedes contactar directamente con ${request.influencerName} para coordinar detalles adicionales.`
                    )}
                  >
                    <Ionicons name="mail-outline" size={16} color="#C9A961" />
                    <Text style={styles.contactButtonText}>Contactar</Text>
                  </TouchableOpacity>

                  <TouchableOpacity
                    style={styles.viewProfileButton}
                    onPress={() => Alert.alert(
                      'Perfil del Influencer',
                      `${request.influencerName}\n${request.influencerUsername}\n\nEsta funcionalidad estar√° disponible pr√≥ximamente.`
                    )}
                  >
                    <Ionicons name="person-outline" size={16} color="#666" />
                    <Text style={styles.viewProfileButtonText}>Ver Perfil</Text>
                  </TouchableOpacity>
                </View>
              </View>
            ))}

          {/* Estado vac√≠o cuando no hay solicitudes para el filtro seleccionado */}
          {getCompanyRequests().filter((request) => {
            if (requestsFilter === 'all') return true;
  // Return corregido:             return request.status === requestsFilter;
          }).length === 0 && (
              <View style={styles.emptyRequestsState}>
                <Ionicons
                  name={
                    requestsFilter === 'pending' ? 'time-outline' :
                      requestsFilter === 'approved' ? 'checkmark-circle-outline' :
                        requestsFilter === 'rejected' ? 'close-circle-outline' :
                          'document-outline'
                  }
                  size={64}
                  color="#666"
                />
                <Text style={styles.emptyRequestsTitle}>
                  {requestsFilter === 'pending' ? 'No hay solicitudes pendientes' :
                    requestsFilter === 'approved' ? 'No hay solicitudes aprobadas' :
                      requestsFilter === 'rejected' ? 'No hay solicitudes rechazadas' :
                        'No hay solicitudes disponibles'}
                </Text>
                <Text style={styles.emptyRequestsSubtitle}>
                  {requestsFilter === 'pending' ? 'Las nuevas solicitudes aparecer√°n aqu√≠' :
                    requestsFilter === 'approved' ? 'Las solicitudes aprobadas por el administrador aparecer√°n aqu√≠' :
                      requestsFilter === 'rejected' ? 'Las solicitudes rechazadas aparecer√°n aqu√≠' :
                        'Todas las solicitudes aparecer√°n aqu√≠'}
                </Text>
              </View>
            )}
        </ScrollView>
      </SafeAreaView>
    </Modal>
  );

  // Modal para editar datos personales de empresa
  const CompanyPersonalDataModal = () => {
    const [localCompanyData, setLocalCompanyData] = useState({});

    // Cargar datos personales m√°s recientes cuando se abre el modal
    useEffect(() => {
      const loadLatestCompanyData = async () => {
        if (showCompanyPersonalData && currentUser) {
          try {
            // Primero intentar cargar desde datos personales (m√°s recientes)
            const personalDataKey = `personalData_${currentUser.email}`;
            const savedPersonalData = await AsyncStorage.getItem(personalDataKey);

            if (savedPersonalData) {
              const parsedPersonalData = JSON.parse(savedPersonalData);
              setLocalCompanyData({
                companyName: parsedPersonalData.companyName || '',
                cif: parsedPersonalData.cif || '',
                address: parsedPersonalData.address || '',
                phone: parsedPersonalData.phone || '',
                email: parsedPersonalData.email || currentUser.email,
                contactName: parsedPersonalData.contactName || '',
                contactEmail: parsedPersonalData.contactEmail || '',
                position: parsedPersonalData.position || parsedPersonalData.contactPosition || '',
                businessType: parsedPersonalData.businessType || parsedPersonalData.sector || '',
                description: parsedPersonalData.description || '',
                website: parsedPersonalData.website || ''
              });
              console.log('‚úÖ Datos personales cargados desde storage:', personalDataKey);
            } else {
              // Fallback: cargar desde registeredCompanies
              const currentCompany = registeredCompanies.find(c => c && c.email === currentUser.email);
              if (currentCompany) {
                setLocalCompanyData({
                  companyName: currentCompany.companyName || '',
                  cif: currentCompany.cif || '',
                  address: currentCompany.address || '',
                  phone: currentCompany.phone || '',
                  email: currentCompany.email || '',
                  contactName: currentCompany.contactName || '',
                  contactEmail: currentCompany.contactEmail || '',
                  position: currentCompany.position || '',
                  businessType: currentCompany.businessType || '',
                  description: currentCompany.description || '',
                  website: currentCompany.website || ''
                });
                console.log('‚úÖ Datos cargados desde registeredCompanies (fallback)');
              }
            }
          } catch (error) {
            console.error('‚ùå Error cargando datos de empresa:', error);
            // En caso de error, usar datos de registeredCompanies
            const currentCompany = registeredCompanies.find(c => c && c.email === currentUser.email);
            if (currentCompany) {
              setLocalCompanyData({
                companyName: currentCompany.companyName || '',
                cif: currentCompany.cif || '',
                address: currentCompany.address || '',
                phone: currentCompany.phone || '',
                email: currentCompany.email || '',
                contactName: currentCompany.contactName || '',
                contactEmail: currentCompany.contactEmail || '',
                position: currentCompany.position || '',
                businessType: currentCompany.businessType || '',
                description: currentCompany.description || '',
                website: currentCompany.website || ''
              });
            }
          }
        }
      };

      loadLatestCompanyData();
    }, [showCompanyPersonalData, currentUser, registeredCompanies]);

    const updateLocalCompanyField = (field, value) => {
      setLocalCompanyData(prev => ({
        ...prev,
        [field]: value
      }));
    };

    const handleSaveCompanyData = async () => {
      try {
        // Validar campos obligatorios
        if (!localCompanyData.companyName || !localCompanyData.cif || !localCompanyData.address ||
          !localCompanyData.phone || !localCompanyData.email || !localCompanyData.contactName ||
          !localCompanyData.contactEmail || !localCompanyData.position || !localCompanyData.businessType ||
          !localCompanyData.description) {
          Alert.alert('Error', 'Por favor completa todos los campos obligatorios (*)');
          return;
        }

        const timestamp = new Date().toISOString();
        const dateString = new Date().toLocaleDateString();

        // Preparar datos actualizados con timestamp
        const updatedCompanyData = {
          ...localCompanyData,
          lastUpdated: timestamp,
          lastDataUpdate: dateString
        };

        // 1. Actualizar la empresa en registeredCompanies
        const updatedCompanies = registeredCompanies.map(company => {
          if (company && company.email === currentUser.email) {
            return {
              ...company,
              ...updatedCompanyData
            };
          }
          return company;
        });

        setRegisteredCompanies(updatedCompanies);

        // 2. Guardar en AsyncStorage (companies)
        await AsyncStorage.setItem('companies', JSON.stringify(updatedCompanies));
        console.log('‚úÖ Datos guardados en companies:', updatedCompanyData.companyName);

        // 3. IMPORTANTE: Guardar tambi√©n en la clave espec√≠fica de datos personales
        // Esta es la clave que usa el administrador para mostrar datos actualizados
        const personalDataKey = `personalData_${currentUser.email}`;
        const personalDataForAdmin = {
          companyName: updatedCompanyData.companyName,
          cif: updatedCompanyData.cif,
          address: updatedCompanyData.address,
          phone: updatedCompanyData.phone,
          email: updatedCompanyData.email,
          contactName: updatedCompanyData.contactName,
          contactEmail: updatedCompanyData.contactEmail,
          contactPosition: updatedCompanyData.position,
          position: updatedCompanyData.position,
          businessType: updatedCompanyData.businessType,
          sector: updatedCompanyData.businessType,
          description: updatedCompanyData.description,
          website: updatedCompanyData.website,
          lastUpdate: dateString,
          lastUpdated: timestamp
        };

        await AsyncStorage.setItem(personalDataKey, JSON.stringify(personalDataForAdmin));
        console.log('‚úÖ Datos personales guardados para admin:', personalDataKey);

        // 4. Si el email cambi√≥, manejar la migraci√≥n de datos
        if (localCompanyData.email !== currentUser.email) {
          // Guardar datos en la nueva clave de email
          const newPersonalDataKey = `personalData_${localCompanyData.email}`;
          await AsyncStorage.setItem(newPersonalDataKey, JSON.stringify(personalDataForAdmin));

          // Eliminar datos del email anterior
          await AsyncStorage.removeItem(personalDataKey);
          console.log('üîÑ Datos migrados de', currentUser.email, 'a', localCompanyData.email);

          // Actualizar currentUser
          const updatedUser = {
            ...currentUser,
            email: localCompanyData.email,
            businessName: localCompanyData.companyName
          };
          setCurrentUser(updatedUser);
          await AsyncStorage.setItem('currentUser', JSON.stringify(updatedUser));
        } else {
          // Solo actualizar el nombre del negocio si cambi√≥
          const updatedUser = {
            ...currentUser,
            businessName: localCompanyData.companyName
          };
          setCurrentUser(updatedUser);
          await AsyncStorage.setItem('currentUser', JSON.stringify(updatedUser));
        }

        // 5. Verificar que los datos se guardaron correctamente
        const verification = await AsyncStorage.getItem(personalDataKey);
        if (verification) {
          console.log('‚úÖ Verificaci√≥n exitosa: Datos persistentes guardados');
        }

        Alert.alert(
          '‚úÖ Datos Actualizados Permanentemente',
          'Tus datos personales han sido actualizados y guardados permanentemente.\n\n‚Ä¢ Los cambios persisten al cerrar la app\n‚Ä¢ Disponibles inmediatamente para el administrador\n‚Ä¢ Sincronizaci√≥n completa realizada',
          [
            {
              text: 'OK',
              onPress: () => setShowCompanyPersonalData(false)
            }
          ]
        );

      } catch (error) {
        console.error('‚ùå Error guardando datos de empresa:', error);
        Alert.alert(
          'Error de Guardado',
          'No se pudieron guardar los datos permanentemente. Verifica tu conexi√≥n e int√©ntalo de nuevo.',
          [{ text: 'Reintentar', onPress: () => handleSaveCompanyData() }]
        );
      }
    };

  // Return corregido:     return (
      <Modal visible={showCompanyPersonalData} animationType="fade" transparent={false}>
        <SafeAreaView style={styles.container}>
          <StatusBar barStyle="light-content" backgroundColor="#000000" />

          {/* Header */}
          <View style={styles.companyRequestsHeader}>
            <TouchableOpacity
              style={styles.companyRequestsBackButton}
              onPress={() => setShowCompanyPersonalData(false)}
            >
              <Ionicons name="arrow-back" size={20} color="#C9A961" />
            </TouchableOpacity>
            <Text style={styles.companyRequestsTitle}>Datos Personales</Text>
          </View>

          <ScrollView style={styles.personalDataForm} showsVerticalScrollIndicator={false}>
            {/* Informaci√≥n de la Empresa */}
            <Text style={styles.sectionTitle}>Informaci√≥n de la Empresa</Text>

            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Nombre de la empresa *</Text>
              <TextInput
                style={styles.formInput}
                placeholder="Nombre de tu empresa"
                placeholderTextColor="#888"
                value={localCompanyData.companyName || ''}
                onChangeText={(text) => updateLocalCompanyField('companyName', text)}
              />
            </View>

            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>CIF/NIF *</Text>
              <TextInput
                style={styles.formInput}
                placeholder="CIF de la empresa"
                placeholderTextColor="#888"
                value={localCompanyData.cif || ''}
                onChangeText={(text) => updateLocalCompanyField('cif', text)}
              />
            </View>

            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Direcci√≥n completa *</Text>
              <TextInput
                style={styles.formInput}
                placeholder="Direcci√≥n de la empresa"
                placeholderTextColor="#888"
                value={localCompanyData.address || ''}
                onChangeText={(text) => updateLocalCompanyField('address', text)}
              />
            </View>

            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Tel√©fono de la empresa *</Text>
              <TextInput
                style={styles.formInput}
                placeholder="Tel√©fono corporativo"
                placeholderTextColor="#888"
                keyboardType="phone-pad"
                value={localCompanyData.phone || ''}
                onChangeText={(text) => updateLocalCompanyField('phone', text)}
              />
            </View>

            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Email corporativo *</Text>
              <TextInput
                style={styles.formInput}
                placeholder="email@empresa.com"
                placeholderTextColor="#888"
                keyboardType="email-address"
                value={localCompanyData.email || ''}
                onChangeText={(text) => updateLocalCompanyField('email', text)}
              />
            </View>

            {/* Contacto y Representante */}
            <Text style={styles.sectionTitle}>Contacto y Representante</Text>

            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Nombre del representante *</Text>
              <TextInput
                style={styles.formInput}
                placeholder="Nombre del contacto principal"
                placeholderTextColor="#888"
                value={localCompanyData.contactName || ''}
                onChangeText={(text) => updateLocalCompanyField('contactName', text)}
              />
            </View>

            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Email del representante *</Text>
              <TextInput
                style={styles.formInput}
                placeholder="contacto@empresa.com"
                placeholderTextColor="#888"
                keyboardType="email-address"
                value={localCompanyData.contactEmail || ''}
                onChangeText={(text) => updateLocalCompanyField('contactEmail', text)}
              />
            </View>

            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Cargo del representante *</Text>
              <TextInput
                style={styles.formInput}
                placeholder="Director de Marketing, CEO, etc."
                placeholderTextColor="#888"
                value={localCompanyData.position || ''}
                onChangeText={(text) => updateLocalCompanyField('position', text)}
              />
            </View>

            {/* Informaci√≥n del Negocio */}
            <Text style={styles.sectionTitle}>Informaci√≥n del Negocio</Text>

            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Tipo de negocio *</Text>
              <TextInput
                style={styles.formInput}
                placeholder="Restaurante, Tienda de moda, Spa, etc."
                placeholderTextColor="#888"
                value={localCompanyData.businessType || ''}
                onChangeText={(text) => updateLocalCompanyField('businessType', text)}
              />
            </View>

            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Descripci√≥n del negocio *</Text>
              <TextInput
                style={[styles.formInput, styles.textArea]}
                placeholder="Describe tu negocio y qu√© tipo de colaboraciones buscas..."
                placeholderTextColor="#888"
                multiline
                numberOfLines={4}
                value={localCompanyData.description || ''}
                onChangeText={(text) => updateLocalCompanyField('description', text)}
              />
            </View>

            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Sitio web</Text>
              <TextInput
                style={styles.formInput}
                placeholder="https://www.tuempresa.com (opcional)"
                placeholderTextColor="#888"
                value={localCompanyData.website || ''}
                onChangeText={(text) => updateLocalCompanyField('website', text)}
              />
            </View>

            {/* Botones de acci√≥n */}
            <View style={styles.personalDataActions}>
              <TouchableOpacity
                style={styles.cancelButton}
                onPress={() => setShowCompanyPersonalData(false)}
              >
                <Text style={styles.cancelButtonText}>Cancelar</Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={styles.saveButton}
                onPress={handleSaveCompanyData}
              >
                <Text style={styles.saveButtonText}>Guardar Cambios</Text>
              </TouchableOpacity>
            </View>
          </ScrollView>
        </SafeAreaView>
      </Modal>
    );
  };

  const SubscriptionManagementModal = () => (
    <Modal visible={showSubscriptionManagement} animationType="fade" transparent={false}>
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor="#000000" />

        {/* Header */}
        <View style={styles.subscriptionHeader}>
          <TouchableOpacity
            style={styles.subscriptionBackButton}
            onPress={() => setShowSubscriptionManagement(false)}
          >
            <Ionicons name="arrow-back" size={20} color="#C9A961" />
          </TouchableOpacity>
          <Text style={styles.subscriptionTitle}>Gestionar Suscripci√≥n</Text>
        </View>

        <ScrollView style={styles.subscriptionContent}>
          {/* Estado actual de la suscripci√≥n */}
          <View style={styles.subscriptionStatusCard}>
            <View style={styles.subscriptionStatusHeader}>
              <Ionicons name="shield-checkmark" size={24} color="#4CAF50" />
              <Text style={styles.subscriptionStatusTitle}>Suscripci√≥n Activa</Text>
            </View>
            <View style={styles.subscriptionStatusDetails}>
              <View style={styles.subscriptionStatusRow}>
                <Text style={styles.subscriptionStatusLabel}>Plan actual:</Text>
                <Text style={styles.subscriptionStatusValue}>{subscriptionData.currentPlan}</Text>
              </View>
              <View style={styles.subscriptionStatusRow}>
                <Text style={styles.subscriptionStatusLabel}>Precio:</Text>
                <Text style={styles.subscriptionStatusValue}>‚Ç¨{subscriptionData.price}/mes</Text>
              </View>
              <View style={styles.subscriptionStatusRow}>
                <Text style={styles.subscriptionStatusLabel}>Pr√≥ximo cobro:</Text>
                <Text style={styles.subscriptionStatusValue}>{subscriptionData.nextBilling}</Text>
              </View>
              <View style={styles.subscriptionStatusRow}>
                <Text style={styles.subscriptionStatusLabel}>M√©todo de pago:</Text>
                <Text style={styles.subscriptionStatusValue}>{subscriptionData.paymentMethod}</Text>
              </View>
            </View>
          </View>

          {/* Cambiar plan */}
          <View style={styles.subscriptionSection}>
            <Text style={styles.subscriptionSectionTitle}>Cambiar Plan</Text>
            <Text style={styles.subscriptionSectionSubtitle}>
              Actualiza tu plan para acceder a m√°s funciones
            </Text>

            <View style={styles.plansContainer}>
              {(() => {
                const currentPlan = getCurrentCompanyPlan();
                const allPlans = [
                  { id: 'plan3', name: 'Plan 3 meses', price: 499, duration: '3 meses', displayPrice: '‚Ç¨499/mes' },
                  { id: 'plan6', name: 'Plan 6 meses', price: 399, duration: '6 meses', displayPrice: '‚Ç¨399/mes' },
                  { id: 'plan12', name: 'Plan 12 meses', price: 299, duration: '12 meses', displayPrice: '‚Ç¨299/mes' }
                ];

  // Return corregido:                 return allPlans.map((plan) => {
                  const isCurrentPlan = currentPlan && currentPlan.name === plan.name;
                  const savings = plan.id === 'plan6' ? '‚Ç¨100/mes vs Plan 3 meses' :
                    plan.id === 'plan12' ? '‚Ç¨200/mes vs Plan 3 meses' : null;

  // Return corregido:                   return (
                    <TouchableOpacity
                      key={plan.id}
                      style={[styles.planCard, isCurrentPlan && styles.planCardActive]}
                    >
                      <View style={styles.planHeader}>
                        <Text style={styles.planName}>{plan.name}</Text>
                        <Text style={styles.planPrice}>{plan.displayPrice}</Text>
                        {isCurrentPlan && (
                          <View style={styles.currentPlanBadge}>
                            <Text style={styles.currentPlanBadgeText}>ACTUAL</Text>
                          </View>
                        )}
                      </View>
                      <View style={styles.planFeatures}>
                        <Text style={styles.planFeature}>‚Ä¢ Acceso completo a colaboraciones</Text>
                        <Text style={styles.planFeature}>‚Ä¢ Gesti√≥n por administrador</Text>
                        <Text style={styles.planFeature}>‚Ä¢ Sin comisiones adicionales</Text>
                        <Text style={styles.planFeature}>‚Ä¢ Duraci√≥n: {plan.duration}</Text>
                        {savings && <Text style={styles.planFeature}>‚Ä¢ Ahorro: {savings}</Text>}
                        {plan.id === 'plan12' && <Text style={styles.planFeature}>‚Ä¢ Mejor precio garantizado</Text>}
                      </View>
                      <TouchableOpacity
                        style={[styles.planButton, isCurrentPlan && styles.planButtonActive]}
                        disabled={isCurrentPlan}
                        onPress={() => !isCurrentPlan && confirmPlanChange(plan.id)}
                      >
                        <Text style={[styles.planButtonText, isCurrentPlan && styles.planButtonTextActive]}>
                          {isCurrentPlan ? 'Plan Actual' : `Cambiar a ${plan.name}`}
                        </Text>
                      </TouchableOpacity>
                    </TouchableOpacity>
                  );
                });
              })()}
            </View>
          </View>

          {/* M√©todo de pago */}
          <View style={styles.subscriptionSection}>
            <Text style={styles.subscriptionSectionTitle}>M√©todo de Pago</Text>
            <Text style={styles.subscriptionSectionSubtitle}>
              Gestiona tu informaci√≥n de facturaci√≥n
            </Text>

            <View style={styles.paymentMethodCard}>
              <View style={styles.paymentMethodInfo}>
                <Ionicons name="card" size={24} color="#C9A961" />
                <View style={styles.paymentMethodDetails}>
                  <Text style={styles.paymentMethodTitle}>{subscriptionData.paymentMethod}</Text>
                  <Text style={styles.paymentMethodSubtitle}>Expira 12/2027</Text>
                </View>
              </View>
              <TouchableOpacity
                style={styles.paymentMethodButton}
                onPress={() => {
                  setShowSubscriptionManagement(false);
                  setTimeout(() => {
                    setShowPaymentMethodChange(true);
                  }, 300);
                }}
              >
                <Text style={styles.paymentMethodButtonText}>Cambiar</Text>
              </TouchableOpacity>
            </View>


          </View>


          {/* Historial de facturaci√≥n */}
          <View style={styles.subscriptionSection}>
            <Text style={styles.subscriptionSectionTitle}>Historial de Facturaci√≥n</Text>
            <Text style={styles.subscriptionSectionSubtitle}>
              Meses pagados de tu suscripci√≥n
            </Text>

            <View style={styles.billingHistoryContainer}>
              {/* L√≠nea de tiempo visual */}
              <View style={styles.timelineContainer}>
                <View style={styles.timelineItem}>
                  <View style={styles.timelineDot} />
                  <View style={styles.timelineContent}>
                    <Text style={styles.timelineMonth}>Diciembre 2024</Text>
                    <Text style={styles.timelineAmount}>‚Ç¨399.00</Text>
                    <Text style={styles.timelineStatus}>‚úì Pagado</Text>
                  </View>
                </View>

                <View style={styles.timelineLine} />

                <View style={styles.timelineItem}>
                  <View style={styles.timelineDot} />
                  <View style={styles.timelineContent}>
                    <Text style={styles.timelineMonth}>Noviembre 2024</Text>
                    <Text style={styles.timelineAmount}>‚Ç¨399.00</Text>
                    <Text style={styles.timelineStatus}>‚úì Pagado</Text>
                  </View>
                </View>

                <View style={styles.timelineLine} />

                <View style={styles.timelineItem}>
                  <View style={styles.timelineDot} />
                  <View style={styles.timelineContent}>
                    <Text style={styles.timelineMonth}>Octubre 2024</Text>
                    <Text style={styles.timelineAmount}>‚Ç¨399.00</Text>
                    <Text style={styles.timelineStatus}>‚úì Pagado</Text>
                  </View>
                </View>

                <View style={styles.timelineLine} />

                <View style={styles.timelineItem}>
                  <View style={styles.timelineDot} />
                  <View style={styles.timelineContent}>
                    <Text style={styles.timelineMonth}>Septiembre 2024</Text>
                    <Text style={styles.timelineAmount}>‚Ç¨399.00</Text>
                    <Text style={styles.timelineStatus}>‚úì Pagado</Text>
                  </View>
                </View>
              </View>

              {/* Resumen de pagos */}
              <View style={styles.billingStats}>
                <View style={styles.statItem}>
                  <Text style={styles.statNumber}>4</Text>
                  <Text style={styles.statLabel}>Meses pagados</Text>
                </View>
                <View style={styles.statItem}>
                  <Text style={styles.statNumber}>100%</Text>
                  <Text style={styles.statLabel}>Pagos exitosos</Text>
                </View>
              </View>
            </View>
          </View>

          {/* Zona de peligro */}
          <View style={styles.subscriptionSection}>
            <Text style={styles.subscriptionSectionTitle}>Zona de Peligro</Text>
            <Text style={styles.subscriptionSectionSubtitle}>
              Acciones irreversibles para tu suscripci√≥n
            </Text>



            <TouchableOpacity
              style={styles.cancelSubscriptionButton}
              onPress={handleCancelSubscription}
            >
              <Ionicons name="close-circle-outline" size={20} color="#F44336" />
              <Text style={styles.cancelSubscriptionText}>Cancelar Suscripci√≥n</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </SafeAreaView>
    </Modal>
  );

  const PaymentMethodChangeModal = React.memo(() => {
    // Estado local para evitar re-renderizados
    const [localPaymentData, setLocalPaymentData] = useState(paymentMethodData);
    const [localNewPaymentMethod, setLocalNewPaymentMethod] = useState(newPaymentMethod);

    // Refs para navegaci√≥n entre campos
    const cardNumberRef = useRef(null);
    const expiryDateRef = useRef(null);
    const cvvRef = useRef(null);
    const cardholderNameRef = useRef(null);
    const emailRef = useRef(null);
    const bankAccountRef = useRef(null);
    const bankNameRef = useRef(null);

    // Estado para validaci√≥n en tiempo real
    const [fieldValidation, setFieldValidation] = useState({
      cardNumber: { isValid: null, message: '' },
      expiryDate: { isValid: null, message: '' },
      cvv: { isValid: null, message: '' },
      cardholderName: { isValid: null, message: '' },
      email: { isValid: null, message: '' },
      bankAccount: { isValid: null, message: '' },
      bankName: { isValid: null, message: '' }
    });

    // Sincronizar estado local con estado padre cuando cambie
    React.useEffect(() => {
      setLocalPaymentData(paymentMethodData);
    }, [paymentMethodData]);

    React.useEffect(() => {
      setLocalNewPaymentMethod(newPaymentMethod);
    }, [newPaymentMethod]);

    // Funciones optimizadas para actualizar campos con validaci√≥n en tiempo real
    const updateLocalField = useCallback((field, value) => {
      setLocalPaymentData(prev => {
        if (prev[field] === value) return prev;
        return { ...prev, [field]: value };
      });

      // Validaci√≥n en tiempo real
      let validation = { isValid: null, message: '' };

      switch (field) {
        case 'cardNumber':
          if (value.length > 0) {
            const cleanNumber = value.replace(/\D/g, '');
            if (cleanNumber.length >= 13) {
              const cardValidation = validateCreditCard(value, '12/25', '123', 'Test');
              validation = {
                isValid: cardValidation.isValid,
                message: cardValidation.isValid ? `${cardValidation.cardType} v√°lida` : cardValidation.error
              };
            } else if (cleanNumber.length > 0) {
              validation = { isValid: false, message: 'M√≠nimo 13 d√≠gitos' };
            }
          }
          break;
        case 'expiryDate':
          if (value.length > 0) {
            if (value.match(/^\d{2}\/\d{2}$/)) {
              const [month, year] = value.split('/').map(num => parseInt(num));
              const currentDate = new Date();
              const currentYear = currentDate.getFullYear() % 100;
              const currentMonth = currentDate.getMonth() + 1;

              if (month >= 1 && month <= 12 && (year > currentYear || (year === currentYear && month >= currentMonth))) {
                validation = { isValid: true, message: 'Fecha v√°lida' };
              } else {
                validation = { isValid: false, message: 'Fecha inv√°lida o vencida' };
              }
            } else {
              validation = { isValid: false, message: 'Formato MM/AA' };
            }
          }
          break;
        case 'cvv':
          if (value.length > 0) {
            if (value.length >= 3 && value.length <= 4) {
              validation = { isValid: true, message: 'CVV v√°lido' };
            } else {
              validation = { isValid: false, message: '3-4 d√≠gitos' };
            }
          }
          break;
        case 'cardholderName':
          if (value.length > 0) {
            if (value.trim().length >= 2) {
              validation = { isValid: true, message: 'Nombre v√°lido' };
            } else {
              validation = { isValid: false, message: 'M√≠nimo 2 caracteres' };
            }
          }
          break;
        case 'applePayEmail':
        case 'googlePayEmail':
        case 'paypalEmail':
          if (value.length > 0) {
            const emailValidation = validateEmail(value, field.replace('Email', '').replace('Pay', ''));
            validation = {
              isValid: emailValidation.isValid,
              message: emailValidation.isValid ? 'Email v√°lido' : emailValidation.error
            };
          }
          break;
        case 'bankAccount':
          if (value.length > 0) {
            const bankValidation = validateBankAccount(value, 'Test Bank');
            validation = {
              isValid: bankValidation.isValid,
              message: bankValidation.isValid ? 'IBAN v√°lido' : bankValidation.error
            };
          }
          break;
        case 'bankName':
          if (value.length > 0) {
            if (value.trim().length >= 2) {
              validation = { isValid: true, message: 'Nombre v√°lido' };
            } else {
              validation = { isValid: false, message: 'M√≠nimo 2 caracteres' };
            }
          }
          break;
      }

      setFieldValidation(prev => ({
        ...prev,
        [field]: validation
      }));
    }, []);

    // Funci√≥n para manejar el cambio de m√©todo de pago con datos locales
    const handleLocalPaymentMethodChange = useCallback(async () => {
      // Sincronizar estado local con estado padre antes de procesar
      setPaymentMethodData(localPaymentData);
      await handlePaymentMethodChange(localNewPaymentMethod.id);
    }, [localPaymentData, localNewPaymentMethod, handlePaymentMethodChange]);

    // Funci√≥n para limpiar y cerrar modal
    const handleCloseModal = useCallback(() => {
      setShowPaymentMethodChange(false);
      setNewPaymentMethod(null);
      const cleanData = {
        cardNumber: '',
        expiryDate: '',
        cvv: '',
        cardholderName: '',
        applePayEmail: '',
        googlePayEmail: '',
        paypalEmail: '',
        bankAccount: '',
        bankName: ''
      };
      setPaymentMethodData(cleanData);
      setLocalPaymentData(cleanData);
      setTimeout(() => {
        setShowSubscriptionManagement(true);
      }, 300);
    }, []);

  // Return corregido:     return (
      <Modal visible={showPaymentMethodChange} animationType="fade" transparent={false}>
        <SafeAreaView style={styles.container}>
          <StatusBar barStyle="light-content" backgroundColor="#000000" />
          <View style={styles.subscriptionHeader}>
            <TouchableOpacity
              style={styles.subscriptionBackButton}
              onPress={handleCloseModal}
            >
              <Ionicons name="arrow-back" size={20} color="#C9A961" />
              <Text style={styles.subscriptionBackText}>Volver</Text>
            </TouchableOpacity>
            <Text style={styles.subscriptionTitle}>Cambiar M√©todo de Pago</Text>
          </View>

          <ScrollView style={styles.subscriptionContent}>
            {!newPaymentMethod ? (
              // Selecci√≥n de m√©todo de pago
              <View>
                <Text style={styles.subscriptionSectionTitle}>Selecciona un nuevo m√©todo de pago</Text>
                <Text style={styles.subscriptionSectionSubtitle}>
                  Los pr√≥ximos cobros se realizar√°n con el m√©todo que elijas
                </Text>

                {paymentMethods.map((method) => (
                  <TouchableOpacity
                    key={method.id}
                    style={styles.paymentMethodOption}
                    onPress={() => {
                      setNewPaymentMethod(method);
                      setLocalNewPaymentMethod(method);
                    }}
                  >
                    <View style={styles.paymentMethodOptionLeft}>
                      <Ionicons name={method.icon} size={24} color="#C9A961" />
                      <Text style={styles.paymentMethodOptionText}>{method.name}</Text>
                    </View>
                    <Ionicons name="chevron-forward" size={20} color="#666" />
                  </TouchableOpacity>
                ))}
              </View>
            ) : (
              // Configuraci√≥n del m√©todo seleccionado
              <View>
                <View style={styles.selectedPaymentMethodHeader}>
                  <Ionicons name={localNewPaymentMethod?.icon} size={32} color="#C9A961" />
                  <Text style={styles.selectedPaymentMethodTitle}>{localNewPaymentMethod?.name}</Text>
                  <Text style={styles.selectedPaymentMethodSubtitle}>
                    Configura tu {localNewPaymentMethod?.name?.toLowerCase()} para los pr√≥ximos cobros
                  </Text>
                </View>

                {/* Formularios espec√≠ficos por m√©todo de pago */}
                {(localNewPaymentMethod?.id === 'credit' || localNewPaymentMethod?.id === 'debit') && (
                  <View style={styles.paymentForm}>
                    <Text style={styles.formLabel}>N√∫mero de tarjeta</Text>
                    <View style={{ position: 'relative' }}>
                      <TextInput
                        style={[
                          styles.formInput,
                          fieldValidation.cardNumber.isValid === true && styles.formInputValid,
                          fieldValidation.cardNumber.isValid === false && styles.formInputInvalid
                        ]}
                        placeholder="1234 5678 9012 3456"
                        ref={cardNumberRef}
                        value={localPaymentData.cardNumber}
                        onChangeText={(text) => updateLocalField('cardNumber', text)}
                        returnKeyType="next"
                        onSubmitEditing={() => expiryDateRef.current?.focus()}
                        keyboardType="numeric"
                        maxLength={19}
                      />
                      {fieldValidation.cardNumber.isValid !== null && (
                        <Ionicons
                          name={fieldValidation.cardNumber.isValid ? 'checkmark-circle' : 'close-circle'}
                          size={20}
                          color={fieldValidation.cardNumber.isValid ? '#4CAF50' : '#F44336'}
                          style={styles.validationIcon}
                        />
                      )}
                    </View>
                    {fieldValidation.cardNumber.message && (
                      <Text style={[
                        styles.validationMessage,
                        fieldValidation.cardNumber.isValid ? styles.validationMessageValid : styles.validationMessageInvalid
                      ]}>
                        {fieldValidation.cardNumber.message}
                      </Text>
                    )}

                    <View style={styles.formRow}>
                      <View style={styles.formHalf}>
                        <Text style={styles.formLabel}>Fecha de vencimiento</Text>
                        <TextInput
                          style={styles.formInput}
                          placeholder="MM/AA"
                          ref={expiryDateRef}
                          value={localPaymentData.expiryDate}
                          onChangeText={(text) => updateLocalField('expiryDate', text)}
                          returnKeyType="next"
                          onSubmitEditing={() => cvvRef.current?.focus()}
                          keyboardType="numeric"
                          maxLength={5}
                        />
                      </View>
                      <View style={styles.formHalf}>
                        <Text style={styles.formLabel}>CVV</Text>
                        <TextInput
                          style={styles.formInput}
                          placeholder="123"
                          ref={cvvRef}
                          value={localPaymentData.cvv}
                          onChangeText={(text) => updateLocalField('cvv', text)}
                          returnKeyType="next"
                          onSubmitEditing={() => cardholderNameRef.current?.focus()}
                          keyboardType="numeric"
                          maxLength={4}
                          secureTextEntry
                        />
                      </View>
                    </View>

                    <Text style={styles.formLabel}>Nombre del titular</Text>
                    <TextInput
                      style={styles.formInput}
                      placeholder="Nombre completo"
                      ref={cardholderNameRef}
                      value={localPaymentData.cardholderName}
                      onChangeText={(text) => updateLocalField('cardholderName', text)}
                      returnKeyType="done"
                    />
                  </View>
                )}

                {localNewPaymentMethod?.id === 'apple' && (
                  <View style={styles.paymentForm}>
                    <Text style={styles.formLabel}>Email de Apple ID</Text>
                    <TextInput
                      style={styles.formInput}
                      placeholder="tu@email.com"
                      ref={emailRef}
                      value={localPaymentData.applePayEmail}
                      onChangeText={(text) => updateLocalField('applePayEmail', text)}
                      returnKeyType="done"
                      keyboardType="email-address"
                    />
                    <Text style={styles.formNote}>
                      Se configurar√° Apple Pay con este email para los cobros autom√°ticos
                    </Text>
                  </View>
                )}

                {localNewPaymentMethod?.id === 'google' && (
                  <View style={styles.paymentForm}>
                    <Text style={styles.formLabel}>Email de Google Pay</Text>
                    <TextInput
                      style={styles.formInput}
                      placeholder="tu@gmail.com"
                      ref={emailRef}
                      value={localPaymentData.googlePayEmail}
                      onChangeText={(text) => updateLocalField('googlePayEmail', text)}
                      returnKeyType="done"
                      keyboardType="email-address"
                    />
                    <Text style={styles.formNote}>
                      Se configurar√° Google Pay con este email para los cobros autom√°ticos
                    </Text>
                  </View>
                )}

                {localNewPaymentMethod?.id === 'paypal' && (
                  <View style={styles.paymentForm}>
                    <Text style={styles.formLabel}>Email de PayPal</Text>
                    <TextInput
                      style={styles.formInput}
                      placeholder="tu@email.com"
                      ref={emailRef}
                      value={localPaymentData.paypalEmail}
                      onChangeText={(text) => updateLocalField('paypalEmail', text)}
                      returnKeyType="done"
                      keyboardType="email-address"
                    />
                    <Text style={styles.formNote}>
                      Se configurar√° PayPal con este email para los cobros autom√°ticos
                    </Text>
                  </View>
                )}

                {localNewPaymentMethod?.id === 'transfer' && (
                  <View style={styles.paymentForm}>
                    <Text style={styles.formLabel}>N√∫mero de cuenta bancaria</Text>
                    <TextInput
                      style={styles.formInput}
                      placeholder="ES12 3456 7890 1234 5678 9012"
                      ref={bankAccountRef}
                      value={localPaymentData.bankAccount}
                      onChangeText={(text) => updateLocalField('bankAccount', text)}
                      returnKeyType="next"
                      onSubmitEditing={() => bankNameRef.current?.focus()}
                    />

                    <Text style={styles.formLabel}>Nombre del banco</Text>
                    <TextInput
                      style={styles.formInput}
                      placeholder="Nombre de tu banco"
                      ref={bankNameRef}
                      value={localPaymentData.bankName}
                      onChangeText={(text) => updateLocalField('bankName', text)}
                      returnKeyType="done"
                    />
                    <Text style={styles.formNote}>
                      Se configurar√° la domiciliaci√≥n bancaria para los cobros autom√°ticos
                    </Text>
                  </View>
                )}

                <TouchableOpacity
                  style={[styles.confirmPaymentButton, isProcessingPayment && styles.confirmPaymentButtonDisabled]}
                  onPress={handleLocalPaymentMethodChange}
                  disabled={isProcessingPayment}
                >
                  <Text style={styles.confirmPaymentButtonText}>
                    {isProcessingPayment ? 'Configurando...' : `Confirmar ${localNewPaymentMethod?.name}`}
                  </Text>
                </TouchableOpacity>
              </View>
            )}
          </ScrollView>
        </SafeAreaView>
      </Modal>
    );
  });

  const PaymentModal = () => (
    <Modal visible={showPaymentModal} animationType="fade" transparent>
      <View style={styles.modalOverlay}>
        <View style={styles.modalContent}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>
              {selectedPaymentMethod?.name}
            </Text>
            <TouchableOpacity onPress={() => {
              setShowPaymentModal(false);
              setPaymentData({});
            }}>
              <Ionicons name="close" size={24} color="#C9A961" />
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.paymentContent}>
            <Text style={styles.paymentSubtitle}>
              Ingresa los datos de tu {selectedPaymentMethod?.name?.toLowerCase()}
            </Text>

            <View style={styles.subscriptionInfo}>
              <Text style={styles.subscriptionTitle}>üîÑ Suscripci√≥n Recurrente</Text>
              <Text style={styles.subscriptionText}>
                ‚Ä¢ Se cobrar√° autom√°ticamente cada mes{'\n'}
                ‚Ä¢ Duraci√≥n: {getSelectedPlanDetails().duration}{'\n'}
                ‚Ä¢ Importe mensual: ‚Ç¨{getSelectedPlanDetails().price}{'\n'}
                ‚Ä¢ Puedes cancelar en cualquier momento
              </Text>
            </View>

            <View style={styles.paymentForm}>
              <View style={styles.formGroup}>
                <Text style={styles.formLabel}>N√∫mero de tarjeta</Text>
                <TextInput
                  style={styles.formInput}
                  placeholder="1234 5678 9012 3456"
                  placeholderTextColor="#666"
                  keyboardType="numeric"
                  maxLength={19}
                  value={paymentData.cardNumber || ''}
                  onChangeText={(text) => {
                    // Formatear n√∫mero de tarjeta con espacios
                    const formatted = text.replace(/\s/g, '').replace(/(.{4})/g, '$1 ').trim();
                    setPaymentData(prev => ({ ...(prev || {}), cardNumber: formatted }));
                  }}
                />
              </View>

              <View style={styles.paymentRow}>
                <View style={[styles.formGroup, { flex: 1, marginRight: 10 }]}>
                  <Text style={styles.formLabel}>Fecha de vencimiento</Text>
                  <TextInput
                    style={styles.formInput}
                    placeholder="MM/AA"
                    placeholderTextColor="#666"
                    keyboardType="numeric"
                    maxLength={5}
                    value={paymentData.expiryDate || ''}
                    onChangeText={(text) => {
                      // Formatear fecha MM/AA
                      const formatted = text.replace(/\D/g, '').replace(/(\d{2})(\d)/, '$1/$2');
                      setPaymentData(prev => ({ ...(prev || {}), expiryDate: formatted }));
                    }}
                  />
                </View>

                <View style={[styles.formGroup, { flex: 1, marginLeft: 10 }]}>
                  <Text style={styles.formLabel}>CVV</Text>
                  <TextInput
                    style={styles.formInput}
                    placeholder="123"
                    placeholderTextColor="#666"
                    keyboardType="numeric"
                    maxLength={4}
                    secureTextEntry
                    value={paymentData.cvv || ''}
                    onChangeText={(text) => setPaymentData(prev => ({ ...(prev || {}), cvv: text }))}
                  />
                </View>
              </View>

              <View style={styles.formGroup}>
                <Text style={styles.formLabel}>Nombre del titular</Text>
                <TextInput
                  style={styles.formInput}
                  placeholder="Nombre como aparece en la tarjeta"
                  placeholderTextColor="#666"
                  value={paymentData.cardholderName || ''}
                  onChangeText={(text) => setPaymentData(prev => ({ ...(prev || {}), cardholderName: text }))}
                />
              </View>

              <View style={styles.paymentSummary}>
                <Text style={styles.summaryTitle}>Resumen del pago</Text>
                <View style={styles.summaryRow}>
                  <Text style={styles.summaryLabel}>{getSelectedPlanDetails().name}</Text>
                  <Text style={styles.summaryAmount}>‚Ç¨{getSelectedPlanDetails().price}</Text>
                </View>
                <View style={styles.summaryRow}>
                  <Text style={styles.summaryLabel}>IVA incluido</Text>
                  <Text style={styles.summaryAmount}>‚úì</Text>
                </View>
                <View style={[styles.summaryRow, styles.summaryTotal]}>
                  <Text style={styles.summaryTotalLabel}>Total</Text>
                  <Text style={styles.summaryTotalAmount}>‚Ç¨{getSelectedPlanDetails().price}</Text>
                </View>
              </View>

              <TouchableOpacity
                style={[styles.paymentButton, isProcessingPayment && styles.paymentButtonDisabled]}
                onPress={processCardPayment}
                disabled={isProcessingPayment}
              >
                {isProcessingPayment ? (
                  <Text style={styles.paymentButtonText}>Procesando...</Text>
                ) : (
                  <Text style={styles.paymentButtonText}>Pagar ‚Ç¨{getSelectedPlanDetails().price}</Text>
                )}
              </TouchableOpacity>
            </View>
          </ScrollView>
        </View>
      </View>
    </Modal >
  );

  const showCollaborationDetails = (collaboration) => {
    setSelectedCollaboration(collaboration);
    setShowCollaborationDetail(true);
  };

  // Funciones de pago (funci√≥n global para otros usos)
  const handlePaymentMethodSelection = (method) => {
    setRegistrationData(prev => ({ ...(prev || {}), paymentMethod: method.id }));
    setSelectedPaymentMethod(method);
  };

  const getSelectedPlanDetails = () => {
    const plans = [
      { id: 'plan3', name: 'Plan 3 meses', price: 499, duration: '3 meses' },
      { id: 'plan6', name: 'Plan 6 meses', price: 399, duration: '6 meses' },
      { id: 'plan12', name: 'Plan 12 meses', price: 299, duration: '12 meses' }
    ];

    return plans.find(p => p.id === registrationData.selectedPlan) || plans[1]; // Default plan 6 meses
  };

  // Funci√≥n para obtener el plan actual de la empresa logueada
  const getCurrentCompanyPlan = () => {
    if (!currentUser || currentUser.role !== 'empresa') return null;

    const currentCompany = registeredCompanies.find(c => c.email === currentUser.email);
    if (!currentCompany) return null;

    const plans = [
      { id: 'plan3', name: 'Plan 3 meses', price: 499, duration: '3 meses', displayPrice: '‚Ç¨499/mes' },
      { id: 'plan6', name: 'Plan 6 meses', price: 399, duration: '6 meses', displayPrice: '‚Ç¨399/mes' },
      { id: 'plan12', name: 'Plan 12 meses', price: 299, duration: '12 meses', displayPrice: '‚Ç¨299/mes' }
    ];

    return plans.find(p => p.name === currentCompany.plan) || plans[1];
  };

  // Funci√≥n para cambiar el plan de la empresa
  const handlePlanChange = async (newPlanId) => {
    try {
      // Validaciones iniciales m√°s robustas
      if (!currentUser || currentUser.role !== 'empresa' || !currentUser.email) {
        console.error('‚ùå Error: Usuario no v√°lido para cambio de plan:', currentUser);
        Alert.alert('Error', 'Usuario no v√°lido. Por favor, inicia sesi√≥n nuevamente.');
        return;
      }

      if (!registeredCompanies || !Array.isArray(registeredCompanies)) {
        console.error('‚ùå Error: registeredCompanies no es v√°lido:', registeredCompanies);
        Alert.alert('Error', 'No se pudieron cargar los datos de empresas. Intenta nuevamente.');
        return;
      }

      const plans = [
        { id: 'plan3', name: 'Plan 3 meses', price: 499, duration: '3 meses', displayPrice: '‚Ç¨499/mes' },
        { id: 'plan6', name: 'Plan 6 meses', price: 399, duration: '6 meses', displayPrice: '‚Ç¨399/mes' },
        { id: 'plan12', name: 'Plan 12 meses', price: 299, duration: '12 meses', displayPrice: '‚Ç¨299/mes' }
      ];

      const newPlan = plans.find(p => p.id === newPlanId);
      if (!newPlan) {
        console.error('‚ùå Error: Plan no encontrado:', newPlanId);
        Alert.alert('Error', 'Plan seleccionado no v√°lido.');
        return;
      }

      // Obtener el plan actual de forma segura
      let currentPlanName = 'Plan actual';
      try {
        const currentPlan = getCurrentCompanyPlan();
        currentPlanName = currentPlan ? currentPlan.name : 'Plan actual';
      } catch (error) {
        console.warn('‚ö†Ô∏è No se pudo obtener el plan actual:', error);
      }

      console.log('üîÑ Iniciando cambio de plan:', {
        usuario: currentUser.email,
        planActual: currentPlanName,
        planNuevo: newPlan.name
      });

      // Actualizar la empresa en registeredCompanies de forma segura
      const updatedCompanies = registeredCompanies.map(company => {
        if (company && company.email === currentUser.email) {
          return {
            ...company,
            plan: newPlan.name,
            price: newPlan.displayPrice,
            duration: newPlan.duration,
            pricePerMonth: newPlan.price,
            lastUpdated: new Date().toISOString()
          };
        }
        return company;
      });

      // Actualizar el usuario actual de forma segura
      const updatedCurrentUser = {
        ...currentUser,
        plan: {
          name: newPlan.name,
          price: newPlan.displayPrice,
          duration: newPlan.duration,
          pricePerMonth: newPlan.price
        }
      };

      // Crear datos de suscripci√≥n actualizados
      const updatedSubscriptionData = {
        currentPlan: newPlan.name,
        price: newPlan.price.toString(),
        billingCycle: 'monthly',
        nextBilling: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString('es-ES', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
        }),
        paymentMethod: updatedCompanies.find(c => c && c.email === currentUser.email)?.paymentMethod || 'Tarjeta terminada en 4242',
        status: 'active',
        duration: newPlan.duration
      };

      // Guardar en AsyncStorage primero
      try {
        await AsyncStorage.setItem('companies', JSON.stringify(updatedCompanies));
        await AsyncStorage.setItem('currentUser', JSON.stringify(updatedCurrentUser));
        await AsyncStorage.setItem('subscriptionData', JSON.stringify(updatedSubscriptionData));
        console.log('‚úÖ Datos guardados en AsyncStorage correctamente');
      } catch (storageError) {
        console.error('‚ùå Error guardando en AsyncStorage:', storageError);
        Alert.alert('Error', 'No se pudieron guardar los cambios. Intenta nuevamente.');
        return;
      }

      // Actualizar estados de forma secuencial pero optimizada
      setRegisteredCompanies(updatedCompanies);
      setCurrentUser(updatedCurrentUser);
      setSubscriptionData(updatedSubscriptionData);

      // Mostrar confirmaci√≥n sin callbacks adicionales
      Alert.alert(
        '‚úÖ Plan Actualizado',
        `Plan cambiado de "${currentPlanName}" a "${newPlan.name}"\n\n` +
        `üí∞ Precio: ${newPlan.displayPrice}\n` +
        `üìÖ Duraci√≥n: ${newPlan.duration}`,
        [{ text: 'Perfecto' }]
      );

      console.log('‚úÖ Plan actualizado exitosamente:', {
        empresa: currentUser.email,
        planAnterior: currentPlanName,
        planNuevo: newPlan.name,
        precioNuevo: newPlan.displayPrice,
        timestamp: new Date().toISOString()
      });

    } catch (error) {
      console.error('‚ùå Error cr√≠tico al actualizar plan:', error);
      Alert.alert(
        'Error Inesperado',
        'Ocurri√≥ un error al actualizar el plan. La aplicaci√≥n se mantendr√° estable.',
        [{
          text: 'Entendido',
          onPress: () => {
            // Asegurar que la app no se quede en negro
            try {
              setShowSubscriptionManagement(false);
            } catch (e) {
              console.error('Error cerrando modal:', e);
            }
          }
        }]
      );
    }
  };

  // Funci√≥n para confirmar cambio de plan antes de ejecutarlo
  const confirmPlanChange = (newPlanId) => {
    const plans = [
      { id: 'plan3', name: 'Plan 3 meses', price: 499, duration: '3 meses', displayPrice: '‚Ç¨499/mes' },
      { id: 'plan6', name: 'Plan 6 meses', price: 399, duration: '6 meses', displayPrice: '‚Ç¨399/mes' },
      { id: 'plan12', name: 'Plan 12 meses', price: 299, duration: '12 meses', displayPrice: '‚Ç¨299/mes' }
    ];

    const newPlan = plans.find(p => p.id === newPlanId);
    if (!newPlan) {
      Alert.alert('Error', 'Plan seleccionado no v√°lido.');
      return;
    }

    // Obtener el plan actual
    let currentPlanName = 'Plan actual';
    try {
      const currentPlan = getCurrentCompanyPlan();
      currentPlanName = currentPlan ? currentPlan.name : 'Plan actual';
    } catch (error) {
      console.warn('‚ö†Ô∏è No se pudo obtener el plan actual:', error);
    }

    // Calcular diferencia de precio
    const currentPlan = plans.find(p => p.name === currentPlanName);
    const priceDifference = currentPlan ? newPlan.price - currentPlan.price : 0;
    const priceChangeText = priceDifference > 0
      ? `(+‚Ç¨${priceDifference}/mes m√°s caro)`
      : priceDifference < 0
        ? `(-‚Ç¨${Math.abs(priceDifference)}/mes m√°s barato)`
        : '(mismo precio)';

    Alert.alert(
      'üîÑ Confirmar Cambio de Plan',
      `¬øEst√°s seguro de que quieres cambiar tu suscripci√≥n?\n\n` +
      `üìã Plan actual: ${currentPlanName}\n` +
      `üìã Nuevo plan: ${newPlan.name}\n\n` +
      `üí∞ Precio nuevo: ${newPlan.displayPrice}\n` +
      `üìÖ Duraci√≥n: ${newPlan.duration}\n` +
      `üí∏ ${priceChangeText}\n\n` +
      `‚ö†Ô∏è Este cambio se aplicar√° inmediatamente y afectar√° tu pr√≥xima facturaci√≥n.`,
      [
        {
          text: '‚ùå Cancelar',
          style: 'cancel',
          onPress: () => {
            console.log('üö´ Cambio de plan cancelado por el usuario');
          }
        },
        {
          text: '‚úÖ Confirmar Cambio',
          style: 'default',
          onPress: () => {
            console.log('‚úÖ Usuario confirm√≥ cambio de plan a:', newPlan.name);
            handlePlanChange(newPlanId);
          }
        }
      ],
      { cancelable: true }
    );
  };

  const handleCompanyRegistration = () => {
    // Validar que se haya seleccionado un m√©todo de pago
    if (!registrationData.paymentMethod) {
      Alert.alert('Error', 'Por favor selecciona un m√©todo de pago');
      return;
    }

    // Validar que se haya seleccionado un plan
    if (!registrationData.selectedPlan) {
      Alert.alert('Error', 'Por favor selecciona un plan de suscripci√≥n');
      return;
    }

    // Validar campos obligatorios
    if (!registrationData.companyName || !registrationData.cif || !registrationData.address ||
      !registrationData.phone || !registrationData.email || !registrationData.contactName ||
      !registrationData.contactEmail || !registrationData.position || !registrationData.businessType ||
      !registrationData.description) {
      Alert.alert('Error', 'Por favor completa todos los campos obligatorios');
      return;
    }

    // Validar formato de emails
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(registrationData.email)) {
      Alert.alert('Error', 'Por favor ingresa un email corporativo v√°lido');
      return;
    }
    if (!emailRegex.test(registrationData.contactEmail)) {
      Alert.alert('Error', 'Por favor ingresa un email del representante v√°lido');
      return;
    }

    // Redirigir a pantalla de pago
    setCurrentScreen('payment');
  };

  const setupRecurringPayment = (paymentMethod, plan) => {
    // Configurar suscripci√≥n recurrente
    const subscriptionData = {
      paymentMethod: paymentMethod,
      planId: plan.id,
      planName: plan.name,
      monthlyAmount: plan.price,
      duration: parseInt(plan.duration.split(' ')[0]), // Extraer n√∫mero de meses
      startDate: new Date(),
      nextPaymentDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 d√≠as despu√©s
      isActive: true
    };

    // En una app real, esto se enviar√≠a al backend para configurar la suscripci√≥n
    console.log('Suscripci√≥n configurada:', subscriptionData);

    // Simular configuraci√≥n de pagos autom√°ticos
    return subscriptionData;
  };

  const processApplePay = async () => {
    setIsProcessingPayment(true);
    try {
      // Simular procesamiento de Apple Pay
      await new Promise(resolve => setTimeout(resolve, 2000));

      const plan = getSelectedPlanDetails();

      // Configurar suscripci√≥n recurrente
      const subscription = setupRecurringPayment('apple', plan);

      Alert.alert(
        'Suscripci√≥n Activada',
        `‚úÖ Pago inicial procesado con Apple Pay\nüí≥ Suscripci√≥n configurada: ${plan.name}\nüí∞ Se cobrar√° ‚Ç¨${plan.price} cada mes durante ${plan.duration}\nüìÖ Pr√≥ximo cobro: ${subscription.nextPaymentDate.toLocaleDateString('es-ES')}`,
        [{
          text: 'OK', onPress: () => {
            setCurrentScreen('welcome');
            setIsProcessingPayment(false);
          }
        }]
      );
    } catch (error) {
      setIsProcessingPayment(false);
      Alert.alert('Error', 'No se pudo procesar el pago con Apple Pay');
    }
  };

  const processGooglePay = async () => {
    setIsProcessingPayment(true);
    try {
      // Simular procesamiento de Google Pay
      await new Promise(resolve => setTimeout(resolve, 2000));

      const plan = getSelectedPlanDetails();

      // Configurar suscripci√≥n recurrente
      const subscription = setupRecurringPayment('google', plan);

      Alert.alert(
        'Suscripci√≥n Activada',
        `‚úÖ Pago inicial procesado con Google Pay\nüí≥ Suscripci√≥n configurada: ${plan.name}\nüí∞ Se cobrar√° ‚Ç¨${plan.price} cada mes durante ${plan.duration}\nüìÖ Pr√≥ximo cobro: ${subscription.nextPaymentDate.toLocaleDateString('es-ES')}`,
        [{
          text: 'OK', onPress: () => {
            setCurrentScreen('welcome');
            setIsProcessingPayment(false);
          }
        }]
      );
    } catch (error) {
      setIsProcessingPayment(false);
      Alert.alert('Error', 'No se pudo procesar el pago con Google Pay');
    }
  };

  const processPayPal = async () => {
    setIsProcessingPayment(true);
    try {
      // Simular procesamiento de PayPal
      await new Promise(resolve => setTimeout(resolve, 2500));

      const plan = getSelectedPlanDetails();

      // Configurar suscripci√≥n recurrente
      const subscription = setupRecurringPayment('paypal', plan);

      Alert.alert(
        'Suscripci√≥n Activada',
        `‚úÖ Pago inicial procesado con PayPal\nüí≥ Suscripci√≥n configurada: ${plan.name}\nüí∞ Se cobrar√° ‚Ç¨${plan.price} cada mes durante ${plan.duration}\nüìÖ Pr√≥ximo cobro: ${subscription.nextPaymentDate.toLocaleDateString('es-ES')}`,
        [{
          text: 'OK', onPress: () => {
            setCurrentScreen('welcome');
            setIsProcessingPayment(false);
          }
        }]
      );
    } catch (error) {
      setIsProcessingPayment(false);
      Alert.alert('Error', 'No se pudo procesar el pago con PayPal');
    }
  };

  const processBankTransfer = () => {
    const plan = getSelectedPlanDetails();
    Alert.alert(
      'Transferencia Bancaria - Suscripci√≥n',
      `üìß Recibir√°s un email con:\n‚Ä¢ Datos bancarios para el pago inicial\n‚Ä¢ Instrucciones para configurar domiciliaci√≥n bancaria\n\nüí≥ Suscripci√≥n: ${plan.name}\nüí∞ Importe mensual: ‚Ç¨${plan.price}\n‚è±Ô∏è Duraci√≥n: ${plan.duration}\n\nTu cuenta ser√° activada tras confirmar el primer pago y configurar la domiciliaci√≥n.`,
      [{ text: 'OK', onPress: () => setCurrentScreen('welcome') }]
    );
  };

  // Funciones de validaci√≥n avanzada para m√©todos de pago
  const validateCreditCard = (cardNumber, expiryDate, cvv, cardholderName) => {
    // Validar n√∫mero de tarjeta usando algoritmo de Luhn
    const luhnCheck = (num) => {
      let arr = (num + '')
        .split('')
        .reverse()
        .map(x => parseInt(x));
      let lastDigit = arr.splice(0, 1)[0];
      let sum = arr.reduce((acc, val, i) => (i % 2 !== 0 ? acc + val : acc + ((val * 2) % 9) || 9), 0);
      return (sum + lastDigit) % 10 === 0;
    };

    // Limpiar n√∫mero de tarjeta (solo n√∫meros)
    const cleanCardNumber = cardNumber.replace(/\D/g, '');

    // Validaciones b√°sicas
    if (!cleanCardNumber || cleanCardNumber.length < 13 || cleanCardNumber.length > 19) {
  // Return corregido:       return { isValid: false, error: 'N√∫mero de tarjeta debe tener entre 13 y 19 d√≠gitos' };
    }

    // Validar con algoritmo de Luhn
    if (!luhnCheck(cleanCardNumber)) {
  // Return corregido:       return { isValid: false, error: 'N√∫mero de tarjeta no es v√°lido' };
    }

    // Validar fecha de vencimiento
    if (!expiryDate || !expiryDate.match(/^\d{2}\/\d{2}$/)) {
  // Return corregido:       return { isValid: false, error: 'Formato de fecha inv√°lido (MM/AA)' };
    }

    const [month, year] = expiryDate.split('/').map(num => parseInt(num));
    const currentDate = new Date();
    const currentYear = currentDate.getFullYear() % 100;
    const currentMonth = currentDate.getMonth() + 1;

    if (month < 1 || month > 12) {
  // Return corregido:       return { isValid: false, error: 'Mes inv√°lido (01-12)' };
    }

    if (year < currentYear || (year === currentYear && month < currentMonth)) {
  // Return corregido:       return { isValid: false, error: 'Tarjeta vencida' };
    }

    // Validar CVV
    if (!cvv || cvv.length < 3 || cvv.length > 4) {
  // Return corregido:       return { isValid: false, error: 'CVV debe tener 3 o 4 d√≠gitos' };
    }

    // Validar nombre del titular
    if (!cardholderName || cardholderName.trim().length < 2) {
  // Return corregido:       return { isValid: false, error: 'Nombre del titular requerido' };
    }

    // Detectar tipo de tarjeta
    let cardType = 'Desconocida';
    if (cleanCardNumber.startsWith('4')) {
      cardType = 'Visa';
    } else if (cleanCardNumber.startsWith('5') || cleanCardNumber.startsWith('2')) {
      cardType = 'Mastercard';
    } else if (cleanCardNumber.startsWith('3')) {
      cardType = 'American Express';
    }

  // Return corregido:     return {
      isValid: true,
      cardType,
      lastFourDigits: cleanCardNumber.slice(-4)
    };
  };

  const validateEmail = (email, provider) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (!email || !emailRegex.test(email)) {
      return { isValid: false, error: 'Email inv√°lido' };
    }

    // Validaciones espec√≠ficas por proveedor
    switch (provider) {
      case 'apple':
        // Apple Pay acepta cualquier email v√°lido
        return { isValid: true };
      case 'google':
        // Google Pay prefiere emails de Gmail pero acepta otros
        return { isValid: true };
      case 'paypal':
        // PayPal acepta cualquier email v√°lido
        return { isValid: true };
      default:
        return { isValid: true };
    }
  };

  const validateBankAccount = (bankAccount, bankName) => {
    // Validar IBAN espa√±ol
    const ibanRegex = /^ES\d{2}\s?\d{4}\s?\d{4}\s?\d{4}\s?\d{4}\s?\d{4}$/;
    const cleanIban = bankAccount.replace(/\s/g, '');

    if (!cleanIban) {
      return { isValid: false, error: 'N√∫mero de cuenta requerido' };
    }

    if (!ibanRegex.test(bankAccount)) {
      return { isValid: false, error: 'Formato de IBAN espa√±ol inv√°lido (ES12 3456 7890 1234 5678 9012)' };
    }

    // Validar nombre del banco
    if (!bankName || bankName.trim().length < 2) {
      return { isValid: false, error: 'Nombre del banco requerido' };
    }

    // Lista de bancos espa√±oles v√°lidos (simplificada)
    const validBanks = [
      'santander', 'bbva', 'caixabank', 'bankia', 'sabadell', 'bankinter',
      'unicaja', 'kutxabank', 'abanca', 'cajamar', 'ibercaja', 'liberbank',
      'banco popular', 'banco pastor', 'banco de valencia', 'banco mare nostrum'
    ];

    const bankNameLower = bankName.toLowerCase();
    const isValidBank = validBanks.some(bank =>
      bankNameLower.includes(bank) || bank.includes(bankNameLower)
    );

    if (!isValidBank) {
      console.warn('Banco no reconocido, pero se permite:', bankName);
    }

    return { isValid: true, bankName: bankName.trim() };
  };

  // Funci√≥n para simular verificaci√≥n con proveedores externos
  const verifyPaymentMethodWithProvider = async (methodId, data) => {
    // Simular llamada a API externa
    await new Promise(resolve => setTimeout(resolve, 1500));

    switch (methodId) {
      case 'apple':
        // Simular verificaci√≥n con Apple Pay
        if (data.applePayEmail.includes('test') || data.applePayEmail.includes('fake')) {
          return { isValid: false, error: 'Email no v√°lido para Apple Pay' };
        }
        return { isValid: true, message: 'Apple Pay configurado correctamente' };

      case 'google':
        // Simular verificaci√≥n con Google Pay
        if (data.googlePayEmail.includes('test') || data.googlePayEmail.includes('fake')) {
          return { isValid: false, error: 'Email no v√°lido para Google Pay' };
        }
        return { isValid: true, message: 'Google Pay configurado correctamente' };

      case 'paypal':
        // Simular verificaci√≥n con PayPal
        if (data.paypalEmail.includes('test') || data.paypalEmail.includes('fake')) {
          return { isValid: false, error: 'Email no v√°lido para PayPal' };
        }
        return { isValid: true, message: 'PayPal configurado correctamente' };

      default:
        return { isValid: true };
    }
  };

  // Funci√≥n para cancelar suscripci√≥n y borrar todos los datos
  const handleCancelSubscription = async () => {
    try {
      // Mostrar alerta de confirmaci√≥n con informaci√≥n legal
      Alert.alert(
        '‚ö†Ô∏è CANCELACI√ìN DEFINITIVA DE SUSCRIPCI√ìN',
        `üö® ATENCI√ìN: Est√° a punto de cancelar su suscripci√≥n de forma DEFINITIVA.\n\nüìã CONSECUENCIAS IRREVERSIBLES:\n\n‚Ä¢ ‚ùå Se cancelar√°n TODOS los pagos futuros\n‚Ä¢ üóëÔ∏è Se BORRAR√ÅN todos sus datos empresariales\n‚Ä¢ üìä Se ELIMINAR√ÅN todas sus colaboraciones\n‚Ä¢ üîí PERDER√Å acceso inmediato a la plataforma\n‚Ä¢ üí≥ Se desactivar√° su m√©todo de pago\n‚Ä¢ üìß Se eliminar√° su cuenta empresarial\n\n‚öñÔ∏è POL√çTICAS LEGALES:\n‚Ä¢ Cumplimiento con RGPD (Reglamento General de Protecci√≥n de Datos)\n‚Ä¢ Derecho al olvido seg√∫n Art. 17 RGPD\n‚Ä¢ Eliminaci√≥n completa de datos personales\n‚Ä¢ Cancelaci√≥n autom√°tica de servicios de pago\n\n‚è∞ Esta acci√≥n es INMEDIATA e IRREVERSIBLE.\n\n¬øConfirma que desea proceder con la cancelaci√≥n definitiva?`,
        [
          {
            text: '‚ùå No, mantener suscripci√≥n',
            style: 'cancel'
          },
          {
            text: '‚ö†Ô∏è S√ç, CANCELAR DEFINITIVAMENTE',
            style: 'destructive',
            onPress: async () => {
              // Segunda confirmaci√≥n de seguridad
              Alert.alert(
                'üî¥ CONFIRMACI√ìN FINAL',
                `‚ö†Ô∏è √öLTIMA OPORTUNIDAD\n\nEsta es su √∫ltima oportunidad para reconsiderar.\n\nüóëÔ∏è Al confirmar se ejecutar√° INMEDIATAMENTE:\n\n‚Ä¢ Cancelaci√≥n de pagos\n‚Ä¢ Borrado completo de datos\n‚Ä¢ Eliminaci√≥n de cuenta\n‚Ä¢ Desactivaci√≥n de servicios\n\n‚ùó NO HAY VUELTA ATR√ÅS despu√©s de confirmar.\n\n¬øEst√° COMPLETAMENTE SEGURO?`,
                [
                  {
                    text: 'üîô Volver atr√°s',
                    style: 'cancel'
                  },
                  {
                    text: 'üî¥ CONFIRMAR CANCELACI√ìN',
                    style: 'destructive',
                    onPress: () => executeSubscriptionCancellation()
                  }
                ]
              );
            }
          }
        ]
      );
    } catch (error) {
      console.error('Error en proceso de cancelaci√≥n:', error);
      Alert.alert('Error', 'Ocurri√≥ un error al procesar la cancelaci√≥n. Int√©ntelo de nuevo.');
    }
  };

  // Funci√≥n para ejecutar la cancelaci√≥n completa
  const executeSubscriptionCancellation = async () => {
    try {
      // Mostrar indicador de procesamiento
      Alert.alert(
        '‚è≥ Procesando Cancelaci√≥n',
        'Cancelando suscripci√≥n y eliminando datos...\n\nEsto puede tomar unos momentos.',
        [],
        { cancelable: false }
      );

      // Simular proceso de cancelaci√≥n (en producci√≥n ser√≠a llamada a API)
      await new Promise(resolve => setTimeout(resolve, 3000));

      const userEmail = currentUser?.email;

      // 1. Cancelar pagos autom√°ticos
      console.log('üö´ Cancelando pagos autom√°ticos para:', userEmail);

      // 2. Eliminar empresa de registeredCompanies
      const updatedCompanies = registeredCompanies.filter(
        company => company.email !== userEmail
      );
      setRegisteredCompanies(updatedCompanies);

      // 3. Eliminar datos de suscripci√≥n
      setSubscriptionData({
        currentPlan: null,
        price: null,
        billingCycle: null,
        nextBilling: null,
        paymentMethod: null,
        status: 'cancelled'
      });

      // 4. Eliminar contrase√±a del usuario
      const updatedPasswords = { ...userPasswords };
      delete updatedPasswords[userEmail];
      setUserPasswords(updatedPasswords);

      // 5. Limpiar AsyncStorage de todos los datos relacionados
      await AsyncStorage.multiRemove([
        'currentUser',
        'companies',
        'subscriptionData',
        'userPasswords',
        `personalData_${userEmail}`,
        `profilePhoto_${userEmail}`,
        `companyProfilePhoto_${userEmail}`
      ]);

      // 6. Limpiar colaboraciones relacionadas con la empresa
      const safeCollaborations = Array.isArray(influencerCollaborations) ? influencerCollaborations : [];
      const updatedCollaborations = safeCollaborations.filter(
        collab => collab.business !== currentUser?.name &&
          !collab.collaboration?.business?.includes(currentUser?.name || '')
      );
      setInfluencerCollaborations(updatedCollaborations);

      // 7. Guardar cambios en AsyncStorage
      await AsyncStorage.setItem('companies', JSON.stringify(updatedCompanies));
      await AsyncStorage.setItem('userPasswords', JSON.stringify(updatedPasswords));
      await AsyncStorage.setItem('influencerCollaborations', JSON.stringify(updatedCollaborations));

      console.log('‚úÖ Datos empresariales eliminados completamente:', {
        empresa: userEmail,
        datosEliminados: [
          'Informaci√≥n de empresa',
          'Datos de suscripci√≥n',
          'M√©todo de pago',
          'Contrase√±a de acceso',
          'Colaboraciones asociadas',
          'Datos personales',
          'Foto de perfil'
        ],
        cumplimientoRGPD: true,
        fechaEliminacion: new Date().toISOString()
      });

      // 8. Mostrar confirmaci√≥n final y cerrar sesi√≥n
      Alert.alert(
        '‚úÖ SUSCRIPCI√ìN CANCELADA',
        `üéØ PROCESO COMPLETADO EXITOSAMENTE\n\n‚úÖ Pagos cancelados definitivamente\n‚úÖ Todos los datos eliminados\n‚úÖ Cuenta empresarial desactivada\n‚úÖ Cumplimiento RGPD garantizado\n\nüìß Empresa: ${userEmail}\nüóìÔ∏è Fecha: ${new Date().toLocaleDateString('es-ES')}\n‚è∞ Hora: ${new Date().toLocaleTimeString('es-ES')}\n\nüîí Sus datos han sido eliminados de forma segura y conforme a la normativa de protecci√≥n de datos.\n\nüëã Gracias por haber usado ZYRO Marketplace.`,
        [
          {
            text: 'üè† Volver al inicio',
            onPress: () => {
              // Limpiar estado de la aplicaci√≥n y volver al inicio
              setCurrentUser(null);
              setUserType(null);
              setCurrentScreen('welcome');
              setShowSubscriptionManagement(false);
              setActiveTab(0);
            }
          }
        ]
      );

    } catch (error) {
      console.error('‚ùå Error ejecutando cancelaci√≥n:', error);
      Alert.alert(
        'Error en Cancelaci√≥n',
        'Ocurri√≥ un error durante el proceso de cancelaci√≥n. Por favor, contacte con soporte t√©cnico.',
        [{ text: 'OK' }]
      );
    }
  };

  // Funci√≥n para cambiar el m√©todo de pago
  const handlePaymentMethodChange = async (methodId) => {
    try {
      // Validaciones avanzadas seg√∫n el m√©todo de pago seleccionado
      let validationResult = { isValid: false, error: '' };
      let cardInfo = null;

      switch (methodId) {
        case 'credit':
        case 'debit':
          validationResult = validateCreditCard(
            paymentMethodData.cardNumber,
            paymentMethodData.expiryDate,
            paymentMethodData.cvv,
            paymentMethodData.cardholderName
          );
          if (validationResult.isValid) {
            cardInfo = validationResult;
          }
          break;
        case 'apple':
          validationResult = validateEmail(paymentMethodData.applePayEmail, 'apple');
          break;
        case 'google':
          validationResult = validateEmail(paymentMethodData.googlePayEmail, 'google');
          break;
        case 'paypal':
          validationResult = validateEmail(paymentMethodData.paypalEmail, 'paypal');
          break;
        case 'transfer':
          validationResult = validateBankAccount(paymentMethodData.bankAccount, paymentMethodData.bankName);
          break;
        default:
          validationResult = { isValid: true };
      }

      if (!validationResult.isValid) {
        Alert.alert('‚ùå M√©todo de Pago Inv√°lido', validationResult.error);
        return;
      }

      // Mostrar indicador de verificaci√≥n
      Alert.alert(
        'üîç Verificando M√©todo de Pago',
        'Validando la informaci√≥n con el proveedor...',
        [],
        { cancelable: false }
      );

      // Verificar con proveedor externo (simulado)
      const providerVerification = await verifyPaymentMethodWithProvider(methodId, paymentMethodData);

      if (!providerVerification.isValid) {
        Alert.alert('‚ùå Verificaci√≥n Fallida', providerVerification.error);
        return;
      }

      setIsProcessingPayment(true);

      // Simular procesamiento del cambio (configuraci√≥n de suscripci√≥n)
      await new Promise(resolve => setTimeout(resolve, 3000));

      // Actualizar el m√©todo de pago en registeredCompanies
      const updatedCompanies = registeredCompanies.map(company => {
        if (company.email === currentUser.email) {
          const methodName = paymentMethods.find(m => m.id === methodId)?.name || 'M√©todo desconocido';
          let paymentMethodText = '';

          switch (methodId) {
            case 'credit':
            case 'debit':
              paymentMethodText = `${methodName} terminada en ${paymentMethodData.cardNumber.slice(-4)}`;
              break;
            case 'apple':
              paymentMethodText = `Apple Pay (${paymentMethodData.applePayEmail})`;
              break;
            case 'google':
              paymentMethodText = `Google Pay (${paymentMethodData.googlePayEmail})`;
              break;
            case 'paypal':
              paymentMethodText = `PayPal (${paymentMethodData.paypalEmail})`;
              break;
            case 'transfer':
              paymentMethodText = `Transferencia - ${paymentMethodData.bankName}`;
              break;
            default:
              paymentMethodText = methodName;
          }

          return {
            ...company,
            paymentMethod: paymentMethodText,
            lastPaymentUpdate: new Date().toISOString()
          };
        }
        return company;
      });

      setRegisteredCompanies(updatedCompanies);

      // Actualizar subscriptionData
      const methodName = paymentMethods.find(m => m.id === methodId)?.name || 'M√©todo desconocido';
      let paymentMethodText = '';

      switch (methodId) {
        case 'credit':
        case 'debit':
          const cardType = cardInfo?.cardType || methodName;
          paymentMethodText = `${cardType} terminada en ${cardInfo?.lastFourDigits || paymentMethodData.cardNumber.slice(-4)} ‚úì`;
          break;
        case 'apple':
          paymentMethodText = `Apple Pay (${paymentMethodData.applePayEmail}) ‚úì`;
          break;
        case 'google':
          paymentMethodText = `Google Pay (${paymentMethodData.googlePayEmail}) ‚úì`;
          break;
        case 'paypal':
          paymentMethodText = `PayPal (${paymentMethodData.paypalEmail}) ‚úì`;
          break;
        case 'transfer':
          paymentMethodText = `Transferencia - ${paymentMethodData.bankName} ‚úì`;
          break;
        default:
          paymentMethodText = methodName;
      }

      const updatedSubscriptionData = {
        ...subscriptionData,
        paymentMethod: paymentMethodText,
        lastPaymentMethodUpdate: new Date().toISOString()
      };

      setSubscriptionData(updatedSubscriptionData);

      // Persistir cambios en AsyncStorage
      try {
        await AsyncStorage.setItem('subscriptionData', JSON.stringify(updatedSubscriptionData));
        await AsyncStorage.setItem('companies', JSON.stringify(updatedCompanies));
        console.log('‚úÖ M√©todo de pago actualizado y persistido:', {
          company: currentUser.email,
          newMethod: paymentMethodText,
          timestamp: new Date().toISOString()
        });
      } catch (error) {
        console.error('‚ùå Error persistiendo cambios de m√©todo de pago:', error);
      }

      // Limpiar datos del formulario
      setPaymentMethodData({
        cardNumber: '',
        expiryDate: '',
        cvv: '',
        cardholderName: '',
        applePayEmail: '',
        googlePayEmail: '',
        paypalEmail: '',
        bankAccount: '',
        bankName: ''
      });

      setShowPaymentMethodChange(false);
      setNewPaymentMethod(null);

      // Regresar al modal de gesti√≥n de suscripci√≥n despu√©s de un breve delay
      setTimeout(() => {
        setShowSubscriptionManagement(true);
      }, 500);

      // Obtener informaci√≥n del plan actual para el mensaje
      const currentPlan = subscriptionData.currentPlan || 'Plan 6 meses';
      const currentPrice = subscriptionData.price || '399';
      const nextBilling = subscriptionData.nextBilling || '15/02/2025';

      // Crear mensaje personalizado seg√∫n el m√©todo
      let validationMessage = '';
      switch (methodId) {
        case 'credit':
        case 'debit':
          validationMessage = `‚úÖ ${cardInfo?.cardType || methodName} validada correctamente\nüî¢ Terminada en ${cardInfo?.lastFourDigits}\n`;
          break;
        case 'apple':
          validationMessage = `‚úÖ Apple Pay verificado correctamente\nüìß ${paymentMethodData.applePayEmail}\n`;
          break;
        case 'google':
          validationMessage = `‚úÖ Google Pay verificado correctamente\nüìß ${paymentMethodData.googlePayEmail}\n`;
          break;
        case 'paypal':
          validationMessage = `‚úÖ PayPal verificado correctamente\nüìß ${paymentMethodData.paypalEmail}\n`;
          break;
        case 'transfer':
          validationMessage = `‚úÖ Cuenta bancaria validada correctamente\nüè¶ ${paymentMethodData.bankName}\n`;
          break;
      }

      Alert.alert(
        'üéâ M√©todo de Pago Configurado y Validado',
        `${validationMessage}\nüìã Plan actual: ${currentPlan}\nüí∞ Importe mensual: ‚Ç¨${currentPrice}\nüìÖ Pr√≥ximo cobro: ${nextBilling}\n\nüîí Tu suscripci√≥n continuar√° sin interrupciones con el nuevo m√©todo de pago validado y configurado.`,
        [{ text: 'Perfecto' }]
      );

    } catch (error) {
      console.error('Error cambiando m√©todo de pago:', error);
      Alert.alert('Error', 'No se pudo cambiar el m√©todo de pago. Int√©ntalo de nuevo.');
    } finally {
      setIsProcessingPayment(false);
    }
  };

  const processCardPayment = async () => {
    if (!paymentData.cardNumber || !paymentData.expiryDate || !paymentData.cvv || !paymentData.cardholderName) {
      Alert.alert('Error', 'Por favor completa todos los campos de la tarjeta');
      return;
    }

    setIsProcessingPayment(true);
    try {
      // Simular procesamiento de tarjeta
      await new Promise(resolve => setTimeout(resolve, 3000));

      setShowPaymentModal(false);
      const plan = getSelectedPlanDetails();

      // Configurar suscripci√≥n recurrente para tarjeta
      const subscription = setupRecurringPayment(selectedPaymentMethod?.id, plan);

      Alert.alert(
        'Suscripci√≥n Activada',
        `‚úÖ Pago inicial procesado con ${selectedPaymentMethod?.name}\nüí≥ Suscripci√≥n configurada: ${plan.name}\nüí∞ Se cobrar√° ‚Ç¨${plan.price} cada mes durante ${plan.duration}\nüìÖ Pr√≥ximo cobro: ${subscription.nextPaymentDate.toLocaleDateString('es-ES')}\nüîí Tarjeta guardada de forma segura`,
        [{
          text: 'OK', onPress: () => {
            setCurrentScreen('welcome');
            setIsProcessingPayment(false);
            setPaymentData({});
          }
        }]
      );
    } catch (error) {
      setIsProcessingPayment(false);
      Alert.alert('Error', 'No se pudo procesar el pago con tarjeta');
    }
  };

  const handleCollaborationRequest = useCallback(() => {
    // Cerrar el modal de detalles con animaci√≥n suave
    setShowCollaborationDetail(false);

    // Abrir el modal del calendario inmediatamente para una transici√≥n m√°s fluida
    setTimeout(() => {
      setShowCalendar(true);
    }, 100);
  }, []);

  // Pantalla de pago para empresas
  const PaymentScreen = React.memo(() => {
    // Estado local para evitar re-renderizados
    const [localPaymentData, setLocalPaymentData] = useState(paymentData);

    // Refs para navegaci√≥n entre campos
    const cardNumberRef = useRef(null);
    const expiryDateRef = useRef(null);
    const cvvRef = useRef(null);
    const cardholderNameRef = useRef(null);

    const plan = getSelectedPlanDetails();
    const selectedMethod = paymentMethods.find(m => m.id === registrationData.paymentMethod);

    // Sincronizar datos cuando cambie el estado padre
    React.useEffect(() => {
      setLocalPaymentData(paymentData);
    }, [paymentData]);

    // Funci√≥n optimizada para actualizar campos
    const updateLocalPaymentField = useCallback((field, value) => {
      setLocalPaymentData(prev => ({
        ...prev,
        [field]: value
      }));
    }, []);

    const handlePaymentCompletion = useCallback(async () => {
      // Sincronizar estado local con estado padre antes de procesar
      setPaymentData(localPaymentData);
      setIsProcessingPayment(true);

      try {
        // Simular procesamiento de pago
        await new Promise(resolve => setTimeout(resolve, 3000));

        // Configurar suscripci√≥n
        const subscription = setupRecurringPayment(registrationData.paymentMethod, plan);

        setIsProcessingPayment(false);

        Alert.alert(
          'Pago Exitoso',
          `‚úÖ Primer pago procesado correctamente\nüí≥ Suscripci√≥n activada: ${plan.name}\nüí∞ Cobros autom√°ticos configurados\n\nüîê Ahora configura tu contrase√±a para acceder a tu cuenta`,
          [{ text: 'Continuar', onPress: () => setCurrentScreen('passwordSetup') }]
        );
      } catch (error) {
        setIsProcessingPayment(false);
        Alert.alert('Error', 'No se pudo procesar el pago. Int√©ntalo de nuevo.');
      }
    }, [localPaymentData, plan]);

    // Renderizar formulario espec√≠fico seg√∫n m√©todo de pago
    const renderPaymentForm = () => {
      const method = registrationData.paymentMethod;

      switch (method) {
        case 'credit':
        case 'debit':
          return (
            <View style={styles.cardPaymentForm}>
              <Text style={styles.formSectionTitle}>Datos de la Tarjeta</Text>

              <View style={styles.formGroup}>
                <Text style={styles.formLabel}>N√∫mero de tarjeta</Text>
                <TextInput
                  ref={cardNumberRef}
                  style={styles.formInput}
                  placeholder="1234 5678 9012 3456"
                  placeholderTextColor="#666"
                  keyboardType="numeric"
                  maxLength={19}
                  value={localPaymentData.cardNumber || ''}
                  onChangeText={(text) => {
                    const formatted = text.replace(/\s/g, '').replace(/(.{4})/g, '$1 ').trim();
                    updateLocalPaymentField('cardNumber', formatted);
                  }}
                  returnKeyType="next"
                  blurOnSubmit={false}
                  onSubmitEditing={() => expiryDateRef.current?.focus()}
                  onBlur={() => setPaymentData(localPaymentData)}
                />
              </View>

              <View style={styles.paymentRow}>
                <View style={[styles.formGroup, { flex: 1, marginRight: 10 }]}>
                  <Text style={styles.formLabel}>MM/AA</Text>
                  <TextInput
                    ref={expiryDateRef}
                    style={styles.formInput}
                    placeholder="12/25"
                    placeholderTextColor="#666"
                    keyboardType="numeric"
                    maxLength={5}
                    value={localPaymentData.expiryDate || ''}
                    onChangeText={(text) => {
                      const formatted = text.replace(/\D/g, '').replace(/(\d{2})(\d)/, '$1/$2');
                      updateLocalPaymentField('expiryDate', formatted);
                    }}
                    returnKeyType="next"
                    blurOnSubmit={false}
                    onSubmitEditing={() => cvvRef.current?.focus()}
                    onBlur={() => setPaymentData(localPaymentData)}
                  />
                </View>

                <View style={[styles.formGroup, { flex: 1, marginLeft: 10 }]}>
                  <Text style={styles.formLabel}>CVV</Text>
                  <TextInput
                    ref={cvvRef}
                    style={styles.formInput}
                    placeholder="123"
                    placeholderTextColor="#666"
                    keyboardType="numeric"
                    maxLength={4}
                    secureTextEntry
                    value={localPaymentData.cvv || ''}
                    onChangeText={(text) => updateLocalPaymentField('cvv', text)}
                    returnKeyType="next"
                    blurOnSubmit={false}
                    onSubmitEditing={() => cardholderNameRef.current?.focus()}
                    onBlur={() => setPaymentData(localPaymentData)}
                  />
                </View>
              </View>

              <View style={styles.formGroup}>
                <Text style={styles.formLabel}>Nombre del titular</Text>
                <TextInput
                  ref={cardholderNameRef}
                  style={styles.formInput}
                  placeholder="Nombre como aparece en la tarjeta"
                  placeholderTextColor="#666"
                  value={localPaymentData.cardholderName || ''}
                  onChangeText={(text) => updateLocalPaymentField('cardholderName', text)}
                  returnKeyType="done"
                  onBlur={() => setPaymentData(localPaymentData)}
                />
              </View>
            </View>
          );

        case 'paypal':
          return (
            <View style={styles.paypalInfo}>
              <Text style={styles.paypalTitle}>Pago con PayPal</Text>
              <Text style={styles.paypalDescription}>
                Se abrir√° PayPal para completar el pago de forma segura
              </Text>
            </View>
          );

        case 'transfer':
          return (
            <View style={styles.transferInfo}>
              <Text style={styles.transferTitle}>Datos para Transferencia</Text>
              <View style={styles.transferDetails}>
                <Text style={styles.transferLabel}>Beneficiario:</Text>
                <Text style={styles.transferValue}>ZYRO MARKETPLACE S.L.</Text>

                <Text style={styles.transferLabel}>IBAN:</Text>
                <Text style={styles.transferValue}>ES91 2100 0418 4502 0005 1332</Text>

                <Text style={styles.transferLabel}>Concepto:</Text>
                <Text style={styles.transferValue}>Suscripci√≥n {getSelectedPlanDetails().name} - {registrationData.email}</Text>

                <Text style={styles.transferLabel}>Importe:</Text>
                <Text style={styles.transferValue}>‚Ç¨{getSelectedPlanDetails().price}</Text>
              </View>
              <Text style={styles.transferNote}>
                ‚ö†Ô∏è Realiza la transferencia y pulsa "Completar Pago" para activar tu cuenta
              </Text>
            </View>
          );

        default:
          return null;
      }
    };

  // Return corregido:     return (
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor="#000000" />

        {/* Header */}
        <View style={styles.paymentScreenHeader}>
          <TouchableOpacity
            style={styles.backButton}
            onPress={() => setCurrentScreen('companyRegister')}
          >
            <Ionicons name="arrow-back" size={24} color="#C9A961" />
          </TouchableOpacity>
          <Text style={styles.paymentScreenTitle}>Completar Pago</Text>
          <View style={styles.headerSpacer} />
        </View>

        <ScrollView style={styles.paymentScreenContent}>
          {/* Resumen de la empresa */}
          <View style={styles.companyInfoCard}>
            <Text style={styles.companyInfoTitle}>Informaci√≥n de la Empresa</Text>
            <Text style={styles.companyInfoText}>üìß {registrationData.email}</Text>
            <Text style={styles.companyInfoText}>üè¢ {registrationData.businessName}</Text>
            <Text style={styles.companyInfoText}>üìû {registrationData.phone}</Text>
          </View>

          {/* Resumen del plan */}
          <View style={styles.planSummaryCard}>
            <Text style={styles.planSummaryTitle}>Plan Seleccionado</Text>
            <View style={styles.planSummaryRow}>
              <Text style={styles.planSummaryLabel}>{plan.name}</Text>
              <Text style={styles.planSummaryPrice}>‚Ç¨{plan.price}/mes</Text>
            </View>
            <Text style={styles.planSummaryDuration}>Duraci√≥n: {plan.duration}</Text>
            <Text style={styles.planSummaryNote}>IVA incluido ‚Ä¢ Cobros autom√°ticos mensuales</Text>
          </View>

          {/* M√©todo de pago seleccionado */}
          <View style={styles.paymentMethodCard}>
            <Text style={styles.paymentMethodTitle}>M√©todo de Pago</Text>
            <View style={styles.paymentMethodRow}>
              <Ionicons name={selectedMethod?.icon} size={24} color="#C9A961" />
              <Text style={styles.paymentMethodName}>{selectedMethod?.name}</Text>
            </View>
          </View>

          {/* Formulario espec√≠fico seg√∫n m√©todo de pago */}
          {renderPaymentForm()}

          {/* Bot√≥n de pago */}
          <TouchableOpacity
            style={[styles.completePaymentButton, isProcessingPayment && styles.paymentButtonDisabled]}
            onPress={handlePaymentCompletion}
            disabled={isProcessingPayment}
          >
            {isProcessingPayment ? (
              <Text style={styles.completePaymentButtonText}>Procesando Pago...</Text>
            ) : (
              <Text style={styles.completePaymentButtonText}>Completar Pago - ‚Ç¨{plan.price}</Text>
            )}
          </TouchableOpacity>
        </ScrollView>
      </SafeAreaView>
    );
  });



  // Pantalla de configuraci√≥n de contrase√±a
  const PasswordSetupScreen = React.memo(() => {
    // Estado local para evitar re-renderizados
    const [localCompanyPassword, setLocalCompanyPassword] = useState(companyPassword);
    const [localConfirmPassword, setLocalConfirmPassword] = useState(confirmPassword);

    // Refs para navegaci√≥n entre campos
    const passwordRef = useRef(null);
    const confirmPasswordRef = useRef(null);

    // Sincronizar datos cuando cambie el estado padre
    React.useEffect(() => {
      setLocalCompanyPassword(companyPassword);
    }, [companyPassword]);

    React.useEffect(() => {
      setLocalConfirmPassword(confirmPassword);
    }, [confirmPassword]);

    // Funci√≥n optimizada para actualizar campos
    const updateLocalPassword = useCallback((value) => {
      setLocalCompanyPassword(value);
    }, []);

    const updateLocalConfirmPassword = useCallback((value) => {
      setLocalConfirmPassword(value);
    }, []);

    const handlePasswordSetup = useCallback(async () => {
      // Sincronizar estado local con estado padre antes de procesar
      setCompanyPassword(localCompanyPassword);
      setConfirmPassword(localConfirmPassword);

      if (!localCompanyPassword || localCompanyPassword.length < 6) {
        Alert.alert('Error', 'La contrase√±a debe tener al menos 6 caracteres');
        return;
      }

      if (localCompanyPassword !== localConfirmPassword) {
        Alert.alert('Error', 'Las contrase√±as no coinciden');
        return;
      }

      // Crear datos completos de la empresa
      const selectedPlan = getSelectedPlanDetails();
      const companyData = {
        id: Date.now(),
        name: registrationData.companyName,
        email: registrationData.email,
        plan: selectedPlan.name,
        price: `‚Ç¨${selectedPlan.price}`,
        paymentMethod: paymentMethods.find(m => m.id === registrationData.paymentMethod)?.name || 'Tarjeta de Cr√©dito',
        status: 'active',
        registrationDate: new Date().toISOString().split('T')[0],
        collaborations: 0,
        // Datos adicionales del registro
        businessType: registrationData.businessType,
        cif: registrationData.cif,
        address: registrationData.address,
        phone: registrationData.phone,
        city: registrationData.city || 'Madrid',
        contactName: registrationData.contactName,
        contactEmail: registrationData.contactEmail,
        position: registrationData.position,
        description: registrationData.description,
        minFollowers: registrationData.minFollowers || 5000,
        maxCompanions: registrationData.maxCompanions || 2,
        duration: selectedPlan.duration
      };

      // Agregar empresa a la lista de empresas registradas
      setRegisteredCompanies(prev => [...prev, companyData]);

      // Crear usuario empresa con informaci√≥n completa
      const companyUser = {
        type: 'company',
        role: 'empresa',
        email: registrationData.email,
        password: companyPassword,
        businessName: registrationData.companyName,
        businessType: registrationData.businessType,
        city: registrationData.city || 'Madrid',
        businessAddress: registrationData.address,
        businessPhone: registrationData.phone,
        businessDescription: registrationData.description,
        minFollowers: registrationData.minFollowers || 5000,
        maxCompanions: registrationData.maxCompanions || 2,
        plan: selectedPlan,
        userType: 'company'
      };

      // Agregar contrase√±a al sistema de contrase√±as usando funci√≥n centralizada
      await updateUserPassword(registrationData.email, companyPassword);

      setCurrentUser(companyUser);
      setUserType('company');
      setActiveTab(3); // Ir directamente al tab del perfil donde est√° el CompanyDashboard
      setCurrentScreen('main');

      Alert.alert(
        '¬°Bienvenido a ZYRO!',
        `Cuenta configurada correctamente.\n\nüìß Email: ${registrationData.email}\nüè¢ Empresa: ${registrationData.companyName}\nüí≥ Plan: ${getSelectedPlanDetails().name}`,
        [{ text: 'Comenzar' }]
      );
    }, [localCompanyPassword, localConfirmPassword]);

  // Return corregido:     return (
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor="#000000" />

        <View style={styles.passwordSetupContainer}>
          <View style={styles.passwordSetupHeader}>
            <Image
              source={logoZyro}
              style={styles.passwordSetupLogo}
              resizeMode="contain"
            />
            <Text style={styles.passwordSetupTitle}>Configura tu Contrase√±a</Text>
            <Text style={styles.passwordSetupSubtitle}>
              Crea una contrase√±a segura para acceder a tu cuenta empresarial
            </Text>
          </View>

          <View style={styles.passwordSetupForm}>
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Email corporativo</Text>
              <TextInput
                style={[styles.formInput, styles.disabledInput]}
                value={registrationData.email}
                editable={false}
              />
            </View>

            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Contrase√±a</Text>
              <TextInput
                ref={passwordRef}
                style={styles.formInput}
                placeholder="M√≠nimo 6 caracteres"
                placeholderTextColor="#666"
                secureTextEntry
                value={localCompanyPassword}
                onChangeText={updateLocalPassword}
                returnKeyType="next"
                blurOnSubmit={false}
                onSubmitEditing={() => confirmPasswordRef.current?.focus()}
                onBlur={() => setCompanyPassword(localCompanyPassword)}
              />
            </View>

            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Confirmar contrase√±a</Text>
              <TextInput
                ref={confirmPasswordRef}
                style={styles.formInput}
                placeholder="Repite tu contrase√±a"
                placeholderTextColor="#666"
                secureTextEntry
                value={localConfirmPassword}
                onChangeText={updateLocalConfirmPassword}
                returnKeyType="done"
                onSubmitEditing={handlePasswordSetup}
                onBlur={() => setConfirmPassword(localConfirmPassword)}
              />
            </View>

            <TouchableOpacity
              style={styles.setupPasswordButton}
              onPress={handlePasswordSetup}
            >
              <Text style={styles.setupPasswordButtonText}>Completar Configuraci√≥n</Text>
            </TouchableOpacity>
          </View>
        </View>
      </SafeAreaView>
    );
  });

  // Pantalla principal para empresas
  const CompanyMainScreen = () => {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor="#000000" />

        <View style={styles.companyMainContainer}>
          <View style={styles.companyMainHeader}>
            <Image
              source={logoZyro}
              style={styles.companyMainLogo}
              resizeMode="contain"
            />
            <Text style={styles.companyMainTitle}>Panel Empresarial</Text>
            <Text style={styles.companyMainWelcome}>
              ¬°Bienvenido, {currentUser?.businessName}!
            </Text>
          </View>

          <View style={styles.companyMainContent}>
            <View style={styles.companyStatsCard}>
              <Text style={styles.companyStatsTitle}>Tu Suscripci√≥n</Text>
              <View style={styles.companyStatsRow}>
                <Text style={styles.companyStatsLabel}>Plan:</Text>
                <Text style={styles.companyStatsValue}>{currentUser?.plan?.name}</Text>
              </View>
              <View style={styles.companyStatsRow}>
                <Text style={styles.companyStatsLabel}>Precio:</Text>
                <Text style={styles.companyStatsValue}>‚Ç¨{currentUser?.plan?.price}/mes</Text>
              </View>
              <View style={styles.companyStatsRow}>
                <Text style={styles.companyStatsLabel}>Estado:</Text>
                <Text style={[styles.companyStatsValue, { color: '#4CAF50' }]}>Activa</Text>
              </View>
            </View>

            <View style={styles.companyActionsCard}>
              <Text style={styles.companyActionsTitle}>Acciones Disponibles</Text>

              <TouchableOpacity style={styles.companyActionButton}>
                <Ionicons name="add-circle-outline" size={24} color="#C9A961" />
                <Text style={styles.companyActionText}>Crear Nueva Colaboraci√≥n</Text>
              </TouchableOpacity>

              <TouchableOpacity style={styles.companyActionButton}>
                <Ionicons name="people-outline" size={24} color="#C9A961" />
                <Text style={styles.companyActionText}>Gestionar Influencers</Text>
              </TouchableOpacity>

              <TouchableOpacity style={styles.companyActionButton}>
                <Ionicons name="analytics-outline" size={24} color="#C9A961" />
                <Text style={styles.companyActionText}>Ver Estad√≠sticas</Text>
              </TouchableOpacity>

              <TouchableOpacity style={styles.companyActionButton}>
                <Ionicons name="card-outline" size={24} color="#C9A961" />
                <Text style={styles.companyActionText}>Gestionar Pagos</Text>
              </TouchableOpacity>
            </View>

            <TouchableOpacity
              style={styles.logoutButton}
              onPress={() => {
                handleLogout();
                setCurrentScreen('welcome');
              }}
            >
              <Text style={styles.logoutButtonText}>Cerrar Sesi√≥n</Text>
            </TouchableOpacity>
          </View>
        </View>
      </SafeAreaView>
    );
  };

  // ‚úÖ MODAL: SOLICITUDES DE REGISTRO DE INFLUENCERS
  

  // ‚úÖ MODAL: INFLUENCERS APROBADOS
  

  
  

  
  // ‚úÖ MODAL MEJORADO PARA SOLICITUDES DE REGISTRO DE INFLUENCERS
  

    

    

  // Return corregido:     return (
      <Modal visible={showInfluencerRegistrationRequests} animationType="slide">
        <SafeAreaView style={styles.container}>
          <View style={styles.modalHeader}>
            <TouchableOpacity
              style={styles.modalBackButton}
              onPress={() => setShowInfluencerRegistrationRequests(false)}
            >
              <Ionicons name="arrow-back" size={20} color="#C9A961" />
              <Text style={styles.modalBackButtonText}>Volver</Text>
            </TouchableOpacity>
            <Text style={styles.modalTitle}>Solicitudes de Registro</Text>
            <TouchableOpacity
              style={styles.modalActionButton}
              onPress={() => setShowApprovedInfluencers(true)}
            >
              <Ionicons name="checkmark-circle" size={20} color="#C9A961" />
              <Text style={styles.modalActionButtonText}>Ver Aprobados</Text>
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.modalContent}>
            {pendingInfluencers.length === 0 ? (
              <View style={styles.emptyState}>
                <Ionicons name="person-add-outline" size={48} color="#666666" />
                <Text style={styles.emptyStateTitle}>No hay solicitudes pendientes</Text>
                <Text style={styles.emptyStateText}>
                  Las nuevas solicitudes de registro de influencers aparecer√°n aqu√≠.
                </Text>
              </View>
            ) : (
              pendingInfluencers.map((influencer) => (
                <View key={influencer.id} style={styles.influencerRequestCard}>
                  <View style={styles.influencerRequestHeader}>
                    <View style={styles.influencerRequestInfo}>
                      <Text style={styles.influencerRequestName}>{influencer.name}</Text>
                      <Text style={styles.influencerRequestEmail}>{influencer.email}</Text>
                      <Text style={styles.influencerRequestDate}>
                        Registrado: {influencer.registrationDate} a las {influencer.registrationTime}
                      </Text>
                    </View>
                    <View style={styles.influencerRequestBadge}>
                      <Text style={styles.influencerRequestBadgeText}>PENDIENTE</Text>
                    </View>
                  </View>

                  <View style={styles.influencerRequestDetails}>
                    <View style={styles.influencerRequestRow}>
                      <Ionicons name="location-outline" size={16} color="#C9A961" />
                      <Text style={styles.influencerRequestDetailText}>{influencer.city}</Text>
                    </View>
                    <View style={styles.influencerRequestRow}>
                      <Ionicons name="call-outline" size={16} color="#C9A961" />
                      <Text style={styles.influencerRequestDetailText}>{influencer.phone}</Text>
                    </View>
                    <View style={styles.influencerRequestRow}>
                      <Ionicons name="logo-instagram" size={16} color="#C9A961" />
                      <Text style={styles.influencerRequestDetailText}>{influencer.instagram}</Text>
                    </View>
                    <View style={styles.influencerRequestRow}>
                      <Ionicons name="logo-tiktok" size={16} color="#C9A961" />
                      <Text style={styles.influencerRequestDetailText}>{influencer.tiktok}</Text>
                    </View>
                    
                    {/* ‚úÖ MOSTRAR SEGUIDORES CORRECTOS */}
                    <View style={styles.influencerRequestRow}>
                      <Ionicons name="people-outline" size={16} color="#C9A961" />
                      <Text style={styles.influencerRequestDetailText}>
                        {formatFollowersCount(influencer.followers)} seguidores
                      </Text>
                    </View>
                  </View>

                  {/* ‚úÖ SECCI√ìN DE CAPTURAS DE PANTALLA MEJORADA */}
                  <View style={styles.screenshotsSection}>
                    <Text style={styles.screenshotsSectionTitle}>Capturas de Pantalla</Text>
                    
                    {/* Instagram Screenshots */}
                    <View style={styles.screenshotsPlatform}>
                      <Text style={styles.screenshotsPlatformTitle}>
                        üì∏ Instagram ({influencer.instagramScreenshots?.length || 0} capturas)
                      </Text>
                      {influencer.instagramScreenshots && influencer.instagramScreenshots.length > 0 ? (
                        <ScrollView horizontal style={styles.screenshotsScroll} showsHorizontalScrollIndicator={false}>
                          {influencer.instagramScreenshots.map((screenshot, index) => (
                            <TouchableOpacity
                              key={index}
                              style={styles.screenshotThumbnail}
                              onPress={() => handleViewScreenshotsLocal(influencer.instagramScreenshots, 'Instagram')}
                            >
                              <Image
                                source={{ uri: screenshot.uri }}
                                style={styles.screenshotImage}
                              />
                            </TouchableOpacity>
                          ))}
                        </ScrollView>
                      ) : (
                        <Text style={styles.noScreenshotsText}>No hay capturas de Instagram</Text>
                      )}
                    </View>

                    {/* TikTok Screenshots */}
                    <View style={styles.screenshotsPlatform}>
                      <Text style={styles.screenshotsPlatformTitle}>
                        üéµ TikTok ({influencer.tiktokScreenshots?.length || 0} capturas)
                      </Text>
                      {influencer.tiktokScreenshots && influencer.tiktokScreenshots.length > 0 ? (
                        <ScrollView horizontal style={styles.screenshotsScroll} showsHorizontalScrollIndicator={false}>
                          {influencer.tiktokScreenshots.map((screenshot, index) => (
                            <TouchableOpacity
                              key={index}
                              style={styles.screenshotThumbnail}
                              onPress={() => handleViewScreenshotsLocal(influencer.tiktokScreenshots, 'TikTok')}
                            >
                              <Image
                                source={{ uri: screenshot.uri }}
                                style={styles.screenshotImage}
                              />
                            </TouchableOpacity>
                          ))}
                        </ScrollView>
                      ) : (
                        <Text style={styles.noScreenshotsText}>No hay capturas de TikTok</Text>
                      )}
                    </View>
                  </View>

                  <View style={styles.influencerRequestActions}>
                    <TouchableOpacity
                      style={styles.rejectButton}
                      onPress={() => handleRejectInfluencer(influencer.id, influencer.name)}
                    >
                      <Ionicons name="close-circle" size={16} color="#FFFFFF" />
                      <Text style={styles.rejectButtonText}>Rechazar</Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                      style={styles.approveButton}
                      onPress={() => handleApproveInfluencer(influencer.id)}
                    >
                      <Ionicons name="checkmark-circle" size={16} color="#FFFFFF" />
                      <Text style={styles.approveButtonText}>Aprobar</Text>
                    </TouchableOpacity>
                  </View>
                </View>
              ))
            )}
          </ScrollView>

          {/* Modal para ver capturas en pantalla completa */}
          <ScreenshotsViewerModal
            visible={showScreenshotsViewer}
            onClose={() => setShowScreenshotsViewer(false)}
            screenshots={selectedScreenshots}
            platform={selectedPlatform}
          />
        </SafeAreaView>
      </Modal>
    );
  };

  
  // ‚úÖ MODAL MEJORADO PARA INFLUENCERS APROBADOS CON SEGUIDORES ACTUALIZADOS
  

    

    // ‚úÖ FUNCI√ìN PARA OBTENER SEGUIDORES ACTUALIZADOS
    

    };

  // Return corregido:     return (
      <Modal visible={showApprovedInfluencers} animationType="slide">
        <SafeAreaView style={styles.container}>
          <View style={styles.modalHeader}>
            <TouchableOpacity
              style={styles.modalBackButton}
              onPress={() => setShowApprovedInfluencers(false)}
            >
              <Ionicons name="arrow-back" size={20} color="#C9A961" />
              <Text style={styles.modalBackButtonText}>Volver</Text>
            </TouchableOpacity>
            <Text style={styles.modalTitle}>Influencers Aprobados</Text>
            <TouchableOpacity
              style={styles.modalActionButton}
              onPress={() => cleanApprovedInfluencers()}
            >
              <Ionicons name="refresh" size={20} color="#C9A961" />
              <Text style={styles.modalActionButtonText}>Actualizar</Text>
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.modalContent}>
            {approvedInfluencersData.length === 0 ? (
              <View style={styles.emptyState}>
                <Ionicons name="checkmark-circle-outline" size={48} color="#666666" />
                <Text style={styles.emptyStateTitle}>No hay influencers aprobados</Text>
                <Text style={styles.emptyStateText}>
                  Los influencers aprobados aparecer√°n aqu√≠ con acceso completo a la aplicaci√≥n.
                </Text>
              </View>
            ) : (
              approvedInfluencersData.map((influencer) => (
                <View key={influencer.id} style={styles.approvedInfluencerCard}>
                  <View style={styles.approvedInfluencerHeader}>
                    <View style={styles.approvedInfluencerInfo}>
                      <Text style={styles.approvedInfluencerName}>{influencer.name}</Text>
                      <Text style={styles.approvedInfluencerEmail}>{influencer.email}</Text>
                      <Text style={styles.approvedInfluencerDate}>
                        Aprobado: {influencer.approvedDate}
                      </Text>
                    </View>
                    <View style={styles.approvedInfluencerBadge}>
                      <Text style={styles.approvedInfluencerBadgeText}>APROBADO</Text>
                    </View>
                  </View>

                  <View style={styles.approvedInfluencerDetails}>
                    <View style={styles.approvedInfluencerRow}>
                      <Ionicons name="location-outline" size={16} color="#C9A961" />
                      <Text style={styles.approvedInfluencerDetailText}>{influencer.city}</Text>
                    </View>
                    <View style={styles.approvedInfluencerRow}>
                      <Ionicons name="logo-instagram" size={16} color="#C9A961" />
                      <Text style={styles.approvedInfluencerDetailText}>{influencer.instagram}</Text>
                    </View>
                    <View style={styles.approvedInfluencerRow}>
                      <Ionicons name="logo-tiktok" size={16} color="#C9A961" />
                      <Text style={styles.approvedInfluencerDetailText}>{influencer.tiktok}</Text>
                    </View>
                    
                    {/* ‚úÖ MOSTRAR SEGUIDORES ACTUALIZADOS */}
                    <View style={styles.approvedInfluencerRow}>
                      <Ionicons name="people-outline" size={16} color="#C9A961" />
                      <Text style={styles.approvedInfluencerDetailText}>
                        {formatFollowersCount(getUpdatedFollowers(influencer.email))} seguidores
                      </Text>
                    </View>
                  </View>

                  {/* Estado de acceso */}
                  <View style={styles.accessStatusSection}>
                    <View style={styles.accessStatusRow}>
                      <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
                      <Text style={styles.accessStatusText}>Acceso activo a la aplicaci√≥n</Text>
                    </View>
                    <View style={styles.accessStatusRow}>
                      <Ionicons name="key" size={16} color="#4CAF50" />
                      <Text style={styles.accessStatusText}>Puede iniciar sesi√≥n</Text>
                    </View>
                  </View>

                  {/* ‚úÖ SECCI√ìN DE CAPTURAS DE PANTALLA */}
                  {(influencer.instagramScreenshots?.length > 0 || influencer.tiktokScreenshots?.length > 0) && (
                    <View style={styles.screenshotsSection}>
                      <Text style={styles.screenshotsSectionTitle}>Capturas de Registro</Text>
                      
                      {/* Instagram Screenshots */}
                      {influencer.instagramScreenshots && influencer.instagramScreenshots.length > 0 && (
                        <View style={styles.screenshotsPlatform}>
                          <Text style={styles.screenshotsPlatformTitle}>
                            üì∏ Instagram ({influencer.instagramScreenshots.length} capturas)
                          </Text>
                          <ScrollView horizontal style={styles.screenshotsScroll} showsHorizontalScrollIndicator={false}>
                            {influencer.instagramScreenshots.map((screenshot, index) => (
                              <TouchableOpacity
                                key={index}
                                style={styles.screenshotThumbnail}
                                onPress={() => handleViewScreenshotsLocal(influencer.instagramScreenshots, 'Instagram')}
                              >
                                <Image
                                  source={{ uri: screenshot.uri }}
                                  style={styles.screenshotImage}
                                />
                              </TouchableOpacity>
                            ))}
                          </ScrollView>
                        </View>
                      )}

                      {/* TikTok Screenshots */}
                      {influencer.tiktokScreenshots && influencer.tiktokScreenshots.length > 0 && (
                        <View style={styles.screenshotsPlatform}>
                          <Text style={styles.screenshotsPlatformTitle}>
                            üéµ TikTok ({influencer.tiktokScreenshots.length} capturas)
                          </Text>
                          <ScrollView horizontal style={styles.screenshotsScroll} showsHorizontalScrollIndicator={false}>
                            {influencer.tiktokScreenshots.map((screenshot, index) => (
                              <TouchableOpacity
                                key={index}
                                style={styles.screenshotThumbnail}
                                onPress={() => handleViewScreenshotsLocal(influencer.tiktokScreenshots, 'TikTok')}
                              >
                                <Image
                                  source={{ uri: screenshot.uri }}
                                  style={styles.screenshotImage}
                                />
                              </TouchableOpacity>
                            ))}
                          </ScrollView>
                        </View>
                      )}
                    </View>
                  )}

                  {/* ‚úÖ BOT√ìN PARA ELIMINAR INFLUENCER APROBADO */}
                  <View style={styles.removeInfluencerSection}>
                    <TouchableOpacity
                      style={styles.removeInfluencerButton}
                      onPress={() => handleRemoveInfluencer(influencer.email, influencer.name)}
                    >
                      <Ionicons name="trash" size={16} color="#FFFFFF" />
                      <Text style={styles.removeInfluencerButtonText}>Eliminar Acceso</Text>
                    </TouchableOpacity>
                  </View>
                </View>
              ))
            )}
          </ScrollView>

          {/* Modal para ver capturas en pantalla completa */}
          <ScreenshotsViewerModal
            visible={showScreenshotsViewer}
            onClose={() => setShowScreenshotsViewer(false)}
            screenshots={selectedScreenshots}
            platform={selectedPlatform}
          />
        </SafeAreaView>
      </Modal>
    );
  };

  
  

  

    

    

  // Return corregido:     return (
      <Modal visible={showInfluencerRegistrationRequests} animationType="slide">
        <SafeAreaView style={styles.container}>
          <View style={styles.modalHeader}>
            <TouchableOpacity
              style={styles.modalBackButton}
              onPress={() => setShowInfluencerRegistrationRequests(false)}
            >
              <Ionicons name="arrow-back" size={20} color="#C9A961" />
              <Text style={styles.modalBackButtonText}>Volver</Text>
            </TouchableOpacity>
            <Text style={styles.modalTitle}>Solicitudes de Registro</Text>
            <TouchableOpacity
              style={styles.modalActionButton}
              onPress={() => setShowApprovedInfluencers(true)}
            >
              <Ionicons name="checkmark-circle" size={20} color="#C9A961" />
              <Text style={styles.modalActionButtonText}>Ver Aprobados</Text>
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.modalContent}>
            {pendingInfluencers.length === 0 ? (
              <View style={styles.emptyState}>
                <Ionicons name="person-add-outline" size={48} color="#666666" />
                <Text style={styles.emptyStateTitle}>No hay solicitudes pendientes</Text>
                <Text style={styles.emptyStateText}>
                  Las nuevas solicitudes de registro de influencers aparecer√°n aqu√≠.
                </Text>
              </View>
            ) : (
              pendingInfluencers.map((influencer) => (
                <View key={influencer.id} style={styles.influencerRequestCard}>
                  <View style={styles.influencerRequestHeader}>
                    <View style={styles.influencerRequestInfo}>
                      <Text style={styles.influencerRequestName}>{influencer.name}</Text>
                      <Text style={styles.influencerRequestEmail}>{influencer.email}</Text>
                      <Text style={styles.influencerRequestDate}>
                        Registrado: {influencer.registrationDate} a las {influencer.registrationTime}
                      </Text>
                    </View>
                    <View style={styles.influencerRequestBadge}>
                      <Text style={styles.influencerRequestBadgeText}>PENDIENTE</Text>
                    </View>
                  </View>

                  <View style={styles.influencerRequestDetails}>
                    <View style={styles.influencerRequestRow}>
                      <Ionicons name="location-outline" size={16} color="#C9A961" />
                      <Text style={styles.influencerRequestDetailText}>{influencer.city}</Text>
                    </View>
                    <View style={styles.influencerRequestRow}>
                      <Ionicons name="call-outline" size={16} color="#C9A961" />
                      <Text style={styles.influencerRequestDetailText}>{influencer.phone}</Text>
                    </View>
                    <View style={styles.influencerRequestRow}>
                      <Ionicons name="logo-instagram" size={16} color="#C9A961" />
                      <Text style={styles.influencerRequestDetailText}>{influencer.instagram}</Text>
                    </View>
                    <View style={styles.influencerRequestRow}>
                      <Ionicons name="logo-tiktok" size={16} color="#C9A961" />
                      <Text style={styles.influencerRequestDetailText}>{influencer.tiktok}</Text>
                    </View>
                    
                    <View style={styles.influencerRequestRow}>
                      <Ionicons name="people-outline" size={16} color="#C9A961" />
                      <Text style={styles.influencerRequestDetailText}>
                        {formatFollowersCount(influencer.followers)} seguidores
                      </Text>
                    </View>
                  </View>

                  {/* Secci√≥n de capturas de pantalla */}
                  <View style={styles.screenshotsSection}>
                    <Text style={styles.screenshotsSectionTitle}>Capturas de Pantalla</Text>
                    
                    {/* Instagram Screenshots */}
                    <View style={styles.screenshotsPlatform}>
                      <Text style={styles.screenshotsPlatformTitle}>
                        üì∏ Instagram ({influencer.instagramScreenshots?.length || 0} capturas)
                      </Text>
                      {influencer.instagramScreenshots && influencer.instagramScreenshots.length > 0 ? (
                        <ScrollView horizontal style={styles.screenshotsScroll} showsHorizontalScrollIndicator={false}>
                          {influencer.instagramScreenshots.map((screenshot, index) => (
                            <TouchableOpacity
                              key={index}
                              style={styles.screenshotThumbnail}
                              onPress={() => handleViewScreenshotsLocal(influencer.instagramScreenshots, 'Instagram')}
                            >
                              <Image
                                source={{ uri: screenshot.uri }}
                                style={styles.screenshotImage}
                              />
                            </TouchableOpacity>
                          ))}
                        </ScrollView>
                      ) : (
                        <Text style={styles.noScreenshotsText}>No hay capturas de Instagram</Text>
                      )}
                    </View>

                    {/* TikTok Screenshots */}
                    <View style={styles.screenshotsPlatform}>
                      <Text style={styles.screenshotsPlatformTitle}>
                        üéµ TikTok ({influencer.tiktokScreenshots?.length || 0} capturas)
                      </Text>
                      {influencer.tiktokScreenshots && influencer.tiktokScreenshots.length > 0 ? (
                        <ScrollView horizontal style={styles.screenshotsScroll} showsHorizontalScrollIndicator={false}>
                          {influencer.tiktokScreenshots.map((screenshot, index) => (
                            <TouchableOpacity
                              key={index}
                              style={styles.screenshotThumbnail}
                              onPress={() => handleViewScreenshotsLocal(influencer.tiktokScreenshots, 'TikTok')}
                            >
                              <Image
                                source={{ uri: screenshot.uri }}
                                style={styles.screenshotImage}
                              />
                            </TouchableOpacity>
                          ))}
                        </ScrollView>
                      ) : (
                        <Text style={styles.noScreenshotsText}>No hay capturas de TikTok</Text>
                      )}
                    </View>
                  </View>

                  <View style={styles.influencerRequestActions}>
                    <TouchableOpacity
                      style={styles.rejectButton}
                      onPress={() => handleRejectInfluencer(influencer.id, influencer.name)}
                    >
                      <Ionicons name="close-circle" size={16} color="#FFFFFF" />
                      <Text style={styles.rejectButtonText}>Rechazar</Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                      style={styles.approveButton}
                      onPress={() => handleApproveInfluencer(influencer.id)}
                    >
                      <Ionicons name="checkmark-circle" size={16} color="#FFFFFF" />
                      <Text style={styles.approveButtonText}>Aprobar</Text>
                    </TouchableOpacity>
                  </View>
                </View>
              ))
            )}
          </ScrollView>

          <ScreenshotsViewerModal
            visible={showScreenshotsViewer}
            onClose={() => setShowScreenshotsViewer(false)}
            screenshots={selectedScreenshots}
            platform={selectedPlatform}
          />
        </SafeAreaView>
      </Modal>
    );
  };

  

    

    

    };

  // Return corregido:     return (
      <Modal visible={showApprovedInfluencers} animationType="slide">
        <SafeAreaView style={styles.container}>
          <View style={styles.modalHeader}>
            <TouchableOpacity
              style={styles.modalBackButton}
              onPress={() => setShowApprovedInfluencers(false)}
            >
              <Ionicons name="arrow-back" size={20} color="#C9A961" />
              <Text style={styles.modalBackButtonText}>Volver</Text>
            </TouchableOpacity>
            <Text style={styles.modalTitle}>Influencers Aprobados</Text>
            <TouchableOpacity
              style={styles.modalActionButton}
              onPress={() => cleanApprovedInfluencers()}
            >
              <Ionicons name="refresh" size={20} color="#C9A961" />
              <Text style={styles.modalActionButtonText}>Actualizar</Text>
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.modalContent}>
            {approvedInfluencersData.length === 0 ? (
              <View style={styles.emptyState}>
                <Ionicons name="checkmark-circle-outline" size={48} color="#666666" />
                <Text style={styles.emptyStateTitle}>No hay influencers aprobados</Text>
                <Text style={styles.emptyStateText}>
                  Los influencers aprobados aparecer√°n aqu√≠ con acceso completo a la aplicaci√≥n.
                </Text>
              </View>
            ) : (
              approvedInfluencersData.map((influencer) => (
                <View key={influencer.id} style={styles.approvedInfluencerCard}>
                  <View style={styles.approvedInfluencerHeader}>
                    <View style={styles.approvedInfluencerInfo}>
                      <Text style={styles.approvedInfluencerName}>{influencer.name}</Text>
                      <Text style={styles.approvedInfluencerEmail}>{influencer.email}</Text>
                      <Text style={styles.approvedInfluencerDate}>
                        Aprobado: {influencer.approvedDate}
                      </Text>
                    </View>
                    <View style={styles.approvedInfluencerBadge}>
                      <Text style={styles.approvedInfluencerBadgeText}>APROBADO</Text>
                    </View>
                  </View>

                  <View style={styles.approvedInfluencerDetails}>
                    <View style={styles.approvedInfluencerRow}>
                      <Ionicons name="location-outline" size={16} color="#C9A961" />
                      <Text style={styles.approvedInfluencerDetailText}>{influencer.city}</Text>
                    </View>
                    <View style={styles.approvedInfluencerRow}>
                      <Ionicons name="logo-instagram" size={16} color="#C9A961" />
                      <Text style={styles.approvedInfluencerDetailText}>{influencer.instagram}</Text>
                    </View>
                    <View style={styles.approvedInfluencerRow}>
                      <Ionicons name="logo-tiktok" size={16} color="#C9A961" />
                      <Text style={styles.approvedInfluencerDetailText}>{influencer.tiktok}</Text>
                    </View>
                    
                    <View style={styles.approvedInfluencerRow}>
                      <Ionicons name="people-outline" size={16} color="#C9A961" />
                      <Text style={styles.approvedInfluencerDetailText}>
                        {formatFollowersCount(getUpdatedFollowers(influencer.email))} seguidores
                      </Text>
                    </View>
                  </View>

                  <View style={styles.accessStatusSection}>
                    <View style={styles.accessStatusRow}>
                      <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
                      <Text style={styles.accessStatusText}>Acceso activo a la aplicaci√≥n</Text>
                    </View>
                    <View style={styles.accessStatusRow}>
                      <Ionicons name="key" size={16} color="#4CAF50" />
                      <Text style={styles.accessStatusText}>Puede iniciar sesi√≥n</Text>
                    </View>
                  </View>

                  {(influencer.instagramScreenshots?.length > 0 || influencer.tiktokScreenshots?.length > 0) && (
                    <View style={styles.screenshotsSection}>
                      <Text style={styles.screenshotsSectionTitle}>Capturas de Registro</Text>
                      
                      {influencer.instagramScreenshots && influencer.instagramScreenshots.length > 0 && (
                        <View style={styles.screenshotsPlatform}>
                          <Text style={styles.screenshotsPlatformTitle}>
                            üì∏ Instagram ({influencer.instagramScreenshots.length} capturas)
                          </Text>
                          <ScrollView horizontal style={styles.screenshotsScroll} showsHorizontalScrollIndicator={false}>
                            {influencer.instagramScreenshots.map((screenshot, index) => (
                              <TouchableOpacity
                                key={index}
                                style={styles.screenshotThumbnail}
                                onPress={() => handleViewScreenshotsLocal(influencer.instagramScreenshots, 'Instagram')}
                              >
                                <Image
                                  source={{ uri: screenshot.uri }}
                                  style={styles.screenshotImage}
                                />
                              </TouchableOpacity>
                            ))}
                          </ScrollView>
                        </View>
                      )}

                      {influencer.tiktokScreenshots && influencer.tiktokScreenshots.length > 0 && (
                        <View style={styles.screenshotsPlatform}>
                          <Text style={styles.screenshotsPlatformTitle}>
                            üéµ TikTok ({influencer.tiktokScreenshots.length} capturas)
                          </Text>
                          <ScrollView horizontal style={styles.screenshotsScroll} showsHorizontalScrollIndicator={false}>
                            {influencer.tiktokScreenshots.map((screenshot, index) => (
                              <TouchableOpacity
                                key={index}
                                style={styles.screenshotThumbnail}
                                onPress={() => handleViewScreenshotsLocal(influencer.tiktokScreenshots, 'TikTok')}
                              >
                                <Image
                                  source={{ uri: screenshot.uri }}
                                  style={styles.screenshotImage}
                                />
                              </TouchableOpacity>
                            ))}
                          </ScrollView>
                        </View>
                      )}
                    </View>
                  )}

                  <View style={styles.removeInfluencerSection}>
                    <TouchableOpacity
                      style={styles.removeInfluencerButton}
                      onPress={() => handleRemoveInfluencer(influencer.email, influencer.name)}
                    >
                      <Ionicons name="trash" size={16} color="#FFFFFF" />
                      <Text style={styles.removeInfluencerButtonText}>Eliminar Acceso</Text>
                    </TouchableOpacity>
                  </View>
                </View>
              ))
            )}
          </ScrollView>

          <ScreenshotsViewerModal
            visible={showScreenshotsViewer}
            onClose={() => setShowScreenshotsViewer(false)}
            screenshots={selectedScreenshots}
            platform={selectedPlatform}
          />
        </SafeAreaView>
      </Modal>
    );
  };

  
  
  


  

    

    
    };

  // Return corregido:     return (
      <Modal visible={showApprovedInfluencers} animationType="slide">
        <SafeAreaView style={styles.container}>
          <View style={styles.modalHeader}>
            <TouchableOpacity
              style={styles.modalBackButton}
              onPress={() => setShowApprovedInfluencers(false)}
            >
              <Ionicons name="arrow-back" size={20} color="#C9A961" />
              <Text style={styles.modalBackButtonText}>Volver</Text>
            </TouchableOpacity>
            <Text style={styles.modalTitle}>Influencers Aprobados</Text>
            <TouchableOpacity
              style={styles.modalActionButton}
              onPress={() => cleanApprovedInfluencers()}
            >
              <Ionicons name="refresh" size={20} color="#C9A961" />
              <Text style={styles.modalActionButtonText}>Actualizar</Text>
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.modalContent}>
            {approvedInfluencersData.length === 0 ? (
              <View style={styles.emptyState}>
                <Ionicons name="checkmark-circle-outline" size={48} color="#666666" />
                <Text style={styles.emptyStateTitle}>No hay influencers aprobados</Text>
                <Text style={styles.emptyStateText}>
                  Los influencers aprobados aparecer√°n aqu√≠ con acceso completo a la aplicaci√≥n.
                </Text>
              </View>
            ) : (
              approvedInfluencersData.map((influencer) => (
                <View key={influencer.id} style={styles.approvedInfluencerCard}>
                  <View style={styles.approvedInfluencerHeader}>
                    <View style={styles.approvedInfluencerInfo}>
                      <Text style={styles.approvedInfluencerName}>{influencer.name}</Text>
                      <Text style={styles.approvedInfluencerEmail}>{influencer.email}</Text>
                      <Text style={styles.approvedInfluencerDate}>
                        Aprobado: {influencer.approvedDate}
                      </Text>
                    </View>
                    <View style={styles.approvedInfluencerBadge}>
                      <Text style={styles.approvedInfluencerBadgeText}>APROBADO</Text>
                    </View>
                  </View>

                  <View style={styles.approvedInfluencerDetails}>
                    <View style={styles.approvedInfluencerRow}>
                      <Ionicons name="location-outline" size={16} color="#C9A961" />
                      <Text style={styles.approvedInfluencerDetailText}>{influencer.city}</Text>
                    </View>
                    <View style={styles.approvedInfluencerRow}>
                      <Ionicons name="logo-instagram" size={16} color="#C9A961" />
                      <Text style={styles.approvedInfluencerDetailText}>{influencer.instagram}</Text>
                    </View>
                    <View style={styles.approvedInfluencerRow}>
                      <Ionicons name="logo-tiktok" size={16} color="#C9A961" />
                      <Text style={styles.approvedInfluencerDetailText}>{influencer.tiktok}</Text>
                    </View>
                    <View style={styles.approvedInfluencerRow}>
                      <Ionicons name="people-outline" size={16} color="#C9A961" />
                      <Text style={styles.approvedInfluencerDetailText}>
                        {formatFollowersCount(getUpdatedFollowers(influencer.email))} seguidores
                      </Text>
                    </View>
                  </View>

                  <View style={styles.accessStatusSection}>
                    <View style={styles.accessStatusRow}>
                      <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
                      <Text style={styles.accessStatusText}>Acceso activo a la aplicaci√≥n</Text>
                    </View>
                    <View style={styles.accessStatusRow}>
                      <Ionicons name="key" size={16} color="#4CAF50" />
                      <Text style={styles.accessStatusText}>Puede iniciar sesi√≥n</Text>
                    </View>
                  </View>

                  {(influencer.instagramScreenshots?.length > 0 || influencer.tiktokScreenshots?.length > 0) && (
                    <View style={styles.screenshotsSection}>
                      <Text style={styles.screenshotsSectionTitle}>Capturas de Registro</Text>
                      
                      {influencer.instagramScreenshots && influencer.instagramScreenshots.length > 0 && (
                        <View style={styles.screenshotsPlatform}>
                          <Text style={styles.screenshotsPlatformTitle}>
                            üì∏ Instagram ({influencer.instagramScreenshots.length} capturas)
                          </Text>
                          <ScrollView horizontal style={styles.screenshotsScroll} showsHorizontalScrollIndicator={false}>
                            {influencer.instagramScreenshots.map((screenshot, index) => (
                              <TouchableOpacity
                                key={index}
                                style={styles.screenshotThumbnail}
                                onPress={() => handleViewScreenshotsLocal(influencer.instagramScreenshots, 'Instagram')}
                              >
                                <Image
                                  source={{ uri: screenshot.uri }}
                                  style={styles.screenshotImage}
                                />
                              </TouchableOpacity>
                            ))}
                          </ScrollView>
                        </View>
                      )}

                      {influencer.tiktokScreenshots && influencer.tiktokScreenshots.length > 0 && (
                        <View style={styles.screenshotsPlatform}>
                          <Text style={styles.screenshotsPlatformTitle}>
                            üéµ TikTok ({influencer.tiktokScreenshots.length} capturas)
                          </Text>
                          <ScrollView horizontal style={styles.screenshotsScroll} showsHorizontalScrollIndicator={false}>
                            {influencer.tiktokScreenshots.map((screenshot, index) => (
                              <TouchableOpacity
                                key={index}
                                style={styles.screenshotThumbnail}
                                onPress={() => handleViewScreenshotsLocal(influencer.tiktokScreenshots, 'TikTok')}
                              >
                                <Image
                                  source={{ uri: screenshot.uri }}
                                  style={styles.screenshotImage}
                                />
                              </TouchableOpacity>
                            ))}
                          </ScrollView>
                        </View>
                      )}
                    </View>
                  )}

                  <View style={styles.removeInfluencerSection}>
                    <TouchableOpacity
                      style={styles.removeInfluencerButton}
                      onPress={() => handleRemoveInfluencer(influencer.email, influencer.name)}
                    >
                      <Ionicons name="trash" size={16} color="#FFFFFF" />
                      <Text style={styles.removeInfluencerButtonText}>Eliminar Acceso</Text>
                    </TouchableOpacity>
                  </View>
                </View>
              ))
            )}
          </ScrollView>

          <ScreenshotsViewerModal
            visible={showScreenshotsViewer}
            onClose={() => setShowScreenshotsViewer(false)}
            screenshots={selectedScreenshots}
            platform={selectedPlatform}
          />
        </SafeAreaView>
      </Modal>
    );
  };


  
  // ‚úÖ IMPLEMENTACI√ìN √öNICA Y LIMPIA - GESTI√ìN DE INFLUENCERS
  
  // Funciones globales para gesti√≥n de influencers
  const getUpdatedFollowers = (influencerEmail) => {
    const data = {
      'nayades@gmail.com': '800000',
      'ana@gmail.com': '25000',
      'influencer@zyro.com': '50000'
    };
    return data[influencerEmail] || '0';
  };

  // Modal para ver capturas de pantalla
  const ScreenshotsViewerModal = ({ visible, onClose, screenshots, platform }) => {
    const [currentIndex, setCurrentIndex] = useState(0);

    if (!visible || !screenshots || screenshots.length === 0) return null;

  // Return corregido:     return (
      <Modal visible={visible} animationType="fade" transparent>
        <View style={styles.imageViewerOverlay}>
          <TouchableOpacity style={styles.imageViewerClose} onPress={onClose}>
            <Ionicons name="close" size={24} color="#FFFFFF" />
          </TouchableOpacity>
          <View style={styles.imageViewerHeader}>
            <Text style={styles.imageViewerTitle}>
              {platform} - Captura {currentIndex + 1} de {screenshots.length}
            </Text>
          </View>
          <ScrollView
            horizontal
            pagingEnabled
            showsHorizontalScrollIndicator={false}
            onMomentumScrollEnd={(event) => {
              const index = Math.round(event.nativeEvent.contentOffset.x / width);
              setCurrentIndex(index);
            }}
            style={styles.imageViewerScroll}
          >
            {screenshots.map((screenshot, index) => (
              <View key={index} style={styles.imageViewerSlide}>
                <Image source={{ uri: screenshot.uri }} style={styles.imageViewerImage} resizeMode="contain" />
              </View>
            ))}
          </ScrollView>
          <View style={styles.imageViewerIndicators}>
            {screenshots.map((_, index) => (
              <View key={index} style={[styles.imageViewerDot, index === currentIndex && styles.imageViewerDotActive]} />
            ))}
          </View>
        </View>
      </Modal>
    );
  };

  // Modal para solicitudes de registro
  const InfluencerRegistrationRequestsModal = () => {
    const [selectedScreenshots, setSelectedScreenshots] = useState(null);
    const [selectedPlatform, setSelectedPlatform] = useState('');
    const [showScreenshotsViewer, setShowScreenshotsViewer] = useState(false);

    const handleViewScreenshots = (screenshots, platform) => {
      setSelectedScreenshots(screenshots);
      setSelectedPlatform(platform);
      setShowScreenshotsViewer(true);
    };

  // Return corregido:     return (
      <Modal visible={showInfluencerRegistrationRequests} animationType="slide">
        <SafeAreaView style={styles.container}>
          <View style={styles.modalHeader}>
            <TouchableOpacity style={styles.modalBackButton} onPress={() => setShowInfluencerRegistrationRequests(false)}>
              <Ionicons name="arrow-back" size={20} color="#C9A961" />
              <Text style={styles.modalBackButtonText}>Volver</Text>
            </TouchableOpacity>
            <Text style={styles.modalTitle}>Solicitudes de Registro</Text>
            <TouchableOpacity style={styles.modalActionButton} onPress={() => setShowApprovedInfluencers(true)}>
              <Ionicons name="checkmark-circle" size={20} color="#C9A961" />
              <Text style={styles.modalActionButtonText}>Ver Aprobados</Text>
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.modalContent}>
            {pendingInfluencers.length === 0 ? (
              <View style={styles.emptyState}>
                <Ionicons name="person-add-outline" size={48} color="#666666" />
                <Text style={styles.emptyStateTitle}>No hay solicitudes pendientes</Text>
                <Text style={styles.emptyStateText}>Las nuevas solicitudes aparecer√°n aqu√≠.</Text>
              </View>
            ) : (
              pendingInfluencers.map((influencer) => (
                <View key={influencer.id} style={styles.influencerRequestCard}>
                  <View style={styles.influencerRequestHeader}>
                    <View style={styles.influencerRequestInfo}>
                      <Text style={styles.influencerRequestName}>{influencer.name}</Text>
                      <Text style={styles.influencerRequestEmail}>{influencer.email}</Text>
                      <Text style={styles.influencerRequestDate}>
                        Registrado: {influencer.registrationDate} a las {influencer.registrationTime}
                      </Text>
                    </View>
                    <View style={styles.influencerRequestBadge}>
                      <Text style={styles.influencerRequestBadgeText}>PENDIENTE</Text>
                    </View>
                  </View>

                  <View style={styles.influencerRequestDetails}>
                    <View style={styles.influencerRequestRow}>
                      <Ionicons name="location-outline" size={16} color="#C9A961" />
                      <Text style={styles.influencerRequestDetailText}>{influencer.city}</Text>
                    </View>
                    <View style={styles.influencerRequestRow}>
                      <Ionicons name="people-outline" size={16} color="#C9A961" />
                      <Text style={styles.influencerRequestDetailText}>
                        {formatFollowersCount(influencer.followers)} seguidores
                      </Text>
                    </View>
                  </View>

                  <View style={styles.screenshotsSection}>
                    <Text style={styles.screenshotsSectionTitle}>Capturas de Pantalla</Text>
                    
                    <View style={styles.screenshotsPlatform}>
                      <Text style={styles.screenshotsPlatformTitle}>
                        üì∏ Instagram ({influencer.instagramScreenshots?.length || 0} capturas)
                      </Text>
                      {influencer.instagramScreenshots && influencer.instagramScreenshots.length > 0 ? (
                        <ScrollView horizontal style={styles.screenshotsScroll} showsHorizontalScrollIndicator={false}>
                          {influencer.instagramScreenshots.map((screenshot, index) => (
                            <TouchableOpacity
                              key={index}
                              style={styles.screenshotThumbnail}
                              onPress={() => handleViewScreenshots(influencer.instagramScreenshots, 'Instagram')}
                            >
                              <Image source={{ uri: screenshot.uri }} style={styles.screenshotImage} />
                            </TouchableOpacity>
                          ))}
                        </ScrollView>
                      ) : (
                        <Text style={styles.noScreenshotsText}>No hay capturas de Instagram</Text>
                      )}
                    </View>

                    <View style={styles.screenshotsPlatform}>
                      <Text style={styles.screenshotsPlatformTitle}>
                        üéµ TikTok ({influencer.tiktokScreenshots?.length || 0} capturas)
                      </Text>
                      {influencer.tiktokScreenshots && influencer.tiktokScreenshots.length > 0 ? (
                        <ScrollView horizontal style={styles.screenshotsScroll} showsHorizontalScrollIndicator={false}>
                          {influencer.tiktokScreenshots.map((screenshot, index) => (
                            <TouchableOpacity
                              key={index}
                              style={styles.screenshotThumbnail}
                              onPress={() => handleViewScreenshots(influencer.tiktokScreenshots, 'TikTok')}
                            >
                              <Image source={{ uri: screenshot.uri }} style={styles.screenshotImage} />
                            </TouchableOpacity>
                          ))}
                        </ScrollView>
                      ) : (
                        <Text style={styles.noScreenshotsText}>No hay capturas de TikTok</Text>
                      )}
                    </View>
                  </View>

                  <View style={styles.influencerRequestActions}>
                    <TouchableOpacity
                      style={styles.rejectButton}
                      onPress={() => handleRejectInfluencer(influencer.id, influencer.name)}
                    >
                      <Ionicons name="close-circle" size={16} color="#FFFFFF" />
                      <Text style={styles.rejectButtonText}>Rechazar</Text>
                    </TouchableOpacity>
                    <TouchableOpacity
                      style={styles.approveButton}
                      onPress={() => handleApproveInfluencer(influencer.id)}
                    >
                      <Ionicons name="checkmark-circle" size={16} color="#FFFFFF" />
                      <Text style={styles.approveButtonText}>Aprobar</Text>
                    </TouchableOpacity>
                  </View>
                </View>
              ))
            )}
          </ScrollView>

          <ScreenshotsViewerModal
            visible={showScreenshotsViewer}
            onClose={() => setShowScreenshotsViewer(false)}
            screenshots={selectedScreenshots}
            platform={selectedPlatform}
          />
        </SafeAreaView>
      </Modal>
    );
  };

  // Modal para influencers aprobados
  const ApprovedInfluencersModal = () => {
    const [selectedScreenshots, setSelectedScreenshots] = useState(null);
    const [selectedPlatform, setSelectedPlatform] = useState('');
    const [showScreenshotsViewer, setShowScreenshotsViewer] = useState(false);

    const handleRemoveInfluencer = (influencerEmail, influencerName) => {
      Alert.alert(
        'Eliminar Influencer',
        `¬øEliminar a ${influencerName}?`,
        [
          { text: 'Cancelar', style: 'cancel' },
          {
            text: 'Eliminar',
            style: 'destructive',
            onPress: async () => {
              try {
                const success = await removeApprovedInfluencer(influencerEmail);
                if (success) {
                  Alert.alert('Influencer Eliminado', 'El influencer ha sido eliminado.', [{ text: 'OK' }]);
                }
              } catch (error) {
                console.error('Error eliminando influencer:', error);
              }
            }
          }
        ]
      );
    };

  // Return corregido:     return (
      <Modal visible={showApprovedInfluencers} animationType="slide">
        <SafeAreaView style={styles.container}>
          <View style={styles.modalHeader}>
            <TouchableOpacity style={styles.modalBackButton} onPress={() => setShowApprovedInfluencers(false)}>
              <Ionicons name="arrow-back" size={20} color="#C9A961" />
              <Text style={styles.modalBackButtonText}>Volver</Text>
            </TouchableOpacity>
            <Text style={styles.modalTitle}>Influencers Aprobados</Text>
            <TouchableOpacity style={styles.modalActionButton} onPress={() => cleanApprovedInfluencers()}>
              <Ionicons name="refresh" size={20} color="#C9A961" />
              <Text style={styles.modalActionButtonText}>Actualizar</Text>
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.modalContent}>
            {approvedInfluencersData.length === 0 ? (
              <View style={styles.emptyState}>
                <Ionicons name="checkmark-circle-outline" size={48} color="#666666" />
                <Text style={styles.emptyStateTitle}>No hay influencers aprobados</Text>
                <Text style={styles.emptyStateText}>Los influencers aprobados aparecer√°n aqu√≠.</Text>
              </View>
            ) : (
              approvedInfluencersData.map((influencer) => (
                <View key={influencer.id} style={styles.approvedInfluencerCard}>
                  <View style={styles.approvedInfluencerHeader}>
                    <View style={styles.approvedInfluencerInfo}>
                      <Text style={styles.approvedInfluencerName}>{influencer.name}</Text>
                      <Text style={styles.approvedInfluencerEmail}>{influencer.email}</Text>
                      <Text style={styles.approvedInfluencerDate}>Aprobado: {influencer.approvedDate}</Text>
                    </View>
                    <View style={styles.approvedInfluencerBadge}>
                      <Text style={styles.approvedInfluencerBadgeText}>APROBADO</Text>
                    </View>
                  </View>

                  <View style={styles.approvedInfluencerDetails}>
                    <View style={styles.approvedInfluencerRow}>
                      <Ionicons name="people-outline" size={16} color="#C9A961" />
                      <Text style={styles.approvedInfluencerDetailText}>
                        {formatFollowersCount(getUpdatedFollowers(influencer.email))} seguidores
                      </Text>
                    </View>
                  </View>

                  <View style={styles.removeInfluencerSection}>
                    <TouchableOpacity
                      style={styles.removeInfluencerButton}
                      onPress={() => handleRemoveInfluencer(influencer.email, influencer.name)}
                    >
                      <Ionicons name="trash" size={16} color="#FFFFFF" />
                      <Text style={styles.removeInfluencerButtonText}>Eliminar Acceso</Text>
                    </TouchableOpacity>
                  </View>
                </View>
              ))
            )}
          </ScrollView>

          <ScreenshotsViewerModal
            visible={showScreenshotsViewer}
            onClose={() => setShowScreenshotsViewer(false)}
            screenshots={selectedScreenshots}
            platform={selectedPlatform}
          />
        </SafeAreaView>
      </Modal>
    );
  };


  // Main render logic for ZyroApp function
  // Return corregido:   return (
    <ErrorBoundary>
      {(() => {
        switch (currentScreen) {
          case 'welcome':
  // Return corregido:             return <WelcomeScreen />;
          case 'influencerRegister':
  // Return corregido:             return <InfluencerRegisterScreen />;
          case 'companyRegister':
  // Return corregido:             return <CompanyRegisterScreen />;
          case 'payment':
  // Return corregido:             return <PaymentScreen />;
          case 'passwordSetup':
  // Return corregido:             return <PasswordSetupScreen />;
          case 'companyMain':
  // Return corregido:             return <CompanyMainScreen />;
          case 'login':
  // Return corregido:             return <LoginScreen />;
          case 'main':
  // Return corregido:             return <MainScreen />;
          default:
  // Return corregido:             return <WelcomeScreen />;
        }
      })()}
    </ErrorBoundary>
  );

} // This closes the main ZyroApp function

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000000',
  },
  logoContainer: {
    marginBottom: 60,
  },
  welcomeContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 40,
    backgroundColor: '#000000',
  },
  welcomeLogo: {
    width: 280,
    height: 280,
  },
  welcomeTitle: {
    fontSize: 28,
    fontWeight: '700',
    color: '#C9A961',
    marginBottom: 15,
    letterSpacing: 1,
    textAlign: 'center',
  },
  welcomeSubtitle: {
    fontSize: 16,
    color: '#CCCCCC',
    marginBottom: 50,
    lineHeight: 24,
    textAlign: 'center',
  },
  buttonContainer: {
    width: '100%',
    maxWidth: 300,
  },
  premiumButton: {
    backgroundColor: '#C9A961',
    paddingVertical: 16,
    paddingHorizontal: 30,
    borderRadius: 12,
    alignItems: 'center',
    marginBottom: 16,
    shadowColor: '#C9A961',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 8,
  },
  buttonText: {
    color: '#000000',
    fontSize: 16,
    fontWeight: '700',
  },
  secondaryButton: {
    backgroundColor: 'transparent',
    borderWidth: 2,
    borderColor: '#C9A961',
    paddingVertical: 16,
    paddingHorizontal: 30,
    borderRadius: 12,
    alignItems: 'center',
    marginBottom: 16,
  },
  secondaryButtonText: {
    color: '#C9A961',
    fontSize: 15,
    fontWeight: '600',
    textAlign: 'center',
  },
  backButton: {
    paddingVertical: 15,
    alignItems: 'center',
  },
  backButtonText: {
    color: '#666666',
    fontSize: 14,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 16,
    backgroundColor: '#000000',
  },
  headerLogo: {
    width: 95,
    height: 95,
  },
  headerCloseButton: {
    padding: 8,
  },
  loginContainer: {
    flex: 1,
    padding: 20,
  },
  loginTitle: {
    fontSize: 24,
    fontWeight: '600',
    color: '#C9A961',
    textAlign: 'center',
    marginBottom: 10,
  },
  loginSubtitle: {
    fontSize: 16,
    color: '#FFFFFF',
    textAlign: 'center',
    marginBottom: 40,
  },
  formContainer: {
    gap: 20,
  },
  formGroup: {
    marginBottom: 20,
  },
  formLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 8,
  },
  formInput: {
    backgroundColor: '#111111',
    borderWidth: 2,
    borderColor: '#C9A961',
    borderRadius: 10,
    paddingVertical: 15,
    paddingHorizontal: 15,
    color: '#FFFFFF',
    fontSize: 16,
  },
  personalDataForm: {
    flex: 1,
    padding: 20,
  },
  personalDataActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 30,
    marginBottom: 20,
    gap: 15,
  },
  cancelButton: {
    flex: 1,
    backgroundColor: '#333333',
    borderRadius: 8,
    paddingVertical: 15,
    alignItems: 'center',
  },
  cancelButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  loginButton: {
    backgroundColor: '#C9A961',
    paddingVertical: 16,
    paddingHorizontal: 30,
    borderRadius: 12,
    alignItems: 'center',
    marginBottom: 20,
  },
  mainHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 16,
    backgroundColor: '#000000',
  },
  headerLeft: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  mainHeaderLogo: {
    width: 95,
    height: 95,
  },
  citySelector: {
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#C9A961',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 8,
    marginLeft: 15,
  },
  citySelectorText: {
    color: '#C9A961',
    fontWeight: '600',
    fontSize: 14,
  },
  headerRight: {
    flexDirection: 'row',
    gap: 8,
  },
  headerButton: {
    padding: 8,
  },
  tabContent: {
    flex: 1,
  },
  bottomNav: {
    height: 70,
    backgroundColor: '#111111',
    flexDirection: 'row',
    justifyContent: 'space-around',
    alignItems: 'center',
    paddingVertical: 8,
  },
  navItem: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: 8,
    borderRadius: 16,
  },
  activeNavItem: {
    backgroundColor: 'rgba(201, 169, 97, 0.1)',
  },
  navLabel: {
    fontSize: 12,
    fontWeight: '500',
    color: '#666666',
    marginTop: 4,
  },
  activeNavLabel: {
    color: '#C9A961',
  },
  homeTab: {
    flex: 1,
    backgroundColor: '#000000',
  },
  categoryFilter: {
    padding: 16,
    backgroundColor: '#000000',
  },
  categoryDropdown: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#C9A961',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 12,
  },
  categoryDropdownText: {
    color: '#C9A961',
    fontWeight: '600',
    fontSize: 16,
  },
  collaborationsList: {
    padding: 16,
  },
  collaborationCard: {
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#C9A961',
    borderRadius: 12,
    marginBottom: 24,
    overflow: 'hidden',
    shadowColor: '#C9A961',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 8,
    elevation: 8,
  },
  cardImage: {
    height: 180,
    backgroundColor: '#C9A961',
    position: 'relative',
    justifyContent: 'flex-end',
    borderTopLeftRadius: 12,
    borderTopRightRadius: 12,
    overflow: 'hidden',
  },
  cardImageBackground: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    width: '100%',
    height: '100%',
  },
  cardImagePlaceholder: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: '#C9A961',
    justifyContent: 'center',
    alignItems: 'center',
  },
  categoryBadge: {
    position: 'absolute',
    top: 8,
    right: 8,
    backgroundColor: '#000000',
    borderWidth: 1,
    borderColor: '#C9A961',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 4,
  },
  categoryBadgeText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#C9A961',
  },
  cardImageOverlay: {
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    padding: 16,
  },
  cardBusinessName: {
    fontSize: 20,
    fontWeight: '700',
    color: '#FFFFFF',
    marginBottom: 4,
  },
  cardImageText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#C9A961',
  },
  cardContent: {
    padding: 12,
  },


  cardInfo: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  infoItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  infoText: {
    fontSize: 14,
    color: '#FFFFFF',
  },
  cardFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#666666',
  },
  locationInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  locationText: {
    fontSize: 14,
    color: '#999999',
  },
  viewDetailsBtn: {
    backgroundColor: '#C9A961',
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 6,
    gap: 4,
  },
  viewDetailsBtnText: {
    color: '#000000',
    fontSize: 14,
    fontWeight: '600',
  },
  mapTab: {
    flex: 1,
  },
  historyTab: {
    flex: 1,
    backgroundColor: '#000000',
  },
  historyHeader: {
    padding: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 16,
  },
  historyTabs: {
    flexDirection: 'row',
    marginHorizontal: 16,
    marginBottom: 24,
    backgroundColor: '#0A0A0A',
    borderRadius: 12,
    padding: 4,
    shadowColor: '#C9A961',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  historyTabButton: {
    flex: 1,
    backgroundColor: 'transparent',
    paddingVertical: 14,
    paddingHorizontal: 8,
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 8,
    marginHorizontal: 2,
    minHeight: 48,
  },
  activeHistoryTab: {
    backgroundColor: '#C9A961',
    shadowColor: '#C9A961',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 6,
  },
  historyTabText: {
    color: '#C9A961',
    fontSize: 12,
    fontWeight: '700',
    textAlign: 'center',
    letterSpacing: 0.5,
    lineHeight: 16,
  },
  emptyState: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 60,
  },
  emptyStateText: {
    fontSize: 18,
    color: '#FFFFFF',
    marginTop: 20,
    marginBottom: 10,
  },
  emptyStateSubtext: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
  },
  profileTab: {
    flex: 1,
    backgroundColor: '#000000',
  },
  profileHeader: {
    backgroundColor: '#C9A961',
    paddingVertical: 32,
    paddingHorizontal: 16,
    alignItems: 'center',
  },
  profileAvatar: {
    width: 80,
    height: 80,
    backgroundColor: '#000000',
    borderRadius: 40,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 16,
  },
  profileAvatarImage: {
    width: 80,
    height: 80,
    borderRadius: 40,
  },
  profileName: {
    fontSize: 24,
    fontWeight: '700',
    color: '#000000',
    marginBottom: 8,
  },
  profileRole: {
    fontSize: 16,
    color: 'rgba(0, 0, 0, 0.7)',
  },
  profileStats: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    padding: 20,
  },
  statCard: {
    width: '48%',
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#C9A961',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    marginBottom: 12,
    minHeight: 80,
    justifyContent: 'center',
  },
  statValue: {
    fontSize: 24,
    fontWeight: '700',
    color: '#C9A961',
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: '#999999',
    textAlign: 'center',
  },
  profileActions: {
    padding: 20,
  },
  companyHeader: {
    paddingTop: 20,
    paddingBottom: 25,
    paddingHorizontal: 16,
    alignItems: 'center',
  },
  companyAvatar: {
    width: 60,
    height: 60,
    backgroundColor: '#C9A961',
    borderRadius: 30,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 12,
  },
  companyAvatarImage: {
    width: 60,
    height: 60,
    borderRadius: 30,
  },
  companyName: {
    fontSize: 20,
    fontWeight: '700',
    color: '#C9A961',
    marginBottom: 4,
  },
  companyPlan: {
    fontSize: 14,
    color: '#FFFFFF',
    marginBottom: 4,
    fontWeight: '500',
  },
  companyDetails: {
    fontSize: 12,
    color: '#CCCCCC',
    marginBottom: 8,
  },
  statusBadge: {
    backgroundColor: '#4CAF50',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 6,
  },
  statusBadgeText: {
    fontSize: 10,
    fontWeight: '600',
    color: '#000000',
  },
  activitySummary: {
    padding: 20,
  },
  statsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    gap: 12,
  },
  myCampaigns: {
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  campaignCard: {
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#C9A961',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    position: 'relative',
    paddingBottom: 50, // Espacio extra para el bot√≥n
  },
  campaignHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  campaignTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#FFFFFF',
    marginBottom: 4,
  },
  campaignBusiness: {
    fontSize: 14,
    color: '#C9A961',
    fontWeight: '500',
  },
  campaignDetails: {
    fontSize: 12,
    color: '#CCCCCC',
    marginBottom: 12,
    lineHeight: 16,
  },
  campaignInfo: {
    flexDirection: 'row',
    gap: 20,
    marginBottom: 12,
  },
  campaignInfoItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
  },
  campaignInfoText: {
    fontSize: 12,
    color: '#CCCCCC',
    fontWeight: '500',
  },
  campaignDetailsBtn: {
    position: 'absolute',
    bottom: 12,
    right: 12,
    backgroundColor: '#C9A961',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
  },
  campaignDetailsBtnText: {
    color: '#000000',
    fontSize: 12,
    fontWeight: '600',
  },
  campaignActions: {
    flexDirection: 'row',
    gap: 8,
  },
  primaryBtn: {
    backgroundColor: '#C9A961',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 6,
  },
  primaryBtnText: {
    color: '#000000',
    fontSize: 12,
    fontWeight: '600',
  },
  recentRequests: {
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  requestCard: {
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#333333',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
  },
  requestHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 8,
  },
  requestInfluencer: {
    fontSize: 14,
    fontWeight: '600',
    color: '#C9A961',
  },
  requestDetails: {
    fontSize: 12,
    color: '#999999',
    marginBottom: 8,
  },
  requestDate: {
    fontSize: 12,
    color: '#999999',
  },
  quickActions: {
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  adminHeader: {
    paddingVertical: 20,
    paddingHorizontal: 16,
    alignItems: 'center',
    borderBottomWidth: 1,
    borderBottomColor: '#333333',
  },
  adminAvatar: {
    width: 60,
    height: 60,
    backgroundColor: '#C9A961',
    borderRadius: 30,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 12,
  },
  adminName: {
    fontSize: 20,
    fontWeight: '700',
    color: '#C9A961',
    marginBottom: 4,
  },
  adminRole: {
    fontSize: 14,
    color: '#999999',
  },
  systemOverview: {
    padding: 20,
  },
  adminStatsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 16,
  },
  adminStatCard: {
    width: '47%',
    alignItems: 'center',
  },
  adminStatValue: {
    fontSize: 32,
    fontWeight: '700',
    color: '#C9A961',
  },
  adminStatLabel: {
    fontSize: 12,
    color: '#999999',
    textAlign: 'center',
  },
  pendingApprovals: {
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  approvalCard: {
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#FF9800',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
  },
  approvalUserInfo: {
    flex: 1,
  },
  approvalEmail: {
    fontSize: 12,
    color: '#999999',
    marginTop: 2,
  },
  collaborationRequestInfo: {
    backgroundColor: '#1a1a1a',
    borderRadius: 8,
    padding: 12,
    marginVertical: 10,
  },
  collaborationRequestTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 4,
  },
  collaborationRequestBusiness: {
    fontSize: 14,
    color: '#FFFFFF',
    marginBottom: 6,
  },
  collaborationRequestDate: {
    fontSize: 12,
    color: '#CCCCCC',
  },
  requestMessage: {
    backgroundColor: '#222222',
    borderRadius: 8,
    padding: 12,
    marginVertical: 8,
  },
  requestMessageLabel: {
    fontSize: 12,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 6,
  },
  requestMessageText: {
    fontSize: 13,
    color: '#CCCCCC',
    lineHeight: 18,
  },
  emptyApprovals: {
    alignItems: 'center',
    paddingVertical: 40,
    paddingHorizontal: 20,
  },
  emptyApprovalsTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
    marginTop: 16,
    marginBottom: 8,
  },
  emptyApprovalsSubtitle: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    lineHeight: 20,
  },
  approvalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 8,
  },
  approvalUser: {
    fontSize: 14,
    fontWeight: '600',
    color: '#C9A961',
  },
  approvalType: {
    fontSize: 12,
    color: '#999999',
  },
  approvalTime: {
    fontSize: 11,
    color: '#999999',
    marginBottom: 12,
  },
  approvalActions: {
    flexDirection: 'row',
    gap: 8,
  },
  approveBtn: {
    backgroundColor: '#C9A961',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 6,
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
  },
  approveBtnText: {
    color: '#000000',
    fontSize: 12,
    fontWeight: '600',
  },
  rejectBtn: {
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#C9A961',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 6,
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
  },
  rejectBtnText: {
    color: '#C9A961',
    fontSize: 12,
    fontWeight: '600',
  },
  adminActions: {
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  menuItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#333333',
    borderRadius: 8,
    padding: 16,
    marginBottom: 8,
  },
  menuItemLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  menuItemText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '500',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.85)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#111111',
    width: width * 0.9,
    maxHeight: height * 0.8,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#C9A961',
  },
  modalContainer: {
    flex: 1,
    backgroundColor: '#000000',
  },
  modalFullContent: {
    flex: 1,
    backgroundColor: '#000000',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#333333',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#C9A961',
  },
  modalBackButton: {
    padding: 4,
  },
  // Estilos para UserManagementModal
  tabsContainer: {
    flexDirection: 'row',
    backgroundColor: '#111111',
    marginHorizontal: 16,
    marginVertical: 16,
    borderRadius: 8,
    padding: 4,
  },
  tabButton: {
    flex: 1,
    paddingVertical: 12,
    paddingHorizontal: 8,
    borderRadius: 6,
    alignItems: 'center',
  },
  tabButtonActive: {
    backgroundColor: '#C9A961',
  },
  tabButtonText: {
    fontSize: 12,
    fontWeight: '500',
    color: '#CCCCCC',
    textAlign: 'center',
  },
  tabButtonTextActive: {
    color: '#000000',
    fontWeight: '600',
  },
  tabContent: {
    flex: 1,
    padding: 16,
  },
  sectionContainer: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 16,
  },
  itemCard: {
    backgroundColor: '#111111',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#333333',
  },
  itemHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  itemInfo: {
    flex: 1,
    marginRight: 12,
  },
  itemName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 4,
  },
  itemEmail: {
    fontSize: 14,
    color: '#C9A961',
    marginBottom: 4,
  },
  itemDetails: {
    fontSize: 12,
    color: '#CCCCCC',
  },
  pendingBadge: {
    backgroundColor: 'rgba(255, 152, 0, 0.2)',
    borderWidth: 1,
    borderColor: '#FF9800',
    borderRadius: 12,
    paddingHorizontal: 8,
    paddingVertical: 4,
  },
  pendingBadgeText: {
    fontSize: 10,
    fontWeight: '600',
    color: '#FF9800',
  },
  activeBadge: {
    backgroundColor: 'rgba(76, 175, 80, 0.2)',
    borderWidth: 1,
    borderColor: '#4CAF50',
    borderRadius: 12,
    paddingHorizontal: 8,
    paddingVertical: 4,
  },
  activeBadgeText: {
    fontSize: 10,
    fontWeight: '600',
    color: '#4CAF50',
  },
  itemDetailsContainer: {
    marginBottom: 12,
  },
  detailText: {
    fontSize: 13,
    color: '#CCCCCC',
    marginBottom: 4,
  },
  itemActions: {
    flexDirection: 'row',
    gap: 12,
    marginTop: 12,
  },
  approveButton: {
    flex: 1,
    backgroundColor: '#C9A961',
    borderRadius: 8,
    paddingVertical: 12,
    paddingHorizontal: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  approveButtonText: {
    color: '#000000',
    fontSize: 14,
    fontWeight: '600',
  },
  rejectButton: {
    flex: 1,
    backgroundColor: '#222222',
    borderWidth: 1,
    borderColor: '#C9A961',
    borderRadius: 8,
    paddingVertical: 12,
    paddingHorizontal: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  rejectButtonText: {
    color: '#C9A961',
    fontSize: 14,
    fontWeight: '600',
  },
  emptyStateContainer: {
    alignItems: 'center',
    paddingVertical: 60,
    paddingHorizontal: 40,
  },
  emptyStateTitle: {
    fontSize: 18,
    color: '#FFFFFF',
    fontWeight: '600',
    marginTop: 20,
    marginBottom: 10,
    textAlign: 'center',
  },
  emptyStateSubtitle: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    lineHeight: 20,
  },
  companyPlanDetails: {
    marginBottom: 12,
  },
  planDetailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  planDetailItem: {
    flex: 1,
    marginRight: 10,
  },
  planDetailLabel: {
    fontSize: 12,
    color: '#888888',
    marginBottom: 2,
  },
  planDetailValue: {
    fontSize: 14,
    color: '#FFFFFF',
    fontWeight: '500',
  },
  collaborationInfo: {
    backgroundColor: '#1a1a1a',
    borderRadius: 8,
    padding: 12,
    marginBottom: 12,
  },
  collaborationTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 4,
  },
  collaborationBusiness: {
    fontSize: 14,
    color: '#FFFFFF',
    marginBottom: 6,
  },
  collaborationDate: {
    fontSize: 12,
    color: '#CCCCCC',
  },
  messageContainer: {
    backgroundColor: '#222222',
    borderRadius: 8,
    padding: 12,
    marginBottom: 12,
  },
  messageLabel: {
    fontSize: 12,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 6,
  },
  messageText: {
    fontSize: 13,
    color: '#CCCCCC',
    lineHeight: 18,
  },
  requestDate: {
    fontSize: 11,
    color: '#888888',
    marginBottom: 12,
  },
  notificationsList: {
    padding: 20,
  },
  notificationItem: {
    paddingVertical: 15,
    paddingHorizontal: 4,
    borderBottomWidth: 1,
    borderBottomColor: '#333333',
    position: 'relative',
  },
  notificationHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 6,
  },
  notificationTitle: {
    color: '#C9A961',
    fontSize: 15,
    fontWeight: '600',
    flex: 1,
    marginRight: 10,
  },
  notificationText: {
    color: '#FFFFFF',
    fontSize: 14,
    lineHeight: 20,
  },
  notificationTime: {
    color: '#666666',
    fontSize: 11,
  },
  unreadIndicator: {
    position: 'absolute',
    top: 18,
    right: 8,
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#C9A961',
  },
  emptyNotifications: {
    alignItems: 'center',
    paddingVertical: 40,
    paddingHorizontal: 20,
  },
  emptyNotificationsTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
    marginTop: 16,
    marginBottom: 8,
  },
  emptyNotificationsSubtitle: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
  },
  settingsList: {
    padding: 20,
  },
  settingItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 15,
    gap: 15,
  },
  settingText: {
    color: '#FFFFFF',
    fontSize: 16,
  },
  // Estilos para formularios de registro
  registrationForm: {
    padding: 20,
  },
  progressContainer: {
    marginBottom: 30,
  },
  progressText: {
    color: '#C9A961',
    fontSize: 14,
    marginBottom: 10,
    textAlign: 'center',
  },
  progressBar: {
    height: 4,
    backgroundColor: '#333333',
    borderRadius: 2,
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#C9A961',
    borderRadius: 2,
  },
  stepTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#333333',
    borderRadius: 8,
    padding: 15,
    color: '#FFFFFF',
    fontSize: 16,
    marginBottom: 15,
  },
  textArea: {
    height: 100,
    textAlignVertical: 'top',
  },
  fieldLabel: {
    color: '#C9A961',
    fontSize: 16,
    fontWeight: '500',
    marginBottom: 10,
  },
  checkboxContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 10,
    marginBottom: 20,
  },
  checkbox: {
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#333333',
    borderRadius: 20,
    paddingVertical: 8,
    paddingHorizontal: 15,
  },
  checkboxSelected: {
    backgroundColor: '#C9A961',
    borderColor: '#C9A961',
  },
  checkboxText: {
    color: '#FFFFFF',
    fontSize: 14,
  },
  checkboxTextSelected: {
    color: '#000000',
    fontWeight: '500',
  },
  uploadButton: {
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#C9A961',
    borderRadius: 8,
    padding: 15,
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
    marginBottom: 15,
  },
  uploadButtonText: {
    color: '#C9A961',
    fontSize: 16,
  },
  agreementContainer: {
    marginTop: 20,
  },
  agreementCheckbox: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    gap: 12,
  },
  agreementCheckboxIcon: {
    width: 20,
    height: 20,
    borderWidth: 2,
    borderColor: '#C9A961',
    borderRadius: 4,
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 2,
  },
  agreementCheckboxSelected: {
    backgroundColor: '#C9A961',
  },
  agreementText: {
    color: '#CCCCCC',
    fontSize: 14,
    flex: 1,
    lineHeight: 20,
  },
  navigationButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 30,
    gap: 15,
  },
  backButton: {
    flex: 1,
    backgroundColor: '#333333',
    borderRadius: 8,
    paddingVertical: 15,
    alignItems: 'center',
  },
  backButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '500',
  },
  nextButton: {
    flex: 1,
    backgroundColor: '#C9A961',
    borderRadius: 8,
    paddingVertical: 15,
    alignItems: 'center',
  },
  nextButtonText: {
    color: '#000000',
    fontSize: 16,
    fontWeight: '600',
  },
  planCard: {
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#333333',
    borderRadius: 12,
    padding: 20,
    marginBottom: 15,
  },
  planCardSelected: {
    borderColor: '#C9A961',
    backgroundColor: '#1a1a1a',
  },
  planHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  planName: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: '600',
  },
  planPrice: {
    color: '#C9A961',
    fontSize: 16,
    fontWeight: '500',
  },
  planFeatures: {
    gap: 8,
  },
  planFeature: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  planFeatureText: {
    color: '#CCCCCC',
    fontSize: 14,
  },
  adminNote: {
    color: '#CCCCCC',
    fontSize: 14,
    textAlign: 'center',
    marginBottom: 20,
    fontStyle: 'italic',
  },
  // Estilos para historial mejorado
  historyItem: {
    backgroundColor: '#111111',
    borderRadius: 12,
    padding: 15,
    marginBottom: 15,
    borderWidth: 1,
    borderColor: '#333333',
  },
  historyItemHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  historyItemTitle: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: '700',
    flex: 1,
  },
  statusBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
    marginLeft: 10,
  },
  statusConfirmed: {
    backgroundColor: '#4CAF50',
  },
  statusPending: {
    backgroundColor: '#FF9800',
  },
  statusCompleted: {
    backgroundColor: '#2196F3',
  },
  statusCancelled: {
    backgroundColor: '#F44336',
  },
  statusText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '500',
  },
  historyItemBusiness: {
    color: '#C9A961',
    fontSize: 13,
    marginBottom: 5,
    fontWeight: '500',
  },
  historyItemCategory: {
    color: '#888888',
    fontSize: 12,
    marginBottom: 10,
    fontStyle: 'italic',
  },
  historyItemDetails: {
    flexDirection: 'row',
    gap: 15,
    marginBottom: 10,
  },
  historyDetailItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  historyDetailText: {
    color: '#CCCCCC',
    fontSize: 12,
  },

  pendingInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    marginTop: 10,
    padding: 8,
    backgroundColor: '#1a1a1a',
    borderRadius: 6,
    borderLeftWidth: 3,
    borderLeftColor: '#FFA500',
  },
  pendingInfoText: {
    color: '#FFA500',
    fontSize: 12,
    fontStyle: 'italic',
  },
  rejectedInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    marginTop: 10,
    padding: 8,
    backgroundColor: '#1a1a1a',
    borderRadius: 6,
    borderLeftWidth: 3,
    borderLeftColor: '#F44336',
  },
  rejectedInfoText: {
    color: '#F44336',
    fontSize: 12,
    fontStyle: 'italic',
  },
  // Estilos para bot√≥n de logout del administrador
  adminLogoutContainer: {
    padding: 20,
    paddingBottom: 40,
    backgroundColor: '#000000',
  },
  adminLogoutButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#DC3545',
    borderRadius: 8,
    paddingVertical: 15,
    paddingHorizontal: 20,
    gap: 10,
  },
  adminLogoutText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  activeHistoryTabText: {
    color: '#000000',
    fontWeight: '800',
    textShadowColor: 'rgba(0, 0, 0, 0.3)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 2,
  },
  historyContent: {
    padding: 20,
  },
  // Estilos para perfil mejorado
  profileUsername: {
    color: '#C9A961',
    fontSize: 14,
    marginTop: 5,
  },
  cameraIcon: {
    position: 'absolute',
    bottom: 0,
    right: 0,
    backgroundColor: '#C9A961',
    borderRadius: 12,
    width: 24,
    height: 24,
    justifyContent: 'center',
    alignItems: 'center',
  },

  viewDetailsSmallButton: {
    backgroundColor: '#C9A961',
    borderRadius: 6,
    paddingVertical: 8,
    paddingHorizontal: 12,
    alignSelf: 'flex-start',
    marginTop: 5,
  },
  viewDetailsSmallButtonText: {
    color: '#000000',
    fontSize: 12,
    fontWeight: '500',
  },
  logoutItem: {
    borderTopWidth: 1,
    borderTopColor: '#333333',
    marginTop: 20,
    paddingTop: 20,
  },
  deleteAccountItem: {
    borderTopWidth: 1,
    borderTopColor: '#333333',
    paddingTop: 20,
  },
  // Estilos para modales de perfil
  photoOptions: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    padding: 20,
  },
  photoOption: {
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#111111',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#333333',
    width: 120,
  },
  photoOptionText: {
    color: '#FFFFFF',
    fontSize: 14,
    marginTop: 10,
    textAlign: 'center',
  },
  photoPreview: {
    alignItems: 'center',
    padding: 20,
  },
  currentPhoto: {
    width: 100,
    height: 100,
    borderRadius: 50,
    backgroundColor: '#111111',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 10,
  },
  photoPreviewText: {
    color: '#CCCCCC',
    fontSize: 14,
  },
  personalDataContent: {
    padding: 20,
  },
  dataSection: {
    marginBottom: 30,
  },
  dataSectionTitle: {
    color: '#C9A961',
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 15,
  },
  dataField: {
    marginBottom: 15,
  },
  dataLabel: {
    color: '#FFFFFF',
    fontSize: 14,
    marginBottom: 5,
  },
  dataInput: {
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#333333',
    borderRadius: 8,
    padding: 12,
    color: '#FFFFFF',
    fontSize: 16,
  },
  saveButton: {
    backgroundColor: '#C9A961',
    borderRadius: 8,
    paddingVertical: 15,
    alignItems: 'center',
    marginTop: 20,
  },
  saveButtonText: {
    color: '#000000',
    fontSize: 16,
    fontWeight: '600',
  },
  policyContent: {
    padding: 20,
  },
  policyTitle: {
    color: '#C9A961',
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 10,
    textAlign: 'center',
  },
  policyDate: {
    color: '#CCCCCC',
    fontSize: 12,
    textAlign: 'center',
    marginBottom: 20,
  },
  policySection: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    marginTop: 20,
    marginBottom: 10,
  },
  policyText: {
    color: '#CCCCCC',
    fontSize: 14,
    lineHeight: 20,
    marginBottom: 15,
  },
  helpContent: {
    padding: 20,
  },
  helpSectionTitle: {
    color: '#C9A961',
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 15,
    marginTop: 10,
  },
  faqItem: {
    marginBottom: 20,
    padding: 15,
    backgroundColor: '#111111',
    borderRadius: 8,
  },
  faqQuestion: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 8,
  },
  faqAnswer: {
    color: '#CCCCCC',
    fontSize: 14,
    lineHeight: 20,
  },
  contactOption: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 15,
    backgroundColor: '#111111',
    borderRadius: 8,
    marginBottom: 10,
  },
  contactInfo: {
    marginLeft: 15,
  },
  contactTitle: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '500',
  },
  contactDetail: {
    color: '#C9A961',
    fontSize: 14,
  },
  // Estilos para modal de seguridad
  securityOption: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 15,
    backgroundColor: '#111111',
    borderRadius: 8,
    marginBottom: 10,
  },
  securityOptionLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  securityOptionText: {
    marginLeft: 15,
    flex: 1,
  },
  securityOptionTitle: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '500',
  },
  securityOptionDesc: {
    color: '#CCCCCC',
    fontSize: 12,
    marginTop: 2,
  },
  securityToggle: {
    backgroundColor: '#C9A961',
    borderRadius: 15,
    paddingHorizontal: 12,
    paddingVertical: 6,
  },
  securityToggleText: {
    color: '#000000',
    fontSize: 12,
    fontWeight: '500',
  },
  // Estilos para pantallas de registro
  registrationContainer: {
    flex: 1,
    padding: 20,
  },
  registrationTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: '#C9A961',
    textAlign: 'center',
    marginBottom: 30,
  },
  textArea: {
    height: 100,
    textAlignVertical: 'top',
  },
  agreementContainer: {
    marginTop: 20,
  },
  uploadButton: {
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#C9A961',
    borderRadius: 8,
    padding: 15,
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
    marginBottom: 15,
  },
  uploadButtonText: {
    color: '#C9A961',
    fontSize: 16,
  },
  backToWelcomeButton: {
    marginTop: 20,
    alignItems: 'center',
  },
  backToWelcomeButtonText: {
    color: '#666666',
    fontSize: 16,
  },
  // Estilos adicionales para formularios simplificados
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#C9A961',
    marginTop: 30,
    marginBottom: 15,
  },
  submitButton: {
    backgroundColor: '#C9A961',
    borderRadius: 8,
    paddingVertical: 15,
    alignItems: 'center',
    marginTop: 30,
    marginBottom: 20,
  },
  submitButtonText: {
    color: '#000000',
    fontSize: 16,
    fontWeight: '600',
  },
  paymentMethodsContainer: {
    marginTop: 10,
  },
  paymentMethod: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#333333',
    borderRadius: 8,
    padding: 15,
    marginBottom: 10,
    gap: 15,
  },
  paymentMethodSelected: {
    borderColor: '#C9A961',
    backgroundColor: '#1a1a1a',
  },
  paymentMethodText: {
    color: '#FFFFFF',
    fontSize: 16,
    flex: 1,
  },
  // Estilos para planes actualizados
  planTitleContainer: {
    flex: 1,
  },
  planDuration: {
    color: '#CCCCCC',
    fontSize: 12,
    marginTop: 2,
  },
  // Estilos para capturas de pantalla
  captureInstructions: {
    color: '#CCCCCC',
    fontSize: 14,
    marginBottom: 20,
    lineHeight: 20,
  },
  captureSection: {
    marginBottom: 25,
    padding: 15,
    backgroundColor: '#111111',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#333333',
  },
  captureSubtitle: {
    color: '#C9A961',
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 10,
  },
  captureDetail: {
    color: '#CCCCCC',
    fontSize: 13,
    marginBottom: 5,
    paddingLeft: 10,
  },
  uploadButtonSecondary: {
    backgroundColor: '#1a1a1a',
    borderColor: '#666666',
    marginTop: 10,
  },
  uploadButtonSecondaryText: {
    color: '#CCCCCC',
    fontSize: 16,
  },
  // Estilos para detalles de colaboraci√≥n mejorados
  collaborationDetailModalContent: {
    backgroundColor: '#000000',
    borderRadius: 20,
    padding: 0,
    margin: 20,
    marginTop: 60,
    maxHeight: '90%',
  },
  collaborationDetailTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#FFFFFF',
    flex: 1,
  },
  collaborationDetailScrollView: {
    padding: 20,
  },
  adminInfoSection: {
    backgroundColor: '#111111',
    borderRadius: 8,
    padding: 15,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#333333',
  },
  adminInfoTitle: {
    color: '#C9A961',
    fontSize: 14,
    fontWeight: '600',
    marginBottom: 8,
  },
  adminInfoText: {
    color: '#CCCCCC',
    fontSize: 13,
    lineHeight: 18,
  },
  photoGallerySection: {
    marginBottom: 20,
  },
  photoGallery: {
    marginTop: 10,
  },
  galleryImageContainer: {
    marginRight: 10,
  },
  galleryImagePlaceholder: {
    width: 120,
    height: 80,
    backgroundColor: '#333333',
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
  },
  galleryImageText: {
    color: '#C9A961',
    fontSize: 12,
  },
  detailSection: {
    marginBottom: 20,
  },
  detailSectionTitle: {
    color: '#C9A961',
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 10,
  },
  detailSectionText: {
    color: '#CCCCCC',
    fontSize: 14,
    lineHeight: 20,
  },
  includeItemRow: {
    marginBottom: 8,
  },
  includeItemText: {
    color: '#CCCCCC',
    fontSize: 14,
    lineHeight: 20,
  },
  interactiveMapButton: {
    backgroundColor: '#111111',
    borderWidth: 2,
    borderColor: '#C9A961',
    borderRadius: 15,
    padding: 20,
    marginTop: 10,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  mapIconText: {
    fontSize: 24,
    marginRight: 15,
  },
  mapButtonContent: {
    flex: 1,
    alignItems: 'center',
  },
  mapButtonTitle: {
    color: '#C9A961',
    fontSize: 16,
    fontWeight: '600',
  },
  mapButtonSubtitle: {
    color: '#CCCCCC',
    fontSize: 12,
    marginTop: 2,
  },
  requestCollaborationButton: {
    backgroundColor: '#C9A961',
    borderRadius: 8,
    paddingVertical: 15,
    alignItems: 'center',
    marginTop: 20,
    marginBottom: 20,
  },
  requestCollaborationButtonText: {
    color: '#000000',
    fontSize: 16,
    fontWeight: '600',
  },
  // Estilos para categor√≠as como botones
  categoryButtonsContainer: {
    padding: 20,
    paddingBottom: 10,
  },
  categoryLabel: {
    color: '#C9A961',
    fontSize: 16,
    fontWeight: '600',
    minWidth: 80,
  },
  categoryButtons: {
    flexDirection: 'row',
    gap: 10,
  },
  categoryButton: {
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#333333',
    borderRadius: 20,
    paddingVertical: 8,
    paddingHorizontal: 15,
    marginRight: 10,
  },
  categoryButtonSelected: {
    backgroundColor: '#C9A961',
    borderColor: '#C9A961',
  },
  categoryButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
  },
  categoryButtonTextSelected: {
    color: '#000000',
    fontWeight: '500',
  },
  // Estilos para selector de ciudad mejorado
  citySelector: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#111111',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 15,
    borderWidth: 1,
    borderColor: '#C9A961',
    marginLeft: 15,
  },
  citySelectorText: {
    color: '#C9A961',
    fontSize: 14,
    fontWeight: '600',
    marginRight: 5,
  },
  // Estilos para modal de ciudades elegante
  cityModalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
    justifyContent: 'flex-end',
  },
  cityModalContainer: {
    backgroundColor: '#1a1a1a',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    paddingTop: 8,
    maxHeight: '80%',
    minHeight: '60%',
  },
  cityModalHandle: {
    width: 40,
    height: 4,
    backgroundColor: '#666666',
    borderRadius: 2,
    alignSelf: 'center',
    marginBottom: 20,
  },
  cityModalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  cityModalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  cityModalCancelButton: {
    padding: 5,
  },
  cityModalCancelText: {
    fontSize: 16,
    color: '#C9A961',
    fontWeight: '500',
  },
  cityModalCountry: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingBottom: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#333333',
  },
  cityModalCountryIcon: {
    fontSize: 20,
    marginRight: 10,
  },
  cityModalCountryText: {
    fontSize: 14,
    color: '#CCCCCC',
    fontWeight: '500',
  },
  cityModalList: {
    flex: 1,
    paddingTop: 10,
  },
  cityModalListItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 16,
    paddingHorizontal: 20,
    backgroundColor: '#2a2a2a',
    marginHorizontal: 15,
    marginVertical: 4,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: 'transparent',
  },
  cityModalListItemSelected: {
    backgroundColor: '#333333',
    borderColor: '#C9A961',
  },
  cityModalListItemText: {
    fontSize: 16,
    color: '#FFFFFF',
    fontWeight: '500',
  },
  cityModalListItemTextSelected: {
    color: '#C9A961',
    fontWeight: '600',
  },
  cityModalBottomIndicator: {
    width: 134,
    height: 5,
    backgroundColor: '#666666',
    borderRadius: 3,
    alignSelf: 'center',
    marginTop: 10,
    marginBottom: 8,
  },
  // Estilos para categor√≠as deslizables horizontales
  categoryRow: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  categoryScrollView: {
    flex: 1,
    marginLeft: 15,
  },
  categoryScrollContent: {
    paddingHorizontal: 0,
    gap: 10,
    alignItems: 'center',
  },
  // Estilos para pantalla de detalles de colaboraci√≥n (est√©tica premium ZYRO)
  collaborationDetailContainer: {
    flex: 1,
    backgroundColor: '#000000',
  },
  collaborationDetailHeader: {
    position: 'absolute',
    top: 50,
    right: 20,
    zIndex: 100,
  },
  collaborationCloseButton: {
    backgroundColor: 'rgba(201, 169, 97, 0.8)',
    borderRadius: 20,
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
  },
  collaborationDetailScroll: {
    flex: 1,
  },
  // Galer√≠a de fotos
  photoGalleryContainer: {
    height: 400,
    position: 'relative',
  },
  photoGalleryScroll: {
    height: 400,
  },
  photoSlide: {
    width: width,
    height: 400,
  },
  photoSlideImage: {
    width: width,
    height: 400,
  },
  photoPlaceholder: {
    flex: 1,
    backgroundColor: '#111111',
    justifyContent: 'center',
    alignItems: 'center',
  },
  photoPlaceholderText: {
    color: '#C9A961',
    fontSize: 16,
  },
  photoIndicators: {
    position: 'absolute',
    bottom: 20,
    left: 0,
    right: 0,
    flexDirection: 'row',
    justifyContent: 'center',
    gap: 8,
  },
  photoIndicatorDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: 'rgba(201, 169, 97, 0.7)',
  },
  // Informaci√≥n b√°sica
  basicInfoSection: {
    padding: 20,
    backgroundColor: '#000000',
  },
  categoryText: {
    color: '#CCCCCC',
    fontSize: 14,
    marginBottom: 5,
  },
  businessName: {
    color: '#FFFFFF',
    fontSize: 24,
    fontWeight: '700',
    marginBottom: 15,
  },
  infoButtonsRow: {
    flexDirection: 'row',
    gap: 10,
    marginBottom: 20,
  },
  infoButton: {
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#333333',
    borderRadius: 8,
    paddingVertical: 8,
    paddingHorizontal: 12,
    flexDirection: 'row',
    alignItems: 'center',
    gap: 5,
  },
  infoButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '500',
  },
  solicitarButton: {
    backgroundColor: '#C9A961',
    borderRadius: 25,
    paddingVertical: 15,
    alignItems: 'center',
  },
  solicitarButtonText: {
    color: '#000000',
    fontSize: 16,
    fontWeight: '700',
  },
  // Secciones de contenido
  sectionTitle: {
    color: '#C9A961',
    fontSize: 16,
    fontWeight: '700',
    marginBottom: 15,
  },
  descriptionSection: {
    padding: 20,
    backgroundColor: '#000000',
  },
  descriptionText: {
    color: '#CCCCCC',
    fontSize: 14,
    lineHeight: 20,
    marginBottom: 10,
  },
  instagramHandle: {
    color: '#C9A961',
    fontSize: 14,
  },
  // Ubicaci√≥n
  locationSection: {
    padding: 20,
    backgroundColor: '#000000',
  },
  mapContainer: {
    height: 300,
    borderRadius: 12,
    overflow: 'hidden',
    marginBottom: 10,
    borderWidth: 2,
    borderColor: '#C9A961',
  },
  mapPlaceholder: {
    flex: 1,
    backgroundColor: '#111111',
    justifyContent: 'center',
    alignItems: 'center',
  },
  mapPlaceholderText: {
    color: '#C9A961',
    fontSize: 14,
    marginBottom: 10,
  },
  addressText: {
    color: '#C9A961',
    fontSize: 14,
  },
  // QUE INCLUYE
  includesSection: {
    padding: 20,
    backgroundColor: '#000000',
  },
  includesCard: {
    backgroundColor: '#1a1a1a',
    borderWidth: 2,
    borderColor: '#C9A961',
    borderRadius: 12,
    padding: 20,
  },
  includesCardTitle: {
    color: '#C9A961',
    fontSize: 14,
    fontWeight: '600',
    marginBottom: 10,
  },
  includesItem: {
    color: '#FFFFFF',
    fontSize: 14,
    marginBottom: 5,
  },
  includesNote: {
    color: '#CCCCCC',
    fontSize: 14,
    marginTop: 10,
    fontStyle: 'italic',
  },
  // CONDICIONES
  conditionsSection: {
    padding: 20,
    backgroundColor: '#000000',
    paddingBottom: 40,
  },
  conditionCard: {
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#333333',
    borderRadius: 12,
    padding: 20,
    marginBottom: 15,
  },
  conditionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 15,
    gap: 10,
  },
  conditionPlatform: {
    color: '#C9A961',
    fontSize: 16,
    fontWeight: '700',
  },
  conditionText: {
    color: '#CCCCCC',
    fontSize: 14,
    marginBottom: 10,
    lineHeight: 18,
  },
  conditionRequirement: {
    color: '#FFFFFF',
    fontSize: 14,
    marginBottom: 5,
    lineHeight: 18,
  },
  conditionNote: {
    color: '#CCCCCC',
    fontSize: 14,
    marginTop: 10,
    fontStyle: 'italic',
    lineHeight: 18,
  },
  // Estilos para el modal de solicitud mejorado
  modalScrollContent: {
    maxHeight: height * 0.7,
  },
  sectionLabel: {
    color: '#C9A961',
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 15,
    marginTop: 20,
  },
  timeSlots: {
    marginTop: 20,
  },
  timeSlotsList: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 10,
  },
  timeSlot: {
    backgroundColor: '#333333',
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#444444',
  },
  timeSlotSelected: {
    backgroundColor: '#C9A961',
    borderColor: '#C9A961',
  },
  timeSlotText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '500',
  },
  timeSlotTextSelected: {
    color: '#000000',
  },
  termsSection: {
    marginTop: 30,
    marginBottom: 20,
  },
  termsCheckbox: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  checkbox: {
    width: 20,
    height: 20,
    borderWidth: 2,
    borderColor: '#C9A961',
    borderRadius: 4,
    alignItems: 'center',
    justifyContent: 'center',
  },
  checkboxChecked: {
    backgroundColor: '#C9A961',
  },
  termsText: {
    color: '#FFFFFF',
    fontSize: 14,
    flex: 1,
    lineHeight: 20,
  },
  confirmButton: {
    backgroundColor: '#C9A961',
    paddingVertical: 15,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 20,
    marginBottom: 30,
  },
  confirmButtonText: {
    color: '#000000',
    fontSize: 16,
    fontWeight: '600',
  },
  confirmButtonDisabled: {
    backgroundColor: '#666666',
    opacity: 0.5,
  },
  confirmButtonTextDisabled: {
    color: '#CCCCCC',
  },
  // Estilos para pantalla completa de solicitud
  modalBackdrop: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end',
  },
  modalSlideContainer: {
    flex: 1,
    backgroundColor: '#000000',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    marginTop: 50,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: -5,
    },
    shadowOpacity: 0.3,
    shadowRadius: 10,
    elevation: 15,
  },
  collaborationRequestContainer: {
    flex: 1,
    backgroundColor: '#000000',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    overflow: 'hidden',
  },
  collaborationRequestHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 16,
    backgroundColor: '#000000',
  },
  collaborationRequestTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
    flex: 1,
    textAlign: 'center',
  },
  headerSpacer: {
    width: 28,
  },
  collaborationRequestScroll: {
    flex: 1,
    backgroundColor: '#000000',
  },
  collaborationRequestScrollContent: {
    paddingBottom: 40,
  },
  collaborationInfoCard: {
    backgroundColor: '#111111',
    margin: 20,
    padding: 20,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#C9A961',
    alignItems: 'center',
  },
  collaborationInfoTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 8,
    textAlign: 'center',
  },
  collaborationInfoBusiness: {
    fontSize: 16,
    color: '#FFFFFF',
    textAlign: 'center',
  },
  requestSection: {
    marginHorizontal: 20,
    marginBottom: 30,
  },
  requestSectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 15,
  },
  requestButtonContainer: {
    paddingHorizontal: 20,
    paddingBottom: 30,
  },
  // Estilos para modal de pago
  paymentContent: {
    padding: 20,
  },
  paymentSubtitle: {
    color: '#CCCCCC',
    fontSize: 14,
    marginBottom: 20,
    textAlign: 'center',
  },
  paymentForm: {
    gap: 20,
  },
  paymentRow: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  paymentSummary: {
    backgroundColor: '#111111',
    borderRadius: 8,
    padding: 15,
    marginTop: 20,
    borderWidth: 1,
    borderColor: '#333333',
  },
  summaryTitle: {
    color: '#C9A961',
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 15,
  },
  summaryRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  summaryLabel: {
    color: '#CCCCCC',
    fontSize: 14,
  },
  summaryAmount: {
    color: '#FFFFFF',
    fontSize: 14,
  },
  summaryTotal: {
    borderTopWidth: 1,
    borderTopColor: '#333333',
    paddingTop: 10,
    marginTop: 10,
  },
  summaryTotalLabel: {
    color: '#C9A961',
    fontSize: 16,
    fontWeight: '600',
  },
  summaryTotalAmount: {
    color: '#C9A961',
    fontSize: 16,
    fontWeight: '600',
  },
  paymentButton: {
    backgroundColor: '#C9A961',
    borderRadius: 8,
    paddingVertical: 15,
    alignItems: 'center',
    marginTop: 20,
  },
  paymentButtonDisabled: {
    backgroundColor: '#666666',
    opacity: 0.5,
  },
  paymentButtonText: {
    color: '#000000',
    fontSize: 16,
    fontWeight: '600',
  },
  subscriptionInfo: {
    backgroundColor: '#1a1a1a',
    borderRadius: 8,
    padding: 15,
    marginBottom: 20,
    borderLeftWidth: 3,
    borderLeftColor: '#C9A961',
  },
  subscriptionTitle: {
    color: '#C9A961',
    fontSize: 14,
    fontWeight: '600',
    marginBottom: 8,
  },
  subscriptionText: {
    color: '#CCCCCC',
    fontSize: 13,
    lineHeight: 18,
  },
  // Estilos para pantalla de pago
  paymentScreenHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 16,
    backgroundColor: '#000000',
  },
  paymentScreenTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
    flex: 1,
    textAlign: 'center',
  },
  paymentScreenContent: {
    flex: 1,
    padding: 20,
  },
  companyInfoCard: {
    backgroundColor: '#111111',
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#333333',
  },
  companyInfoTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 15,
  },
  companyInfoText: {
    fontSize: 14,
    color: '#FFFFFF',
    marginBottom: 8,
  },
  planSummaryCard: {
    backgroundColor: '#111111',
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#C9A961',
  },
  planSummaryTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 15,
  },
  planSummaryRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  planSummaryLabel: {
    fontSize: 16,
    color: '#FFFFFF',
    fontWeight: '500',
  },
  planSummaryPrice: {
    fontSize: 18,
    color: '#C9A961',
    fontWeight: '600',
  },
  planSummaryDuration: {
    fontSize: 14,
    color: '#CCCCCC',
    marginBottom: 8,
  },
  planSummaryNote: {
    fontSize: 12,
    color: '#999999',
    fontStyle: 'italic',
  },
  paymentMethodCard: {
    backgroundColor: '#111111',
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#333333',
  },
  paymentMethodTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 15,
  },
  paymentMethodRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  paymentMethodName: {
    fontSize: 16,
    color: '#FFFFFF',
    fontWeight: '500',
  },
  cardPaymentForm: {
    backgroundColor: '#111111',
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#333333',
  },
  formSectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 20,
  },
  digitalPaymentInfo: {
    backgroundColor: '#111111',
    borderRadius: 12,
    padding: 30,
    marginBottom: 20,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#333333',
  },
  digitalPaymentText: {
    fontSize: 14,
    color: '#CCCCCC',
    textAlign: 'center',
    marginTop: 15,
    lineHeight: 20,
  },
  transferInfo: {
    backgroundColor: '#111111',
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#333333',
  },
  transferTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 20,
  },
  transferDetails: {
    marginBottom: 20,
  },
  transferLabel: {
    fontSize: 14,
    color: '#CCCCCC',
    marginTop: 10,
    marginBottom: 5,
  },
  transferValue: {
    fontSize: 14,
    color: '#FFFFFF',
    fontWeight: '500',
  },
  transferNote: {
    fontSize: 12,
    color: '#FF9800',
    textAlign: 'center',
    lineHeight: 18,
  },
  completePaymentButton: {
    backgroundColor: '#C9A961',
    borderRadius: 12,
    paddingVertical: 18,
    alignItems: 'center',
    marginTop: 20,
  },
  completePaymentButtonText: {
    color: '#000000',
    fontSize: 16,
    fontWeight: '600',
  },
  // Estilos para configuraci√≥n de contrase√±a
  passwordSetupContainer: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
  },
  passwordSetupHeader: {
    alignItems: 'center',
    marginBottom: 40,
  },
  passwordSetupLogo: {
    width: 120,
    height: 120,
    marginBottom: 20,
  },
  passwordSetupTitle: {
    fontSize: 24,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 10,
    textAlign: 'center',
  },
  passwordSetupSubtitle: {
    fontSize: 16,
    color: '#CCCCCC',
    textAlign: 'center',
    lineHeight: 22,
  },
  passwordSetupForm: {
    gap: 20,
  },
  disabledInput: {
    backgroundColor: '#222222',
    color: '#999999',
  },
  setupPasswordButton: {
    backgroundColor: '#C9A961',
    borderRadius: 12,
    paddingVertical: 18,
    alignItems: 'center',
    marginTop: 20,
  },
  setupPasswordButtonText: {
    color: '#000000',
    fontSize: 16,
    fontWeight: '600',
  },
  // Estilos para pantalla principal de empresa
  companyMainContainer: {
    flex: 1,
    padding: 20,
  },
  companyMainHeader: {
    alignItems: 'center',
    marginBottom: 30,
  },
  companyMainLogo: {
    width: 100,
    height: 100,
    marginBottom: 20,
  },
  companyMainTitle: {
    fontSize: 24,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 10,
  },
  companyMainWelcome: {
    fontSize: 16,
    color: '#FFFFFF',
    textAlign: 'center',
  },
  companyMainContent: {
    flex: 1,
  },
  companyStatsCard: {
    backgroundColor: '#111111',
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#C9A961',
  },
  companyStatsTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 15,
  },
  companyStatsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  companyStatsLabel: {
    fontSize: 14,
    color: '#CCCCCC',
  },
  companyStatsValue: {
    fontSize: 14,
    color: '#FFFFFF',
    fontWeight: '500',
  },
  companyActionsCard: {
    backgroundColor: '#111111',
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#333333',
  },
  companyActionsTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 20,
  },
  companyActionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 15,
    paddingHorizontal: 15,
    backgroundColor: '#222222',
    borderRadius: 8,
    marginBottom: 10,
    gap: 15,
  },
  companyActionText: {
    fontSize: 16,
    color: '#FFFFFF',
  },
  logoutSection: {
    padding: 20,
    paddingBottom: 40,
  },
  logoutButton: {
    backgroundColor: '#FF4444',
    borderRadius: 8,
    paddingVertical: 15,
    paddingHorizontal: 20,
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
    gap: 10,
  },
  logoutButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  // Estilos para modal de solicitudes de empresa
  companyRequestsHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 16,
    paddingVertical: 16,
    backgroundColor: '#000000',
    borderBottomWidth: 1,
    borderBottomColor: '#333333',
    position: 'relative',
  },
  companyRequestsBackButton: {
    position: 'absolute',
    left: 16,
    top: 16,
    bottom: 16,
    justifyContent: 'center',
    alignItems: 'center',
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: 'rgba(201, 169, 97, 0.1)',
  },
  companyRequestsTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
    textAlign: 'center',
  },
  requestsFilters: {
    backgroundColor: '#000000',
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#333333',
  },
  filtersScroll: {
    paddingHorizontal: 20,
  },
  filterButton: {
    backgroundColor: '#111111',
    borderWidth: 1,
    borderColor: '#333333',
    borderRadius: 20,
    paddingVertical: 8,
    paddingHorizontal: 16,
    marginRight: 10,
  },
  filterButtonActive: {
    backgroundColor: '#C9A961',
    borderColor: '#C9A961',
  },
  filterButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '500',
  },
  filterButtonTextActive: {
    color: '#000000',
    fontWeight: '600',
  },
  requestsList: {
    flex: 1,
    backgroundColor: '#000000',
    padding: 20,
  },
  requestCard: {
    backgroundColor: '#111111',
    borderRadius: 12,
    padding: 20,
    marginBottom: 20,
    borderWidth: 1,
    borderColor: '#333333',
  },
  requestCardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 15,
  },
  influencerInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  influencerAvatar: {
    width: 50,
    height: 50,
    backgroundColor: '#222222',
    borderRadius: 25,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 15,
  },
  influencerDetails: {
    flex: 1,
  },
  influencerName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 2,
  },
  influencerUsername: {
    fontSize: 14,
    color: '#C9A961',
    marginBottom: 2,
  },
  influencerDetailLabel: {
    fontSize: 14,
    color: '#C9A961',
    fontWeight: '600',
    marginBottom: 8,
    marginTop: 10,
  },
  influencerDetailText: {
    fontSize: 13,
    color: '#CCCCCC',
    marginBottom: 4,
  },
  // Estilos para gesti√≥n de usuarios
  userCard: {
    backgroundColor: '#111111',
    borderRadius: 12,
    padding: 15,
    marginBottom: 15,
    borderWidth: 1,
    borderColor: '#333333',
  },
  userCardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  userInfo: {
    flex: 1,
    marginRight: 10,
  },
  userName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 4,
  },
  userEmail: {
    fontSize: 14,
    color: '#C9A961',
    marginBottom: 4,
  },
  userType: {
    fontSize: 12,
    color: '#CCCCCC',
  },
  userDetails: {
    marginBottom: 12,
  },
  userDetailLabel: {
    fontSize: 14,
    color: '#C9A961',
    fontWeight: '600',
    marginBottom: 8,
  },
  userDetailText: {
    fontSize: 13,
    color: '#CCCCCC',
    marginBottom: 4,
  },
  userRegistrationDate: {
    fontSize: 12,
    color: '#888888',
    marginBottom: 12,
  },
  userActions: {
    flexDirection: 'row',
    gap: 10,
  },
  companyDetails: {
    marginBottom: 12,
  },
  companyDetailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  companyDetailItem: {
    flex: 1,
    marginRight: 10,
  },
  companyDetailLabel: {
    fontSize: 12,
    color: '#888888',
    marginBottom: 2,
  },
  companyDetailValue: {
    fontSize: 14,
    color: '#FFFFFF',
    fontWeight: '500',
  },
  influencerFollowers: {
    fontSize: 12,
    color: '#999999',
  },
  requestStatusBadge: {
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 12,
    marginLeft: 10,
  },
  statusPending: {
    backgroundColor: 'rgba(255, 152, 0, 0.2)',
  },
  statusApproved: {
    backgroundColor: 'rgba(76, 175, 80, 0.2)',
  },
  statusRejected: {
    backgroundColor: 'rgba(244, 67, 54, 0.2)',
  },
  requestStatusText: {
    fontSize: 10,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  collaborationInfo: {
    marginBottom: 15,
  },
  collaborationTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 10,
  },
  requestDetails: {
    gap: 8,
  },
  requestDetailItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  requestDetailText: {
    fontSize: 14,
    color: '#CCCCCC',
  },
  influencerMessage: {
    backgroundColor: '#1a1a1a',
    borderRadius: 8,
    padding: 15,
    marginBottom: 15,
  },
  messageLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 8,
  },
  messageText: {
    fontSize: 14,
    color: '#CCCCCC',
    lineHeight: 20,
  },
  influencerFollowersInfo: {
    backgroundColor: '#1a1a1a',
    borderRadius: 8,
    padding: 15,
    marginBottom: 15,
  },
  followersLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 12,
  },
  followersDisplay: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  followersCount: {
    fontSize: 18,
    fontWeight: '700',
    color: '#FFFFFF',
  },
  followersText: {
    fontSize: 14,
    color: '#CCCCCC',
  },
  adminNote: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 152, 0, 0.1)',
    borderRadius: 8,
    padding: 12,
    marginBottom: 15,
    gap: 8,
  },
  adminNoteText: {
    fontSize: 12,
    color: '#FF9800',
    flex: 1,
    lineHeight: 16,
  },
  contactButtons: {
    flexDirection: 'row',
    gap: 10,
  },
  contactButton: {
    flex: 1,
    backgroundColor: '#C9A961',
    borderRadius: 8,
    paddingVertical: 12,
    paddingHorizontal: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  contactButtonText: {
    color: '#000000',
    fontSize: 14,
    fontWeight: '600',
  },
  viewProfileButton: {
    flex: 1,
    backgroundColor: '#222222',
    borderWidth: 1,
    borderColor: '#666666',
    borderRadius: 8,
    paddingVertical: 12,
    paddingHorizontal: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
  },
  viewProfileButtonText: {
    color: '#CCCCCC',
    fontSize: 14,
    fontWeight: '500',
  },
  // Estilos para estado vac√≠o de solicitudes
  emptyRequestsState: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 60,
    paddingHorizontal: 40,
  },
  emptyRequestsTitle: {
    fontSize: 18,
    color: '#FFFFFF',
    fontWeight: '600',
    marginTop: 20,
    marginBottom: 10,
    textAlign: 'center',
  },
  emptyRequestsSubtitle: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    lineHeight: 20,
  },
  // Estilos para gesti√≥n de suscripci√≥n
  subscriptionHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 16,
    paddingVertical: 16,
    backgroundColor: '#000000',
    borderBottomWidth: 1,
    borderBottomColor: '#333333',
    position: 'relative',
  },
  subscriptionBackButton: {
    position: 'absolute',
    left: 16,
    top: 16,
    bottom: 16,
    justifyContent: 'center',
    alignItems: 'center',
    width: 40,
    height: 40,
  },
  subscriptionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  subscriptionContent: {
    flex: 1,
    backgroundColor: '#000000',
  },
  subscriptionStatusCard: {
    backgroundColor: '#111111',
    margin: 16,
    borderRadius: 12,
    padding: 20,
    borderWidth: 1,
    borderColor: '#4CAF50',
  },
  subscriptionStatusHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
    gap: 12,
  },
  subscriptionStatusTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#4CAF50',
  },
  subscriptionStatusDetails: {
    gap: 12,
  },
  subscriptionStatusRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  subscriptionStatusLabel: {
    fontSize: 14,
    color: '#CCCCCC',
  },
  subscriptionStatusValue: {
    fontSize: 14,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  subscriptionSection: {
    backgroundColor: '#111111',
    margin: 16,
    marginTop: 0,
    borderRadius: 12,
    padding: 20,
  },
  subscriptionSectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 8,
  },
  subscriptionSectionSubtitle: {
    fontSize: 14,
    color: '#CCCCCC',
    marginBottom: 20,
    lineHeight: 20,
  },
  plansContainer: {
    gap: 16,
  },
  planCard: {
    backgroundColor: '#222222',
    borderRadius: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: '#333333',
  },
  planCardActive: {
    borderColor: '#C9A961',
    backgroundColor: 'rgba(201, 169, 97, 0.1)',
  },
  planHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
    position: 'relative',
  },
  planName: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  planPrice: {
    fontSize: 16,
    fontWeight: '600',
    color: '#C9A961',
  },
  currentPlanBadge: {
    position: 'absolute',
    top: -8,
    right: -8,
    backgroundColor: '#C9A961',
    borderRadius: 12,
    paddingHorizontal: 8,
    paddingVertical: 4,
  },
  currentPlanBadgeText: {
    fontSize: 10,
    fontWeight: '700',
    color: '#000000',
  },
  planFeatures: {
    marginBottom: 16,
    gap: 4,
  },
  planFeature: {
    fontSize: 14,
    color: '#CCCCCC',
    lineHeight: 20,
  },
  planButton: {
    backgroundColor: '#333333',
    borderRadius: 8,
    paddingVertical: 12,
    alignItems: 'center',
  },
  planButtonActive: {
    backgroundColor: '#C9A961',
  },
  planButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  planButtonTextActive: {
    color: '#000000',
  },
  paymentMethodCard: {
    backgroundColor: '#222222',
    borderRadius: 12,
    padding: 16,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  paymentMethodInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  paymentMethodDetails: {
    gap: 4,
  },
  paymentMethodTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  paymentMethodSubtitle: {
    fontSize: 14,
    color: '#CCCCCC',
  },
  paymentMethodButton: {
    backgroundColor: '#C9A961',
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 8,
  },
  paymentMethodButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#000000',
  },


  // Estilos para el nuevo historial visual de facturaci√≥n
  billingHistoryContainer: {
    marginTop: 16,
  },
  timelineContainer: {
    paddingLeft: 20,
    marginBottom: 24,
  },
  timelineItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 8,
  },
  timelineDot: {
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: '#4CAF50',
    marginRight: 16,
    marginTop: 4,
  },
  timelineLine: {
    width: 2,
    height: 24,
    backgroundColor: '#333333',
    marginLeft: 5,
    marginBottom: 8,
  },
  timelineContent: {
    flex: 1,
    paddingBottom: 8,
  },
  timelineMonth: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 4,
  },
  timelineAmount: {
    fontSize: 14,
    color: '#C9A961',
    fontWeight: '500',
    marginBottom: 2,
  },
  timelineStatus: {
    fontSize: 12,
    color: '#4CAF50',
    fontWeight: '500',
  },
  billingStats: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    backgroundColor: '#1a1a1a',
    borderRadius: 12,
    padding: 20,
    marginTop: 8,
  },
  statItem: {
    alignItems: 'center',
  },
  statNumber: {
    fontSize: 20,
    fontWeight: '700',
    color: '#C9A961',
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: '#CCCCCC',
    textAlign: 'center',
  },

  cancelSubscriptionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
    backgroundColor: 'rgba(244, 67, 54, 0.1)',
    borderRadius: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: '#F44336',
  },
  cancelSubscriptionText: {
    fontSize: 16,
    color: '#F44336',
    fontWeight: '500',
  },
  // Missing validation styles
  passwordValidation: {
    marginTop: 15,
    gap: 8,
  },
  validationItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  validationText: {
    fontSize: 14,
    fontWeight: '500',
  },
  passwordChangeSubtitle: {
    fontSize: 14,
    color: '#CCCCCC',
    marginBottom: 20,
    lineHeight: 20,
  },
  saveButtonDisabled: {
    backgroundColor: '#666666',
    opacity: 0.5,
  },
  saveButtonTextDisabled: {
    color: '#CCCCCC',
  },
  // Estilos para el modal de cambio de m√©todo de pago
  paymentMethodOption: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#111111',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#333333',
  },
  paymentMethodOptionLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  paymentMethodOptionText: {
    fontSize: 16,
    color: '#FFFFFF',
    fontWeight: '500',
  },
  selectedPaymentMethodHeader: {
    alignItems: 'center',
    padding: 20,
    marginBottom: 20,
  },
  selectedPaymentMethodTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#FFFFFF',
    marginTop: 12,
    marginBottom: 8,
  },
  selectedPaymentMethodSubtitle: {
    fontSize: 14,
    color: '#CCCCCC',
    textAlign: 'center',
    lineHeight: 20,
  },
  paymentForm: {
    gap: 16,
  },
  formLabel: {
    fontSize: 14,
    color: '#CCCCCC',
    marginBottom: 8,
    fontWeight: '500',
  },
  formRow: {
    flexDirection: 'row',
    gap: 12,
  },
  formHalf: {
    flex: 1,
  },
  formNote: {
    fontSize: 12,
    color: '#999999',
    fontStyle: 'italic',
    marginTop: 8,
    lineHeight: 16,
  },
  confirmPaymentButton: {
    backgroundColor: '#C9A961',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    marginTop: 24,
    marginBottom: 20,
  },
  confirmPaymentButtonDisabled: {
    backgroundColor: '#666666',
    opacity: 0.6,
  },
  confirmPaymentButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#000000',
  },
  // Estilos para validaci√≥n en tiempo real
  formInputValid: {
    borderColor: '#4CAF50',
    backgroundColor: '#0d1f0d',
  },
  formInputInvalid: {
    borderColor: '#F44336',
    backgroundColor: '#1f0d0d',
  },
  validationMessage: {
    fontSize: 12,
    marginTop: 4,
    marginBottom: 8,
  },
  validationMessageValid: {
    color: '#4CAF50',
  },
  validationMessageInvalid: {
    color: '#F44336',
  },
  validationIcon: {
    position: 'absolute',
    right: 12,
    top: 12,
  },

  // Estilos para secci√≥n de capturas de pantalla
  screenshotsSection: {
    backgroundColor: '#1a1a1a',
    borderRadius: 8,
    padding: 15,
    marginTop: 12,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#333333',
  },
  screenshotsSectionTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 10,
  },
  screenshotsInfo: {
    marginBottom: 12,
  },
  screenshotsCount: {
    fontSize: 13,
    color: '#CCCCCC',
    marginBottom: 4,
  },
  screenshotsTotal: {
    fontSize: 13,
    color: '#C9A961',
    fontWeight: '600',
    marginBottom: 4,
  },
  viewScreenshotsButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#C9A961',
    borderWidth: 1,
    borderColor: '#C9A961',
    borderRadius: 8,
    paddingVertical: 12,
    paddingHorizontal: 20,
    gap: 8,
    marginTop: 8,
    shadowColor: '#C9A961',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 3,
  },
  viewScreenshotsButtonText: {
    color: '#000000',
    fontSize: 14,
    fontWeight: '600',
  },

  // Estilos para modal de capturas de pantalla
  screenshotsContent: {
    flex: 1,
    backgroundColor: '#000000',
  },
  screenshotsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    padding: 16,
    gap: 12,
  },
  screenshotThumbnail: {
    width: (width - 56) / 2, // 2 columnas con gaps
    height: 200,
    borderRadius: 8,
    overflow: 'hidden',
    position: 'relative',
  },
  screenshotImage: {
    width: '100%',
    height: '100%',
  },
  screenshotOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  emptyScreenshots: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 60,
    paddingHorizontal: 40,
  },
  emptyScreenshotsTitle: {
    fontSize: 18,
    color: '#FFFFFF',
    fontWeight: '600',
    marginTop: 20,
    marginBottom: 10,
    textAlign: 'center',
  },
  emptyScreenshotsSubtitle: {
    fontSize: 14,
    color: '#666666',
    textAlign: 'center',
    lineHeight: 20,
  },

  // Estilos para visor de im√°genes en pantalla completa
  imageViewerOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.95)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  imageViewerClose: {
    position: 'absolute',
    top: 50,
    right: 20,
    zIndex: 1000,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    borderRadius: 20,
    padding: 10,
  },
  fullScreenImage: {
    width: width,
    height: height * 0.8,
  },
  imageNavigation: {
    position: 'absolute',
    bottom: 50,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    borderRadius: 25,
    paddingHorizontal: 20,
    paddingVertical: 10,
    gap: 20,
  },
  navButton: {
    backgroundColor: 'rgba(201, 169, 97, 0.2)',
    borderRadius: 20,
    padding: 8,
  },
  navButtonDisabled: {
    backgroundColor: 'rgba(102, 102, 102, 0.2)',
  },
  imageCounter: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '500',
  },

  // Estilos para modal de capturas como overlay
  screenshotsModalOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: '#000000',
    zIndex: 10000,
  },
  screenshotsModalContainer: {
    flex: 1,
    backgroundColor: '#000000',
  },
  
  // Estilos para informaci√≥n del influencer en modal de capturas
  influencerInfoHeader: {
    backgroundColor: '#1a1a1a',
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#333',
  },
  influencerInfoText: {
    color: '#C9A961',
    fontSize: 14,
    marginBottom: 4,
  },
  
  // Estilos para overlay de capturas mejorado
  screenshotIndex: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: 'bold',
    marginTop: 4,
  },

  // Estilos mejorados para el visor de im√°genes con zoom
  imageViewerHeader: {
    position: 'absolute',
    top: 50,
    left: 0,
    right: 0,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    zIndex: 1000,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    paddingVertical: 10,
  },
  imageViewerInfo: {
    alignItems: 'center',
  },
  imageViewerTitle: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  imageViewerCounter: {
    color: '#C9A961',
    fontSize: 14,
    marginTop: 2,
  },
  imageViewerZoomInfo: {
    backgroundColor: 'rgba(201, 169, 97, 0.2)',
    borderRadius: 20,
    padding: 8,
  },
  imageScrollContainer: {
    flex: 1,
  },
  imageScrollContent: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  imageContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  imageNavigationCenter: {
    alignItems: 'center',
  },
  imageTabIndicator: {
    color: '#C9A961',
    fontSize: 12,
    marginTop: 4,
  },
  navButtonText: {
    color: '#FFFFFF',
    fontSize: 12,
    marginHorizontal: 4,
  },

  // Estilos para cambio de tabs en modo zoom
  zoomTabSwitcher: {
    position: 'absolute',
    bottom: 120,
    left: 20,
    right: 20,
    flexDirection: 'row',
    justifyContent: 'center',
    gap: 10,
  },
  zoomTabButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    borderWidth: 1,
    borderColor: '#333333',
    borderRadius: 20,
    paddingHorizontal: 12,
    paddingVertical: 8,
    gap: 6,
  },
  zoomTabButtonActive: {
    backgroundColor: '#C9A961',
    borderColor: '#C9A961',
  },
  zoomTabButtonText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '500',
  },
  zoomTabButtonTextActive: {
    color: '#000000',
    fontWeight: '600',
  },

  // Estilos para badge de notificaci√≥n
  menuItemRight: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  notificationBadge: {
    backgroundColor: '#FF4444',
    borderRadius: 10,
    minWidth: 20,
    height: 20,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 6,
  },
  notificationBadgeText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
  },

  // Estilos adicionales para solicitudes de colaboraci√≥n
  collaborationInfo: {
    backgroundColor: '#1a1a1a',
    borderRadius: 8,
    padding: 12,
    marginBottom: 12,
  },
  collaborationTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 4,
  },
  collaborationBusiness: {
    fontSize: 14,
    color: '#FFFFFF',
    marginBottom: 8,
  },
  collaborationDetails: {
    gap: 4,
  },
  collaborationDate: {
    fontSize: 13,
    color: '#CCCCCC',
  },

  // Estilos para gesti√≥n de campa√±as
  campaignManagementContainer: {
    flex: 1,
    backgroundColor: '#000000',
  },
  campaignManagementHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#333333',
  },
  campaignManagementTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  campaignsList: {
    flex: 1,
    paddingHorizontal: 20,
  },
  campaignCard: {
    backgroundColor: '#1A1A1A',
    borderRadius: 12,
    padding: 15,
    marginVertical: 8,
    borderWidth: 1,
    borderColor: '#333333',
  },
  campaignCardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 10,
  },
  campaignInfo: {
    flex: 1,
  },
  campaignTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 4,
  },
  campaignBusiness: {
    fontSize: 14,
    color: '#FFFFFF',
    marginBottom: 2,
  },
  campaignCategory: {
    fontSize: 12,
    color: '#CCCCCC',
  },
  campaignActions: {
    flexDirection: 'row',
    gap: 10,
  },
  editButton: {
    backgroundColor: '#C9A961',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
  },
  editButtonText: {
    color: '#000000',
    fontSize: 12,
    fontWeight: '600',
  },
  deleteButton: {
    backgroundColor: '#FF4444',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
  },
  deleteButtonText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
  },
  campaignDetails: {
    marginTop: 10,
    paddingTop: 10,
    borderTopWidth: 1,
    borderTopColor: '#333333',
  },
  campaignDescription: {
    fontSize: 13,
    color: '#CCCCCC',
    marginBottom: 8,
  },
  campaignStats: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 8,
  },
  campaignStat: {
    alignItems: 'center',
  },
  campaignStatValue: {
    fontSize: 14,
    fontWeight: '600',
    color: '#C9A961',
  },
  campaignStatLabel: {
    fontSize: 11,
    color: '#CCCCCC',
    marginTop: 2,
  },
  addCampaignButton: {
    backgroundColor: '#C9A961',
    margin: 20,
    paddingVertical: 15,
    borderRadius: 12,
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
    gap: 8,
  },
  addCampaignButtonText: {
    color: '#000000',
    fontSize: 16,
    fontWeight: '600',
  },

  // Estilos para editor de campa√±as
  campaignEditorContainer: {
    flex: 1,
    backgroundColor: '#000000',
  },
  campaignEditorHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#333333',
  },
  campaignEditorTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  campaignEditorContent: {
    flex: 1,
    paddingHorizontal: 20,
  },
  formSection: {
    marginVertical: 15,
  },
  formSectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#C9A961',
    marginBottom: 10,
  },
  formInput: {
    backgroundColor: '#1A1A1A',
    borderWidth: 1,
    borderColor: '#333333',
    borderRadius: 8,
    paddingHorizontal: 15,
    paddingVertical: 12,
    color: '#FFFFFF',
    fontSize: 14,
    marginBottom: 10,
  },
  formTextArea: {
    backgroundColor: '#1A1A1A',
    borderWidth: 1,
    borderColor: '#333333',
    borderRadius: 8,
    paddingHorizontal: 15,
    paddingVertical: 12,
    color: '#FFFFFF',
    fontSize: 14,
    height: 80,
    textAlignVertical: 'top',
    marginBottom: 10,
  },
  imageSection: {
    marginVertical: 15,
  },
  imageGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 10,
  },
  imagePreview: {
    width: 80,
    height: 80,
    borderRadius: 8,
    backgroundColor: '#1A1A1A',
    borderWidth: 1,
    borderColor: '#333333',
  },
  addImageButton: {
    width: 80,
    height: 80,
    borderRadius: 8,
    backgroundColor: '#1A1A1A',
    borderWidth: 2,
    borderColor: '#C9A961',
    borderStyle: 'dashed',
    justifyContent: 'center',
    alignItems: 'center',
  },
  removeImageButton: {
    position: 'absolute',
    top: -5,
    right: -5,
    backgroundColor: '#FF4444',
    borderRadius: 10,
    width: 20,
    height: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  listSection: {
    marginVertical: 15,
  },
  listItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#1A1A1A',
    borderRadius: 8,
    paddingHorizontal: 15,
    paddingVertical: 10,
    marginBottom: 8,
  },
  listItemText: {
    flex: 1,
    color: '#FFFFFF',
    fontSize: 14,
  },
  removeListItemButton: {
    backgroundColor: '#FF4444',
    borderRadius: 15,
    width: 30,
    height: 30,
    justifyContent: 'center',
    alignItems: 'center',
  },
  addListItemButton: {
    backgroundColor: '#C9A961',
    borderRadius: 8,
    paddingVertical: 10,
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
    gap: 8,
  },
  addListItemButtonText: {
    color: '#000000',
    fontSize: 14,
    fontWeight: '600',
  },
  timeSlotGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  timeSlotChip: {
    backgroundColor: '#1A1A1A',
    borderWidth: 1,
    borderColor: '#333333',
    borderRadius: 20,
    paddingHorizontal: 12,
    paddingVertical: 6,
    flexDirection: 'row',
    alignItems: 'center',
    gap: 5,
  },
  timeSlotChipSelected: {
    backgroundColor: '#C9A961',
    borderColor: '#C9A961',
  },
  timeSlotChipText: {
    color: '#FFFFFF',
    fontSize: 12,
  },
  timeSlotChipTextSelected: {
    color: '#000000',
  },
  dateGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  dateChip: {
    backgroundColor: '#1A1A1A',
    borderWidth: 1,
    borderColor: '#333333',
    borderRadius: 8,
    paddingHorizontal: 10,
    paddingVertical: 8,
    flexDirection: 'row',
    alignItems: 'center',
    gap: 5,
  },
  dateChipSelected: {
    backgroundColor: '#C9A961',
    borderColor: '#C9A961',
  },
  dateChipText: {
    color: '#FFFFFF',
    fontSize: 12,
  },
  dateChipTextSelected: {
    color: '#000000',
  },
  saveButton: {
    backgroundColor: '#C9A961',
    margin: 20,
    paddingVertical: 15,
    borderRadius: 12,
    alignItems: 'center',
  },
  saveButtonText: {
    color: '#000000',
    fontSize: 16,
    fontWeight: '600',
  },

  // ‚úÖ ESTILOS PARA GESTI√ìN DE SOLICITUDES DE REGISTRO DE INFLUENCERS
  modalBackButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 8,
    backgroundColor: 'rgba(201, 169, 97, 0.1)',
  },
  modalBackButtonText: {
    color: '#C9A961',
    fontSize: 14,
    fontWeight: '500',
    marginLeft: 8,
  },
  modalActionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 8,
    backgroundColor: 'rgba(201, 169, 97, 0.1)',
  },
  modalActionButtonText: {
    color: '#C9A961',
    fontSize: 14,
    fontWeight: '500',
    marginLeft: 8,
  },
  emptyState: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 60,
  },
  emptyStateTitle: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: '600',
    marginTop: 16,
    marginBottom: 8,
  },
  emptyStateText: {
    color: '#999999',
    fontSize: 14,
    textAlign: 'center',
    lineHeight: 20,
    paddingHorizontal: 40,
  },

  // Estilos para tarjetas de solicitudes de influencers
  influencerRequestCard: {
    backgroundColor: '#111111',
    borderRadius: 12,
    marginHorizontal: 20,
    marginVertical: 8,
    padding: 16,
    borderWidth: 1,
    borderColor: '#333333',
  },
  influencerRequestHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  influencerRequestInfo: {
    flex: 1,
  },
  influencerRequestName: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 4,
  },
  influencerRequestEmail: {
    color: '#C9A961',
    fontSize: 14,
    marginBottom: 4,
  },
  influencerRequestDate: {
    color: '#999999',
    fontSize: 12,
  },
  influencerRequestBadge: {
    backgroundColor: '#FF9500',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 6,
  },
  influencerRequestBadgeText: {
    color: '#FFFFFF',
    fontSize: 10,
    fontWeight: '600',
  },
  influencerRequestDetails: {
    marginBottom: 16,
  },
  influencerRequestRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  influencerRequestDetailText: {
    color: '#FFFFFF',
    fontSize: 14,
    marginLeft: 8,
  },

  // Estilos para secci√≥n de capturas
  screenshotsSection: {
    marginBottom: 16,
  },
  screenshotsSectionTitle: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 12,
  },
  screenshotsContainer: {
    gap: 12,
  },
  screenshotsPlatform: {
    marginBottom: 8,
  },
  screenshotsPlatformTitle: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '500',
    marginBottom: 8,
  },
  screenshotsScroll: {
    marginLeft: 8,
  },
  screenshotThumbnail: {
    marginRight: 8,
    borderRadius: 8,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#333333',
  },
  screenshotImage: {
    width: 60,
    height: 80,
    resizeMode: 'cover',
  },
  noScreenshotsText: {
    color: '#666666',
    fontSize: 12,
    fontStyle: 'italic',
    marginLeft: 8,
  },

  // Estilos para botones de acci√≥n
  influencerRequestActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 12,
  },
  rejectButton: {
    flex: 1,
    backgroundColor: '#FF4444',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    borderRadius: 8,
  },
  rejectButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
  },
  approveButton: {
    flex: 1,
    backgroundColor: '#4CAF50',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    borderRadius: 8,
  },
  approveButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
  },

  // Estilos para influencers aprobados
  approvedInfluencerCard: {
    backgroundColor: '#111111',
    borderRadius: 12,
    marginHorizontal: 20,
    marginVertical: 8,
    padding: 16,
    borderWidth: 1,
    borderColor: '#4CAF50',
  },
  approvedInfluencerHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  approvedInfluencerInfo: {
    flex: 1,
  },
  approvedInfluencerName: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 4,
  },
  approvedInfluencerEmail: {
    color: '#C9A961',
    fontSize: 14,
    marginBottom: 4,
  },
  approvedInfluencerDate: {
    color: '#999999',
    fontSize: 12,
  },
  approvedInfluencerBadge: {
    backgroundColor: '#4CAF50',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 6,
  },
  approvedInfluencerBadgeText: {
    color: '#FFFFFF',
    fontSize: 10,
    fontWeight: '600',
  },
  approvedInfluencerDetails: {
    marginBottom: 16,
  },
  approvedInfluencerRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  approvedInfluencerDetailText: {
    color: '#FFFFFF',
    fontSize: 14,
    marginLeft: 8,
  },

  // Estilos para estado de acceso
  accessStatusSection: {
    backgroundColor: 'rgba(76, 175, 80, 0.1)',
    borderRadius: 8,
    padding: 12,
    marginBottom: 16,
  },
  accessStatusRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 4,
  },
  accessStatusText: {
    color: '#4CAF50',
    fontSize: 13,
    marginLeft: 8,
  },

  // ‚úÖ ESTILOS PARA BOT√ìN DE ELIMINAR INFLUENCER APROBADO
  removeInfluencerSection: {
    marginTop: 16,
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: '#333333',
  },
  removeInfluencerButton: {
    backgroundColor: '#FF4444',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
    marginHorizontal: 4,
  },
  removeInfluencerButtonText: {
    color: '#FFFFFF',
    fontSize: 14,
    fontWeight: '600',
    marginLeft: 8,
  },

  // ‚úÖ ESTILOS ADICIONALES PARA CAPTURAS DE PANTALLA Y MODALES
  imageViewerOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.95)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  imageViewerClose: {
    position: 'absolute',
    top: 50,
    right: 20,
    zIndex: 1000,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    borderRadius: 20,
    padding: 10,
  },
  imageViewerHeader: {
    position: 'absolute',
    top: 50,
    left: 20,
    right: 80,
    zIndex: 999,
  },
  imageViewerTitle: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center',
  },
  imageViewerScroll: {
    flex: 1,
  },
  imageViewerSlide: {
    width: width,
    height: height,
    justifyContent: 'center',
    alignItems: 'center',
  },
  imageViewerImage: {
    width: width - 40,
    height: height - 200,
  },
  imageViewerIndicators: {
    position: 'absolute',
    bottom: 100,
    left: 0,
    right: 0,
    flexDirection: 'row',
    justifyContent: 'center',
    gap: 8,
  },
  imageViewerDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: 'rgba(255, 255, 255, 0.5)',
  },
  imageViewerDotActive: {
    backgroundColor: '#C9A961',
  },
  modalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 16,
    backgroundColor: '#000000',
    borderBottomWidth: 1,
    borderBottomColor: '#333333',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
    textAlign: 'center',
    flex: 1,
  },
  modalContent: {
    flex: 1,
    backgroundColor: '#000000',
  },
{{{{
{{{{
});