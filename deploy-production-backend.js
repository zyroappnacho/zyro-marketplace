/**
 * Script para desplegar el backend de Stripe en modo producci√≥n
 * Simula un entorno de producci√≥n local para testing
 */
const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ DESPLEGANDO BACKEND DE STRIPE PARA PRODUCCI√ìN');
console.log('=' .repeat(60));

async function verifyConfiguration() {
  console.log('\nüîç PASO 1: Verificando configuraci√≥n...');
  
  // Verificar archivos necesarios
  const requiredFiles = [
    'backend/stripe-server-optimized.js',
    'backend/.env',
    'stripe-price-ids.json'
  ];

  for (const file of requiredFiles) {
    if (!fs.existsSync(file)) {
      console.error(`‚ùå Archivo faltante: ${file}`);
      return false;
    }
    console.log(`‚úÖ ${file}: Encontrado`);
  }

  // Verificar variables de entorno
  const envContent = fs.readFileSync('backend/.env', 'utf8');
  const checks = [
    { pattern: 'sk_live_', name: 'Clave secreta de producci√≥n' },
    { pattern: 'whsec_', name: 'Webhook secret' },
    { pattern: 'NODE_ENV=production', name: 'Entorno de producci√≥n' }
  ];

  for (const check of checks) {
    if (envContent.includes(check.pattern)) {
      console.log(`‚úÖ ${check.name}: Configurado`);
    } else {
      console.error(`‚ùå ${check.name}: Faltante`);
      return false;
    }
  }

  return true;
}

async function installDependencies() {
  console.log('\nüì¶ PASO 2: Verificando dependencias...');
  
  return new Promise((resolve) => {
    const npm = spawn('npm', ['install'], {
      cwd: 'backend',
      stdio: 'inherit'
    });

    npm.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ Dependencias instaladas correctamente');
        resolve(true);
      } else {
        console.error('‚ùå Error instalando dependencias');
        resolve(false);
      }
    });
  });
}

async function startProductionServer() {
  console.log('\nüñ•Ô∏è  PASO 3: Iniciando servidor de producci√≥n...');
  console.log('üìç Puerto: 3001');
  console.log('üåê Entorno: Producci√≥n');
  console.log('üîó Webhook: https://zyromarketplace.com/api/stripe/webhook');
  console.log('üí≥ Stripe: Modo LIVE (claves reales)');
  
  console.log('\n‚ö†Ô∏è  IMPORTANTE:');
  console.log('   ‚Ä¢ Este servidor usa claves REALES de Stripe');
  console.log('   ‚Ä¢ NO uses tarjetas de prueba (ser√°n rechazadas)');
  console.log('   ‚Ä¢ Para testing, usa tarjetas reales con cantidades peque√±as');
  console.log('   ‚Ä¢ Puedes cancelar/reembolsar inmediatamente despu√©s del test');
  
  console.log('\nüß™ PARA TESTING SEGURO:');
  console.log('   1. Usa tu propia tarjeta con 1‚Ç¨');
  console.log('   2. Verifica que el pago se procesa');
  console.log('   3. Verifica que se crea la cuenta de empresa');
  console.log('   4. Cancela la suscripci√≥n inmediatamente en Stripe Dashboard');
  
  console.log('\nüîÑ Iniciando servidor...');
  console.log('   Para detener: Ctrl+C');
  console.log('   Health check: http://localhost:3001/health');
  console.log('=' .repeat(60));

  // Cambiar al directorio backend
  process.chdir('backend');

  // Iniciar servidor
  const server = spawn('node', ['stripe-server-optimized.js'], {
    stdio: 'inherit',
    env: {
      ...process.env,
      NODE_ENV: 'production'
    }
  });

  // Manejar cierre del servidor
  server.on('error', (error) => {
    console.error('\n‚ùå Error iniciando servidor:', error.message);
    process.exit(1);
  });

  server.on('close', (code) => {
    console.log(`\nüëã Servidor cerrado con c√≥digo: ${code}`);
    process.exit(code);
  });

  // Manejar se√±ales de terminaci√≥n
  process.on('SIGINT', () => {
    console.log('\n\nüëã Cerrando servidor de producci√≥n...');
    server.kill('SIGINT');
  });

  process.on('SIGTERM', () => {
    console.log('\n\nüëã Cerrando servidor de producci√≥n...');
    server.kill('SIGTERM');
  });
}

async function main() {
  try {
    // Verificar configuraci√≥n
    const configOk = await verifyConfiguration();
    if (!configOk) {
      console.error('\n‚ùå Configuraci√≥n incompleta. Corrige los errores antes de continuar.');
      process.exit(1);
    }

    // Instalar dependencias
    const depsOk = await installDependencies();
    if (!depsOk) {
      console.error('\n‚ùå Error con las dependencias. Revisa la instalaci√≥n.');
      process.exit(1);
    }

    // Iniciar servidor
    await startProductionServer();

  } catch (error) {
    console.error('\nüí• ERROR CR√çTICO:', error.message);
    process.exit(1);
  }
}

// Ejecutar despliegue
main();