/**
 * ‚ö° EJECUTAR AHORA - SOLUCI√ìN DUPLICADOS "ACTIVA"
 * 
 * Script de ejecuci√≥n inmediata para la app React Native
 * 
 * INSTRUCCIONES DE USO:
 * 1. Importa este archivo en tu componente principal
 * 2. Llama a la funci√≥n ejecutarAhoraSolucionDuplicados()
 * 3. La soluci√≥n se aplicar√° autom√°ticamente
 */

import { ejecutarSolucionDuplicadosActiva } from './EJECUTAR_SOLUCION_DUPLICADOS_ACTIVA_REAL';
import { Alert } from 'react-native';

/**
 * ‚ö° EJECUTAR SOLUCI√ìN INMEDIATAMENTE
 */
export const ejecutarAhoraSolucionDuplicados = async () => {
  try {
    console.log('‚ö° EJECUTANDO SOLUCI√ìN DE DUPLICADOS "ACTIVA" AHORA...');
    
    // Mostrar confirmaci√≥n al usuario
    return new Promise((resolve) => {
      Alert.alert(
        'üõ†Ô∏è Soluci√≥n de Duplicados',
        '¬øQuieres ejecutar la soluci√≥n para eliminar empresas duplicadas con estado "Activa"?\n\n' +
        '‚úÖ Eliminar√° duplicados autom√°ticamente\n' +
        '‚úÖ Mantendr√° las versiones m√°s completas\n' +
        '‚úÖ Limpiar√° datos relacionados\n\n' +
        '‚ö†Ô∏è Esta acci√≥n no se puede deshacer.',
        [
          {
            text: '‚ùå Cancelar',
            style: 'cancel',
            onPress: () => {
              console.log('‚ùå Soluci√≥n cancelada por el usuario');
              resolve({ success: false, cancelled: true });
            }
          },
          {
            text: '‚úÖ Ejecutar',
            onPress: async () => {
              try {
                console.log('‚úÖ Usuario confirm√≥ ejecuci√≥n');
                
                // Ejecutar la soluci√≥n
                const resultado = await ejecutarSolucionDuplicadosActiva();
                
                console.log('üìä Resultado de ejecuci√≥n inmediata:', resultado);
                
                resolve(resultado);
                
              } catch (error) {
                console.error('‚ùå Error en ejecuci√≥n inmediata:', error);
                
                Alert.alert(
                  '‚ùå Error',
                  `Error ejecutando la soluci√≥n:\n\n${error.message}`,
                  [{ text: 'OK' }]
                );
                
                resolve({ success: false, error: error.message });
              }
            }
          }
        ]
      );
    });
    
  } catch (error) {
    console.error('‚ùå Error en ejecutarAhoraSolucionDuplicados:', error);
    
    Alert.alert(
      '‚ùå Error Cr√≠tico',
      `Error iniciando la soluci√≥n:\n\n${error.message}`,
      [{ text: 'OK' }]
    );
    
    return { success: false, error: error.message };
  }
};

/**
 * üî• EJECUTAR SOLUCI√ìN SIN CONFIRMACI√ìN (PARA DESARROLLO)
 */
export const ejecutarSolucionSinConfirmacion = async () => {
  try {
    console.log('üî• EJECUTANDO SOLUCI√ìN SIN CONFIRMACI√ìN...');
    console.log('‚ö†Ô∏è MODO DESARROLLO - SIN ALERTAS DE CONFIRMACI√ìN');
    
    const resultado = await ejecutarSolucionDuplicadosActiva();
    
    console.log('üìä Resultado sin confirmaci√≥n:', resultado);
    
    return resultado;
    
  } catch (error) {
    console.error('‚ùå Error en ejecuci√≥n sin confirmaci√≥n:', error);
    return { success: false, error: error.message };
  }
};

/**
 * üéØ EJECUTAR CON CALLBACK PERSONALIZADO
 */
export const ejecutarSolucionConCallback = async (onSuccess, onError) => {
  try {
    console.log('üéØ Ejecutando soluci√≥n con callback personalizado...');
    
    const resultado = await ejecutarSolucionDuplicadosActiva();
    
    if (resultado.success) {
      console.log('‚úÖ Soluci√≥n exitosa, ejecutando callback de √©xito');
      if (onSuccess) onSuccess(resultado);
    } else {
      console.log('‚ùå Soluci√≥n fall√≥, ejecutando callback de error');
      if (onError) onError(resultado);
    }
    
    return resultado;
    
  } catch (error) {
    console.error('‚ùå Error en ejecuci√≥n con callback:', error);
    if (onError) onError({ success: false, error: error.message });
    return { success: false, error: error.message };
  }
};

/**
 * üì± INTEGRACI√ìN F√ÅCIL PARA COMPONENTES
 */
export const integrarSolucionEnComponente = (Component) => {
  return class ComponenteConSolucion extends Component {
    
    /**
     * M√©todo para ejecutar la soluci√≥n desde cualquier componente
     */
    ejecutarSolucionDuplicados = async () => {
      try {
        console.log('üì± Ejecutando soluci√≥n desde componente integrado...');
        
        const resultado = await ejecutarAhoraSolucionDuplicados();
        
        // Si el componente tiene un m√©todo para manejar el resultado
        if (this.onSolucionCompletada) {
          this.onSolucionCompletada(resultado);
        }
        
        return resultado;
        
      } catch (error) {
        console.error('‚ùå Error en integraci√≥n de componente:', error);
        
        // Si el componente tiene un m√©todo para manejar errores
        if (this.onSolucionError) {
          this.onSolucionError(error);
        }
        
        return { success: false, error: error.message };
      }
    };
    
    /**
     * M√©todo para verificar si hay duplicados sin ejecutar la soluci√≥n
     */
    verificarDuplicados = async () => {
      try {
        const AsyncStorage = require('@react-native-async-storage/async-storage').default;
        
        const companiesData = await AsyncStorage.getItem('companiesList');
        const companies = companiesData ? JSON.parse(companiesData) : [];
        
        if (companies.length === 0) {
          return { hayDuplicados: false, totalEmpresas: 0 };
        }
        
        // Detectar duplicados r√°pido
        const emails = companies.map(c => c.email?.toLowerCase().trim()).filter(Boolean);
        const names = companies.map(c => (c.companyName || c.name || '').toLowerCase().trim()).filter(Boolean);
        
        const uniqueEmails = [...new Set(emails)];
        const uniqueNames = [...new Set(names)];
        
        const duplicateEmails = emails.length - uniqueEmails.length;
        const duplicateNames = names.length - uniqueNames.length;
        const hayDuplicados = duplicateEmails > 0 || duplicateNames > 0;
        
        return {
          hayDuplicados,
          totalEmpresas: companies.length,
          duplicadosEmail: duplicateEmails,
          duplicadosNombre: duplicateNames
        };
        
      } catch (error) {
        console.error('‚ùå Error verificando duplicados:', error);
        return { hayDuplicados: false, error: error.message };
      }
    };
  };
};

// Exportar funci√≥n principal por defecto
export default ejecutarAhoraSolucionDuplicados;